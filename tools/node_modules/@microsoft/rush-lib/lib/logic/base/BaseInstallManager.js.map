{"version":3,"file":"BaseInstallManager.js","sourceRoot":"","sources":["../../../src/logic/base/BaseInstallManager.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAE3D,uDAAiC;AAEjC,uCAAyB;AACzB,2CAA6B;AAC7B,+CAAiC;AACjC,oEAOsC;AACtC,kDAAqD;AAErD,wEAAqE;AAGrE,iFAA8E;AAC9E,gCAA6B;AAC7B,+DAAoF;AACpF,yDAA2E;AAI3E,yCAAsC;AAEtC,oDAAiD;AACjD,oEAAiE;AACjE,yDAAsD;AACtD,qEAAkE;AAClE,+DAA4D;AAC5D,yDAAyE;AACzE,wEAAqE;AACrE,yEAAsE;AA0EtE;;GAEG;AACH,MAAsB,kBAAkB;IAWtC,YACE,iBAAoC,EACpC,gBAAkC,EAClC,YAA0B,EAC1B,OAA+B;QATzB,uBAAkB,GAAY,KAAK,CAAC;QACpC,4BAAuB,GAAY,KAAK,CAAC;QAU/C,IAAI,CAAC,kBAAkB,GAAG,iBAAiB,CAAC;QAC5C,IAAI,CAAC,iBAAiB,GAAG,gBAAgB,CAAC;QAC1C,IAAI,CAAC,gBAAgB,GAAG,YAAY,CAAC,wBAAwB,CAAC;QAC9D,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QAExB,IAAI,CAAC,sBAAsB,GAAG,wCAAsB,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,CAAC;QAC1F,IAAI,CAAC,mBAAmB,GAAG,kCAAmB,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,CAAC;IACtF,CAAC;IAED,IAAc,iBAAiB;QAC7B,OAAO,IAAI,CAAC,kBAAkB,CAAC;IACjC,CAAC;IAED,IAAc,gBAAgB;QAC5B,OAAO,IAAI,CAAC,iBAAiB,CAAC;IAChC,CAAC;IAED,IAAc,eAAe;QAC3B,OAAO,IAAI,CAAC,gBAAgB,CAAC;IAC/B,CAAC;IAED,IAAc,OAAO;QACnB,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IAEM,KAAK,CAAC,cAAc;QACzB,MAAM,iBAAiB,GAAY,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,MAAM,GAAG,CAAC,CAAC;QAC/E,MAAM,aAAa,GACjB,IAAI,CAAC,iBAAiB,CAAC,WAAW,IAAI,IAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC,aAAa,CAAC;QAEzF,wDAAwD;QACxD,IAAI,iBAAiB,IAAI,CAAC,aAAa,EAAE;YACvC,OAAO,CAAC,GAAG,EAAE,CAAC;YACd,OAAO,CAAC,GAAG,CACT,cAAM,CAAC,GAAG,CACR,gGAAgG;gBAC9F,mDAAmD,CACtD,CACF,CAAC;YACF,MAAM,IAAI,wCAAoB,EAAE,CAAC;SAClC;QAED,4FAA4F;QAC5F,IAAI,IAAI,CAAC,OAAO,CAAC,sBAAsB,IAAI,iBAAiB,EAAE;YAC5D,OAAO,CAAC,GAAG,EAAE,CAAC;YACd,OAAO,CAAC,GAAG,CACT,cAAM,CAAC,GAAG,CACR,+FAA+F;gBAC7F,qCAAqC,CACxC,CACF,CAAC;YACF,MAAM,IAAI,wCAAoB,EAAE,CAAC;SAClC;QAED,MAAM,EAAE,oBAAoB,EAAE,iBAAiB,EAAE,GAAG,MAAM,IAAI,CAAC,YAAY,EAAE,CAAC;QAE9E,IAAI,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE;YAC1B,OAAO;SACR;QAED,OAAO,CAAC,GAAG,CACT,EAAE,CAAC,GAAG,GAAG,cAAM,CAAC,IAAI,CAAC,6BAA6B,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,GAAG,CAAC,CAC9F,CAAC;QAEF,kFAAkF;QAClF,iFAAiF;QACjF,gFAAgF;QAChF,iFAAiF;QACjF,MAAM,YAAY,GAChB,iBAAiB,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,8BAA8B,EAAE,CAAC;QAErF,mDAAmD;QACnD,MAAM,cAAc,GAAkB,GAAG,EAAE;YACzC,0DAA0D;YAC1D,MAAM,WAAW,GAAoB,8BAAU,CAAC,aAAa,CAAC,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC;YAChG,OAAO,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAChD,CAAC,CAAC;QAEF,IAAI,YAAY,IAAI,CAAC,oBAAoB,IAAI,CAAC,iBAAiB,IAAI,CAAC,cAAc,EAAE,EAAE;YACpF,OAAO,CAAC,GAAG,EAAE,CAAC;YACd,MAAM,IAAI,CAAC,gBAAgB,EAAE,CAAC;YAE9B,IAAI,gBAAqC,CAAC;YAC1C,IAAI;gBACF,gBAAgB,GAAG,MAAM,IAAI,CAAC,0BAA0B,EAAE,CAAC;aAC5D;YAAC,WAAM;gBACN,0EAA0E;gBAC1E,iCAAiC;aAClC;YAED,IAAI,gBAAgB,KAAK,KAAK,EAAE;gBAC9B,OAAO,CAAC,GAAG,CACT,cAAM,CAAC,MAAM,CAAC,6EAA6E,CAAC,CAC7F,CAAC;aACH;YAED,qFAAqF;YACrF,IAAI,CAAC,sBAAsB,CAAC,KAAK,EAAE,CAAC;YAEpC,6GAA6G;YAC7G,6DAA6D;YAC7D,IAAI,CAAC,mBAAmB,CAAC,KAAK,EAAE,CAAC;YAEjC,6BAA6B;YAC7B,MAAM,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;YAEtC,IAAI,IAAI,CAAC,OAAO,CAAC,sBAAsB,IAAI,CAAC,oBAAoB,EAAE;gBAChE,oFAAoF;gBACpF,qBAAS,CAAC,QAAQ,CAChB,IAAI,CAAC,kBAAkB,CAAC,sBAAsB,EAC9C,IAAI,CAAC,kBAAkB,CAAC,8BAA8B,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAC7E,CAAC;aACH;iBAAM;gBACL,4EAA4E;aAC7E;YAED,wDAAwD;YACxD,IAAI,IAAI,CAAC,OAAO,CAAC,sBAAsB,EAAE;gBACvC,IAAI,IAAI,CAAC,iBAAiB,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,YAAY,CAAC,IAAI,CAAC,iBAAiB,CAAC,EAAE;oBAClG,OAAO,CAAC,GAAG,CACT,cAAM,CAAC,MAAM,CACX,GAAG,6BAAa,CAAC,iBAAiB,6DAA6D,CAChG,CACF,CAAC;iBACH;aACF;YAED,yFAAyF;YACzF,IAAI,CAAC,iBAAiB,EAAE;gBACtB,IAAI,CAAC,sBAAsB,CAAC,MAAM,EAAE,CAAC;aACtC;SACF;aAAM;YACL,OAAO,CAAC,GAAG,CAAC,qCAAqC,CAAC,CAAC;SACpD;QAED,6DAA6D;QAC7D,MAAM,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAE9B,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IAClB,CAAC;IAUS,cAAc,CAAC,gBAAsB;QAC7C,0DAA0D;QAC1D,MAAM,uBAAuB,GAAa,EAAE,CAAC;QAE7C,iFAAiF;QACjF,0DAA0D;QAC1D,uBAAuB,CAAC,IAAI,CAC1B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,EAAE,6BAAa,CAAC,qBAAqB,CAAC,CACxF,CAAC;QAEF,oEAAoE;QACpE,kCAAkC;QAClC,uBAAuB,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,8BAA8B,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;QAE1G,uEAAuE;QACvE,uBAAuB,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,yBAAyB,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;QAErG,IAAI,IAAI,CAAC,iBAAiB,CAAC,cAAc,KAAK,MAAM,EAAE;YACpD,uDAAuD;YACvD,MAAM,gBAAgB,GAAW,IAAI,CAAC,iBAAiB,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YAE9F,IAAI,8BAAU,CAAC,MAAM,CAAC,gBAAgB,CAAC,EAAE;gBACvC,uBAAuB,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;aAChD;SACF;QAED,OAAO,qBAAS,CAAC,sBAAsB,CAAC,gBAAgB,EAAE,uBAAuB,CAAC,CAAC;IACrF,CAAC;IAES,KAAK,CAAC,YAAY;QAC1B,qBAAqB;QACrB,iCAAe,CAAC,cAAc,CAAC,IAAI,CAAC,kBAAkB,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QAEtE,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAExB,MAAM,uBAAuB,GAA4B,IAAI,iDAAuB,CAClF,IAAI,CAAC,kBAAkB,CACxB,CAAC;QACF,IAAI,uBAAuB,CAAC,iCAAiC,EAAE;YAC7D,IAAI,IAAI,CAAC,QAAQ,CAAC,sBAAsB,EAAE;gBACxC,uBAAuB,CAAC,kBAAkB,EAAE,CAAC;gBAC7C,OAAO,CAAC,GAAG,CACT,cAAM,CAAC,MAAM,CACX,+FAA+F,CAChG,CACF,CAAC;aACH;iBAAM;gBACL,MAAM,IAAI,KAAK,CAAC,4EAA4E,CAAC,CAAC;aAC/F;SACF;QAED,+CAA+C;QAC/C,MAAM,+BAAc,CAAC,yBAAyB,CAC5C,IAAI,CAAC,kBAAkB,EACvB,IAAI,CAAC,iBAAiB,EACtB,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CACjC,CAAC;QAEF,IAAI,cAAc,GAAmC,SAAS,CAAC;QAE/D,+FAA+F;QAC/F,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE;YAC7B,IAAI;gBACF,cAAc,GAAG,6CAAqB,CAAC,iBAAiB,CACtD,IAAI,CAAC,kBAAkB,CAAC,cAAc,EACtC,IAAI,CAAC,kBAAkB,CAAC,qBAAqB,EAC7C,IAAI,CAAC,kBAAkB,CAAC,8BAA8B,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAC7E,CAAC;aACH;YAAC,OAAO,EAAE,EAAE;gBACX,OAAO,CAAC,GAAG,EAAE,CAAC;gBACd,OAAO,CAAC,GAAG,CACT,sBAAsB,IAAI,CAAC,kBAAkB,CAAC,oBAAoB,KAAM,EAAY,CAAC,OAAO,EAAE,CAC/F,CAAC;gBAEF,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,sBAAsB,EAAE;oBACxC,OAAO,CAAC,GAAG,EAAE,CAAC;oBACd,OAAO,CAAC,GAAG,CAAC,cAAM,CAAC,GAAG,CAAC,mDAAmD,CAAC,CAAC,CAAC;oBAC7E,MAAM,IAAI,wCAAoB,EAAE,CAAC;iBAClC;gBAED,cAAc,GAAG,SAAS,CAAC;aAC5B;SACF;QAED,4DAA4D;QAC5D,uFAAuF;QACvF,MAAM,0BAA0B,GAAW,IAAI,CAAC,kBAAkB,CAAC,0BAA0B,CAAC;QAC9F,MAAM,kBAAkB,GAAwB;YAC9C,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO,IAAI,IAAI;SACtC,CAAC;QAEF,gFAAgF;QAChF,sDAAsD;QACtD,MAAM,iBAAiB,GAAY,CAAC,4BAAQ,CAAC,IAAI,CAAC,kBAAkB,EAAE,0BAA0B,EAAE;YAChG,aAAa,EAAE,IAAI;SACpB,CAAC,CAAC;QAEH,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE;YACxB,OAAO,CAAC,GAAG,EAAE,CAAC;YACd,OAAO,CAAC,GAAG,CAAC,cAAM,CAAC,IAAI,CAAC,kBAAkB,IAAI,CAAC,OAAO,CAAC,OAAO,qBAAqB,CAAC,CAAC,CAAC;SACvF;aAAM,IAAI,CAAC,iBAAiB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE;YACtD,OAAO,CAAC,GAAG,EAAE,CAAC;YACd,OAAO,CAAC,GAAG,CAAC,cAAM,CAAC,IAAI,CAAC,6CAA6C,CAAC,CAAC,CAAC;SACzE;QAED,4DAA4D;QAC5D,uDAAuD;QACvD,oEAAoE;QACpE,qBAAS,CAAC,SAAS,CACjB,IAAI,CAAC,kBAAkB,CAAC,sBAAsB,EAC9C,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,CACzC,CAAC;QACF,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC;QAEpC,6FAA6F;QAC7F,oFAAoF;QACpF,IAAI,IAAI,CAAC,iBAAiB,CAAC,cAAc,KAAK,MAAM,EAAE;YACpD,MAAM,6CAAqB,CAAC,gCAAgC,CAAC,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;SACpG;QAED,qGAAqG;QACrG,wCAAwC;QACxC,IAAI,EAAE,oBAAoB,EAAE,kBAAkB,EAAE,GAAG,MAAM,IAAI,CAAC,sBAAsB,CAAC,cAAc,CAAC,CAAC;QACrG,oBAAoB,GAAG,oBAAoB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC;QAE/E,IAAI,CAAC,mBAAmB,CAAC,cAAc,CAAC,CAAC;QAEzC,kCAAkC;QAClC,IAAI,kBAAkB,CAAC,MAAM,GAAG,CAAC,EAAE;YACjC,OAAO,CAAC,GAAG,EAAE,CAAC;YACd,OAAO,CAAC,GAAG,CACT,cAAM,CAAC,MAAM,CACX,yBAAc,CAAC,SAAS,CACtB,OAAO,IAAI,CAAC,iBAAiB,CAAC,oBAAoB,iCAAiC,CACpF,CACF,CACF,CAAC;YAEF,KAAK,MAAM,iBAAiB,IAAI,kBAAkB,EAAE;gBAClD,OAAO,CAAC,GAAG,CAAC,cAAM,CAAC,MAAM,CAAC,IAAI,GAAG,iBAAiB,CAAC,CAAC,CAAC;aACtD;YACD,OAAO,CAAC,GAAG,EAAE,CAAC;SACf;QAED,gDAAgD;QAChD,IAAI,CAAC,oBAAoB,EAAE;YACzB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,sBAAsB,EAAE;gBACxC,OAAO,CAAC,GAAG,EAAE,CAAC;gBACd,OAAO,CAAC,GAAG,CACT,cAAM,CAAC,GAAG,CACR,OAAO,IAAI,CAAC,iBAAiB,CAAC,oBAAoB,iDAAiD,CACpG,CACF,CAAC;gBACF,MAAM,IAAI,wCAAoB,EAAE,CAAC;aAClC;SACF;QAED,OAAO,EAAE,oBAAoB,EAAE,iBAAiB,EAAE,CAAC;IACrD,CAAC;IAED;;OAEG;IACK,gBAAgB;QACtB,MAAM,UAAU,GAAW,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,WAAW,CAAC,CAAC;QACxF,MAAM,GAAG,GAAQ,IAAI,SAAG,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QACjD,MAAM,eAAe,GAAuB,GAAG,CAAC,cAAc,EAAE,CAAC;QAEjE,IAAI,8BAAU,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,eAAe,EAAE;YACpD,MAAM,gBAAgB,GAAa,8BAAU,CAAC,mBAAmB,CAAC,UAAU,CAAC,CAAC;YAC9E,+CAA+C;YAC/C,MAAM,aAAa,GAAa,gBAAgB,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;YACrF,IAAI,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC5B,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,cAAM,CAAC,IAAI,CAAC,+CAA+C,CAAC,CAAC,CAAC;gBAEnF,IAAI,CAAC,GAAG,CAAC,kBAAkB,EAAE,EAAE;oBAC7B,MAAM,KAAK,GAA4B,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,cAAM,CAAC,MAAM,CAAC,CAAC,CAAC,cAAM,CAAC,GAAG,CAAC;oBAC9F,OAAO,CAAC,KAAK,CACX,KAAK,CACH;wBACE,GAAG;wBACH,oFAAoF;wBACpF,6BAA6B,GAAG,CAAC,kBAAkB,EAAE,2CAA2C;wBAChG,GAAG;wBACH,uCAAuC;wBACvC,GAAG;qBACJ,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,CACf,CACF,CAAC;oBACF,IAAI,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE;wBAC7B,qFAAqF;wBACrF,uBAAuB;wBACvB,OAAO;qBACR;oBACD,OAAO,CAAC,KAAK,CACX,KAAK,CACH;wBACE,0FAA0F;wBAC1F,GAAG;qBACJ,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,CACf,CACF,CAAC;oBACF,MAAM,IAAI,wCAAoB,EAAE,CAAC;iBAClC;gBAED,mEAAmE;gBACnE,8BAAU,CAAC,iBAAiB,CAAC,eAAe,CAAC,CAAC;gBAE9C,gDAAgD;gBAChD,MAAM,qBAAqB,GAAa,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;gBACzF,KAAK,MAAM,QAAQ,IAAI,qBAAqB,EAAE;oBAC5C,yEAAyE;oBACzE,MAAM,eAAe,GAAW,8BAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC,CAAC;oBACrF,8BAAU,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,QAAQ,CAAC,EAAE,eAAe,EAAE;wBAC1E,kBAAkB,EAAE,+BAAW,CAAC,EAAE;qBACnC,CAAC,CAAC;oBAEH,8BAAU,CAAC,mBAAmB,CAC5B,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,QAAQ,CAAC;oBACpC,sCAAsC;oBACtC,iCAAa,CAAC,QAAQ,GAAG,iCAAa,CAAC,WAAW,CACnD,CAAC;iBACH;gBAED,OAAO,CAAC,GAAG,CACT,iDAAiD,GAAG,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,GAAG,CAC9F,CAAC;aACH;SACF;IACH,CAAC;IAED;;;OAGG;IACO,qBAAqB,CAAC,IAAc,EAAE,OAA+B;QAC7E,IAAI,IAAI,CAAC,kBAAkB,CAAC,cAAc,KAAK,KAAK,EAAE;YACpD,IAAI,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,kBAAkB,CAAC,yBAAyB,EAAE,OAAO,CAAC,EAAE;gBACzE,QAAQ;gBACR,EAAE;gBACF,2FAA2F;gBAC3F,yFAAyF;gBACzF,EAAE;gBACF,kEAAkE;gBAClE,oGAAoG;gBACpG,8DAA8D;gBAC9D,qGAAqG;gBACrG,6FAA6F;gBAC7F,EAAE;gBACF,yGAAyG;gBACzG,yFAAyF;gBACzF,iCAAiC;gBACjC,EAAE;gBACF,6FAA6F;gBAC7F,EAAE;gBACF,iGAAiG;gBACjG,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;aAC5B;YACD,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC,CAAC;YAC7D,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC;YAEzD,IAAI,OAAO,CAAC,cAAc,EAAE;gBAC1B,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;aACxB;SACF;aAAM,IAAI,IAAI,CAAC,kBAAkB,CAAC,cAAc,KAAK,MAAM,EAAE;YAC5D,gGAAgG;YAChG,mFAAmF;YACnF,uEAAuE;YACvE,IACE,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,SAAS,KAAK,OAAO;gBACzD,mDAAwB,CAAC,qBAAqB,EAC9C;gBACA,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;aACzE;YAED,MAAM,EAAE,aAAa,EAAE,WAAW,EAAE,GAAG,IAAI,CAAC,kBAAkB,CAAC,wBAAwB,CAAC;YAExF,IAAI,WAAW,CAAC,mCAAmC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,sBAAsB,EAAE;gBAC5F,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;aAChC;iBAAM,IAAI,WAAW,CAAC,wCAAwC,EAAE;gBAC/D,6DAA6D;gBAC7D,IAAI,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;aACvC;iBAAM;gBACL,kGAAkG;gBAClG,kEAAkE;gBAClE,IAAI,CAAC,IAAI,CAAC,6BAA6B,CAAC,CAAC;aAC1C;YAED,IAAI,OAAO,CAAC,cAAc,EAAE;gBAC1B,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;aACnC;YAED,IAAI,OAAO,CAAC,kBAAkB,EAAE;gBAC9B,IAAI,CAAC,IAAI,CAAC,uBAAuB,EAAE,OAAO,CAAC,kBAAkB,CAAC,QAAQ,EAAE,CAAC,CAAC;aAC3E;YAED,IAAI,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,kBAAkB,CAAC,yBAAyB,EAAE,OAAO,CAAC,EAAE;gBAC1E,4DAA4D;gBAC5D,IAAI,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,sBAAsB,KAAK,KAAK,EAAE;oBACxE,IAAI,CAAC,IAAI,CAAC,+BAA+B,CAAC,CAAC;iBAC5C;aACF;iBAAM;gBACL,mEAAmE;gBACnE,IAAI,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,sBAAsB,EAAE;oBAC9D,IAAI,CAAC,IAAI,CAAC,4BAA4B,CAAC,CAAC;iBACzC;aACF;SACF;aAAM,IAAI,IAAI,CAAC,kBAAkB,CAAC,cAAc,KAAK,MAAM,EAAE;YAC5D,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,WAAW,CAAC,CAAC;YACxC,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,kBAAkB,CAAC,eAAe,CAAC,CAAC;YAErE,gFAAgF;YAChF,iDAAiD;YACjD,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;YAE/B,IAAI,OAAO,CAAC,kBAAkB,EAAE;gBAC9B,IAAI,CAAC,IAAI,CAAC,uBAAuB,EAAE,OAAO,CAAC,kBAAkB,CAAC,QAAQ,EAAE,CAAC,CAAC;aAC3E;YAED,IAAI,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,aAAa,EAAE;gBACrD,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;aAC/B;YAED,IAAI,OAAO,CAAC,cAAc,EAAE;gBAC1B,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;aACxB;SACF;IACH,CAAC;IAEO,KAAK,CAAC,0BAA0B;QACtC,MAAM,aAAa,GAAW,IAAI,CAAC,IAAI,CACrC,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,EACvC,OAAO,GAAG,WAAI,CAAC,OAAO,EACtB,iBAAiB,CAClB,CAAC;QAEF,IAAI,8BAAU,CAAC,MAAM,CAAC,aAAa,CAAC,EAAE;YACpC,IAAI,YAAY,GAAkC,SAAS,CAAC;YAC5D,IAAI;gBACF,oDAAoD;gBACpD,MAAM,KAAK,GAAW,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;gBAC3C,MAAM,KAAK,GAAW,KAAK,GAAG,8BAAU,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;gBACtF,MAAM,IAAI,GAAW,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;gBAEpC,wBAAwB;gBACxB,IAAI,KAAK,GAAG,EAAE,GAAG,IAAI,EAAE;oBACrB,6BAA6B;oBAC7B,YAAY,GAAG,4BAAQ,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;iBAC7C;aACF;YAAC,OAAO,CAAC,EAAE;gBACV,uBAAuB;aACxB;YACD,IAAI,YAAY,KAAK,OAAO,EAAE;gBAC5B,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;aAC7C;YACD,IAAI,YAAY,KAAK,IAAI,IAAI,YAAY,KAAK,KAAK,EAAE;gBACnD,OAAO,YAAY,CAAC;aACrB;SACF;QAED,uGAAuG;QACvG,iGAAiG;QACjG,sCAAsC;QACtC,MAAM,4BAAQ,CAAC,SAAS,CAAC,OAAO,EAAE,aAAa,EAAE,EAAE,kBAAkB,EAAE,IAAI,EAAE,CAAC,CAAC;QAE/E,IAAI;YACF,wEAAwE;YACxE,MAAM,gBAAgB,GAAY,MAAM,IAAI,CAAC,+BAA+B,CAC1E,gCAAgC,CACjC,CAAC;YACF,mBAAmB;YACnB,MAAM,4BAAQ,CAAC,SAAS,CAAC,gBAAgB,EAAE,aAAa,EAAE,EAAE,kBAAkB,EAAE,IAAI,EAAE,CAAC,CAAC;YACxF,OAAO,gBAAgB,CAAC;SACzB;QAAC,OAAO,KAAK,EAAE;YACd,MAAM,4BAAQ,CAAC,SAAS,CAAC,OAAO,EAAE,aAAa,EAAE,EAAE,kBAAkB,EAAE,IAAI,EAAE,CAAC,CAAC;YAC/E,MAAM,KAAK,CAAC;SACb;IACH,CAAC;IAED,yCAAyC;IACjC,KAAK,CAAC,+BAA+B,CAAC,WAAmB;QAC/D,IAAI,QAAQ,GAAW,WAAW,CAAC;QACnC,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;YACxB,QAAQ,IAAI,GAAG,CAAC;SACjB;QACD,6DAA6D;QAC7D,QAAQ,IAAI,6BAAa,CAAC,eAAe,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QAE9D,MAAM,SAAS,GAAc,IAAI,qBAAS,EAAE,CAAC;QAC7C,SAAS,CAAC,SAAS,GAAG,qBAAqB,OAAO,CAAC,OAAO,IAAI,EAAE,CAAC,QAAQ,EAAE,IAAI,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC;QAC3F,SAAS,CAAC,MAAM,GAAG,0EAA0E,CAAC;QAE9F,MAAM,QAAQ,GAAsB,MAAM,SAAS,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QACzE,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE;YAChB,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;SACpC;QAED,MAAM,IAAI,GAAuE,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;QACvG,IAAI,GAAW,CAAC;QAChB,IAAI;YACF,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAI,CAAC,OAAO,CAAC,EAAE;gBAChC,4BAA4B;gBAC5B,OAAO,KAAK,CAAC;aACd;YAED,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,WAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC;YAC/C,IAAI,CAAC,GAAG,EAAE;gBACR,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;aAClC;SACF;QAAC,OAAO,CAAC,EAAE;YACV,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;SAC3C;QAED,oDAAoD;QACpD,SAAS,CAAC,MAAM,GAAG,KAAK,CAAC;QAEzB,MAAM,SAAS,GAAmB,MAAM,SAAS,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;QAElE,IAAI,CAAC,SAAS,CAAC,EAAE,EAAE;YACjB,IAAI,SAAS,CAAC,MAAM,KAAK,GAAG,EAAE;gBAC5B,OAAO,KAAK,CAAC;aACd;iBAAM;gBACL,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;aACpC;SACF;QAED,OAAO,IAAI,CAAC;IACd,CAAC;IAEO,mBAAmB,CAAC,cAA8C;QACxE,IAAI,cAAc,EAAE;YAClB,qBAAS,CAAC,QAAQ,CAChB,IAAI,CAAC,kBAAkB,CAAC,8BAA8B,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,EAC5E,IAAI,CAAC,iBAAiB,CAAC,sBAAsB,CAC9C,CAAC;YACF,qBAAS,CAAC,QAAQ,CAChB,IAAI,CAAC,kBAAkB,CAAC,8BAA8B,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,EAC5E,IAAI,CAAC,iBAAiB,CAAC,gCAAgC,CACxD,CAAC;SACH;aAAM;YACL,sCAAsC;YACtC,8BAAU,CAAC,UAAU,CAAC,IAAI,CAAC,iBAAiB,CAAC,sBAAsB,CAAC,CAAC;YAErE,IAAI,IAAI,CAAC,iBAAiB,CAAC,cAAc,KAAK,MAAM,EAAE;gBACpD,0DAA0D;gBAC1D,EAAE;gBACF,oFAAoF;gBACpF,qFAAqF;gBACrF,mFAAmF;gBACnF,sFAAsF;gBACtF,2EAA2E;gBAE3E,MAAM,kBAAkB,GAAuB,IAAI,CAAC,iBAAiB;qBAClE,qBAA2C,CAAC;gBAE/C,8BAAU,CAAC,UAAU,CACnB,IAAI,CAAC,IAAI,CACP,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,EACvC,kBAAkB,CAAC,8BAA8B,CAClD,CACF,CAAC;aACH;SACF;IACH,CAAC;IAES,KAAK,CAAC,gBAAgB;QAC9B,IAAI,IAAI,CAAC,kBAAkB,EAAE;YAC3B,OAAO;SACR;QAED,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE;YAC9B,MAAM,oBAAoB,GAAyB,IAAI,2CAAoB,CAAC;gBAC1E,iBAAiB,EAAE,IAAI,CAAC,iBAAiB;gBACzC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK;gBAC3B,sBAAsB,EAAE,IAAI,CAAC,uBAAuB;aACrD,CAAC,CAAC;YACH,MAAM,KAAK,GAAY,MAAM,oBAAoB,CAAC,SAAS,EAAE,CAAC;YAC9D,IAAI,CAAC,KAAK,EAAE;gBACV,OAAO,CAAC,KAAK,EAAE,CAAC;gBAChB,OAAO,CAAC,KAAK,CAAC,cAAM,CAAC,GAAG,CAAC,+CAA+C,CAAC,CAAC,CAAC;gBAC3E,OAAO,CAAC,KAAK,EAAE,CAAC;gBAChB,OAAO,CAAC,KAAK,CACX,cAAM,CAAC,IAAI,CACT,yGAAyG,CAC1G,CACF,CAAC;gBACF,MAAM,IAAI,wCAAoB,EAAE,CAAC;aAClC;SACF;QAED,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;IACjC,CAAC;CACF;AAlpBD,gDAkpBC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport colors from 'colors/safe';\nimport * as fetch from 'node-fetch';\nimport * as os from 'os';\nimport * as path from 'path';\nimport * as semver from 'semver';\nimport {\n  FileSystem,\n  JsonFile,\n  PosixModeBits,\n  NewlineKind,\n  AlreadyReportedError,\n  FileSystemStats\n} from '@rushstack/node-core-library';\nimport { PrintUtilities } from '@rushstack/terminal';\n\nimport { ApprovedPackagesChecker } from '../ApprovedPackagesChecker';\nimport { AsyncRecycler } from '../../utilities/AsyncRecycler';\nimport { BaseShrinkwrapFile } from '../base/BaseShrinkwrapFile';\nimport { EnvironmentConfiguration } from '../../api/EnvironmentConfiguration';\nimport { Git } from '../Git';\nimport { LastInstallFlag, LastInstallFlagFactory } from '../../api/LastInstallFlag';\nimport { LastLinkFlag, LastLinkFlagFactory } from '../../api/LastLinkFlag';\nimport { PnpmPackageManager } from '../../api/packageManager/PnpmPackageManager';\nimport { PurgeManager } from '../PurgeManager';\nimport { RushConfiguration, ICurrentVariantJson } from '../../api/RushConfiguration';\nimport { Rush } from '../../api/Rush';\nimport { RushGlobalFolder } from '../../api/RushGlobalFolder';\nimport { RushConstants } from '../RushConstants';\nimport { ShrinkwrapFileFactory } from '../ShrinkwrapFileFactory';\nimport { Utilities } from '../../utilities/Utilities';\nimport { InstallHelpers } from '../installManager/InstallHelpers';\nimport { PolicyValidator } from '../policy/PolicyValidator';\nimport { WebClient, WebClientResponse } from '../../utilities/WebClient';\nimport { SetupPackageRegistry } from '../setup/SetupPackageRegistry';\nimport { PnpmfileConfiguration } from '../pnpm/PnpmfileConfiguration';\n\nexport interface IInstallManagerOptions {\n  /**\n   * Whether the global \"--debug\" flag was specified.\n   */\n  debug: boolean;\n\n  /**\n   * Whether or not Rush will automatically update the shrinkwrap file.\n   * True for \"rush update\", false for \"rush install\".\n   */\n  allowShrinkwrapUpdates: boolean;\n\n  /**\n   * Whether to check the validation before install only, without actually installing anything.\n   */\n  checkOnly: boolean;\n\n  /**\n   * Whether to skip policy checks.\n   */\n  bypassPolicy: boolean;\n\n  /**\n   * Whether to skip linking, i.e. require \"rush link\" to be done manually later.\n   */\n  noLink: boolean;\n\n  /**\n   * Whether to delete the shrinkwrap file before installation, i.e. so that all dependencies\n   * will be upgraded to the latest SemVer-compatible version.\n   */\n  fullUpgrade: boolean;\n\n  /**\n   * Whether to force an update to the shrinkwrap file even if it appears to be unnecessary.\n   * Normally Rush uses heuristics to determine when \"pnpm install\" can be skipped,\n   * but sometimes the heuristics can be inaccurate due to external influences\n   * (pnpmfile.js script logic, registry changes, etc).\n   */\n  recheckShrinkwrap: boolean;\n\n  /**\n   * The value of the \"--network-concurrency\" command-line parameter, which\n   * is a diagnostic option used to troubleshoot network failures.\n   *\n   * Currently only supported for PNPM.\n   */\n  networkConcurrency: number | undefined;\n\n  /**\n   * Whether or not to collect verbose logs from the package manager.\n   * If specified when using PNPM, the logs will be in /common/temp/pnpm.log\n   */\n  collectLogFile: boolean;\n\n  /**\n   * The variant to consider when performing installations and validating shrinkwrap updates.\n   */\n  variant?: string | undefined;\n\n  /**\n   * Retry the install the specified number of times\n   */\n  maxInstallAttempts: number;\n\n  /**\n   * Filters to be passed to PNPM during installation, if applicable.\n   * These restrict the scope of a workspace installation.\n   */\n  pnpmFilterArguments: string[];\n}\n\n/**\n * This class implements common logic between \"rush install\" and \"rush update\".\n */\nexport abstract class BaseInstallManager {\n  private _rushConfiguration: RushConfiguration;\n  private _rushGlobalFolder: RushGlobalFolder;\n  private _commonTempInstallFlag: LastInstallFlag;\n  private _commonTempLinkFlag: LastLinkFlag;\n  private _installRecycler: AsyncRecycler;\n  private _npmSetupValidated: boolean = false;\n  private _syncNpmrcAlreadyCalled: boolean = false;\n\n  private _options: IInstallManagerOptions;\n\n  public constructor(\n    rushConfiguration: RushConfiguration,\n    rushGlobalFolder: RushGlobalFolder,\n    purgeManager: PurgeManager,\n    options: IInstallManagerOptions\n  ) {\n    this._rushConfiguration = rushConfiguration;\n    this._rushGlobalFolder = rushGlobalFolder;\n    this._installRecycler = purgeManager.commonTempFolderRecycler;\n    this._options = options;\n\n    this._commonTempInstallFlag = LastInstallFlagFactory.getCommonTempFlag(rushConfiguration);\n    this._commonTempLinkFlag = LastLinkFlagFactory.getCommonTempFlag(rushConfiguration);\n  }\n\n  protected get rushConfiguration(): RushConfiguration {\n    return this._rushConfiguration;\n  }\n\n  protected get rushGlobalFolder(): RushGlobalFolder {\n    return this._rushGlobalFolder;\n  }\n\n  protected get installRecycler(): AsyncRecycler {\n    return this._installRecycler;\n  }\n\n  protected get options(): IInstallManagerOptions {\n    return this._options;\n  }\n\n  public async doInstallAsync(): Promise<void> {\n    const isFilteredInstall: boolean = this.options.pnpmFilterArguments.length > 0;\n    const useWorkspaces: boolean =\n      this.rushConfiguration.pnpmOptions && this.rushConfiguration.pnpmOptions.useWorkspaces;\n\n    // Prevent filtered installs when workspaces is disabled\n    if (isFilteredInstall && !useWorkspaces) {\n      console.log();\n      console.log(\n        colors.red(\n          'Project filtering arguments can only be used when running in a workspace environment. Run the ' +\n            'command again without specifying these arguments.'\n        )\n      );\n      throw new AlreadyReportedError();\n    }\n\n    // Prevent update when using a filter, as modifications to the shrinkwrap shouldn't be saved\n    if (this.options.allowShrinkwrapUpdates && isFilteredInstall) {\n      console.log();\n      console.log(\n        colors.red(\n          'Project filtering arguments cannot be used when running \"rush update\". Run the command again ' +\n            'without specifying these arguments.'\n        )\n      );\n      throw new AlreadyReportedError();\n    }\n\n    const { shrinkwrapIsUpToDate, variantIsUpToDate } = await this.prepareAsync();\n\n    if (this.options.checkOnly) {\n      return;\n    }\n\n    console.log(\n      os.EOL + colors.bold(`Checking installation in \"${this.rushConfiguration.commonTempFolder}\"`)\n    );\n\n    // This marker file indicates that the last \"rush install\" completed successfully.\n    // Always perform a clean install if filter flags were provided. Additionally, if\n    // \"--purge\" was specified, or if the last install was interrupted, then we will\n    // need to perform a clean install.  Otherwise, we can do an incremental install.\n    const cleanInstall: boolean =\n      isFilteredInstall || !this._commonTempInstallFlag.checkValidAndReportStoreIssues();\n\n    // Allow us to defer the file read until we need it\n    const canSkipInstall: () => boolean = () => {\n      // Based on timestamps, can we skip this install entirely?\n      const outputStats: FileSystemStats = FileSystem.getStatistics(this._commonTempInstallFlag.path);\n      return this.canSkipInstall(outputStats.mtime);\n    };\n\n    if (cleanInstall || !shrinkwrapIsUpToDate || !variantIsUpToDate || !canSkipInstall()) {\n      console.log();\n      await this.validateNpmSetup();\n\n      let publishedRelease: boolean | undefined;\n      try {\n        publishedRelease = await this._checkIfReleaseIsPublished();\n      } catch {\n        // If the user is working in an environment that can't reach the registry,\n        // don't bother them with errors.\n      }\n\n      if (publishedRelease === false) {\n        console.log(\n          colors.yellow('Warning: This release of the Rush tool was unpublished; it may be unstable.')\n        );\n      }\n\n      // Delete the successful install file to indicate the install transaction has started\n      this._commonTempInstallFlag.clear();\n\n      // Since we're going to be tampering with common/node_modules, delete the \"rush link\" flag file if it exists;\n      // this ensures that a full \"rush link\" is required next time\n      this._commonTempLinkFlag.clear();\n\n      // Perform the actual install\n      await this.installAsync(cleanInstall);\n\n      if (this.options.allowShrinkwrapUpdates && !shrinkwrapIsUpToDate) {\n        // Copy (or delete) common\\temp\\pnpm-lock.yaml --> common\\config\\rush\\pnpm-lock.yaml\n        Utilities.syncFile(\n          this._rushConfiguration.tempShrinkwrapFilename,\n          this._rushConfiguration.getCommittedShrinkwrapFilename(this.options.variant)\n        );\n      } else {\n        // TODO: Validate whether the package manager updated it in a nontrivial way\n      }\n\n      // Always update the state file if running \"rush update\"\n      if (this.options.allowShrinkwrapUpdates) {\n        if (this.rushConfiguration.getRepoState(this.options.variant).refreshState(this.rushConfiguration)) {\n          console.log(\n            colors.yellow(\n              `${RushConstants.repoStateFilename} has been modified and must be committed to source control.`\n            )\n          );\n        }\n      }\n\n      // Create the marker file to indicate a successful install if it's not a filtered install\n      if (!isFilteredInstall) {\n        this._commonTempInstallFlag.create();\n      }\n    } else {\n      console.log('Installation is already up-to-date.');\n    }\n\n    // Perform any post-install work the install manager requires\n    await this.postInstallAsync();\n\n    console.log('');\n  }\n\n  protected abstract prepareCommonTempAsync(\n    shrinkwrapFile: BaseShrinkwrapFile | undefined\n  ): Promise<{ shrinkwrapIsUpToDate: boolean; shrinkwrapWarnings: string[] }>;\n\n  protected abstract installAsync(cleanInstall: boolean): Promise<void>;\n\n  protected abstract postInstallAsync(): Promise<void>;\n\n  protected canSkipInstall(lastModifiedDate: Date): boolean {\n    // Based on timestamps, can we skip this install entirely?\n    const potentiallyChangedFiles: string[] = [];\n\n    // Consider the timestamp on the node_modules folder; if someone tampered with it\n    // or deleted it entirely, then we can't skip this install\n    potentiallyChangedFiles.push(\n      path.join(this.rushConfiguration.commonTempFolder, RushConstants.nodeModulesFolderName)\n    );\n\n    // Additionally, if they pulled an updated shrinkwrap file from Git,\n    // then we can't skip this install\n    potentiallyChangedFiles.push(this.rushConfiguration.getCommittedShrinkwrapFilename(this.options.variant));\n\n    // Add common-versions.json file to the potentially changed files list.\n    potentiallyChangedFiles.push(this.rushConfiguration.getCommonVersionsFilePath(this.options.variant));\n\n    if (this.rushConfiguration.packageManager === 'pnpm') {\n      // If the repo is using pnpmfile.js, consider that also\n      const pnpmFileFilename: string = this.rushConfiguration.getPnpmfilePath(this.options.variant);\n\n      if (FileSystem.exists(pnpmFileFilename)) {\n        potentiallyChangedFiles.push(pnpmFileFilename);\n      }\n    }\n\n    return Utilities.isFileTimestampCurrent(lastModifiedDate, potentiallyChangedFiles);\n  }\n\n  protected async prepareAsync(): Promise<{ variantIsUpToDate: boolean; shrinkwrapIsUpToDate: boolean }> {\n    // Check the policies\n    PolicyValidator.validatePolicy(this._rushConfiguration, this.options);\n\n    this._installGitHooks();\n\n    const approvedPackagesChecker: ApprovedPackagesChecker = new ApprovedPackagesChecker(\n      this._rushConfiguration\n    );\n    if (approvedPackagesChecker.approvedPackagesFilesAreOutOfDate) {\n      if (this._options.allowShrinkwrapUpdates) {\n        approvedPackagesChecker.rewriteConfigFiles();\n        console.log(\n          colors.yellow(\n            'Approved package files have been updated. These updates should be committed to source control'\n          )\n        );\n      } else {\n        throw new Error(`Approved packages files are out-of date. Run \"rush update\" to update them.`);\n      }\n    }\n\n    // Ensure that the package manager is installed\n    await InstallHelpers.ensureLocalPackageManager(\n      this._rushConfiguration,\n      this._rushGlobalFolder,\n      this._options.maxInstallAttempts\n    );\n\n    let shrinkwrapFile: BaseShrinkwrapFile | undefined = undefined;\n\n    // (If it's a full update, then we ignore the shrinkwrap from Git since it will be overwritten)\n    if (!this.options.fullUpgrade) {\n      try {\n        shrinkwrapFile = ShrinkwrapFileFactory.getShrinkwrapFile(\n          this._rushConfiguration.packageManager,\n          this._rushConfiguration.packageManagerOptions,\n          this._rushConfiguration.getCommittedShrinkwrapFilename(this.options.variant)\n        );\n      } catch (ex) {\n        console.log();\n        console.log(\n          `Unable to load the ${this._rushConfiguration.shrinkwrapFilePhrase}: ${(ex as Error).message}`\n        );\n\n        if (!this.options.allowShrinkwrapUpdates) {\n          console.log();\n          console.log(colors.red('You need to run \"rush update\" to fix this problem'));\n          throw new AlreadyReportedError();\n        }\n\n        shrinkwrapFile = undefined;\n      }\n    }\n\n    // Write a file indicating which variant is being installed.\n    // This will be used by bulk scripts to determine the correct Shrinkwrap file to track.\n    const currentVariantJsonFilename: string = this._rushConfiguration.currentVariantJsonFilename;\n    const currentVariantJson: ICurrentVariantJson = {\n      variant: this.options.variant || null\n    };\n\n    // Determine if the variant is already current by updating current-variant.json.\n    // If nothing is written, the variant has not changed.\n    const variantIsUpToDate: boolean = !JsonFile.save(currentVariantJson, currentVariantJsonFilename, {\n      onlyIfChanged: true\n    });\n\n    if (this.options.variant) {\n      console.log();\n      console.log(colors.bold(`Using variant '${this.options.variant}' for installation.`));\n    } else if (!variantIsUpToDate && !this.options.variant) {\n      console.log();\n      console.log(colors.bold('Using the default variant for installation.'));\n    }\n\n    // Also copy down the committed .npmrc file, if there is one\n    // \"common\\config\\rush\\.npmrc\" --> \"common\\temp\\.npmrc\"\n    // Also ensure that we remove any old one that may be hanging around\n    Utilities.syncNpmrc(\n      this._rushConfiguration.commonRushConfigFolder,\n      this._rushConfiguration.commonTempFolder\n    );\n    this._syncNpmrcAlreadyCalled = true;\n\n    // Shim support for pnpmfile in. This shim will call back into the variant-specific pnpmfile.\n    // Additionally when in workspaces, the shim implements support for common versions.\n    if (this.rushConfiguration.packageManager === 'pnpm') {\n      await PnpmfileConfiguration.writeCommonTempPnpmfileShimAsync(this.rushConfiguration, this.options);\n    }\n\n    // Allow for package managers to do their own preparation and check that the shrinkwrap is up to date\n    // eslint-disable-next-line prefer-const\n    let { shrinkwrapIsUpToDate, shrinkwrapWarnings } = await this.prepareCommonTempAsync(shrinkwrapFile);\n    shrinkwrapIsUpToDate = shrinkwrapIsUpToDate && !this.options.recheckShrinkwrap;\n\n    this._syncTempShrinkwrap(shrinkwrapFile);\n\n    // Write out the reported warnings\n    if (shrinkwrapWarnings.length > 0) {\n      console.log();\n      console.log(\n        colors.yellow(\n          PrintUtilities.wrapWords(\n            `The ${this.rushConfiguration.shrinkwrapFilePhrase} contains the following issues:`\n          )\n        )\n      );\n\n      for (const shrinkwrapWarning of shrinkwrapWarnings) {\n        console.log(colors.yellow('  ' + shrinkwrapWarning));\n      }\n      console.log();\n    }\n\n    // Force update if the shrinkwrap is out of date\n    if (!shrinkwrapIsUpToDate) {\n      if (!this.options.allowShrinkwrapUpdates) {\n        console.log();\n        console.log(\n          colors.red(\n            `The ${this.rushConfiguration.shrinkwrapFilePhrase} is out of date. You need to run \"rush update\".`\n          )\n        );\n        throw new AlreadyReportedError();\n      }\n    }\n\n    return { shrinkwrapIsUpToDate, variantIsUpToDate };\n  }\n\n  /**\n   * Git hooks are only installed if the repo opts in by including files in /common/git-hooks\n   */\n  private _installGitHooks(): void {\n    const hookSource: string = path.join(this._rushConfiguration.commonFolder, 'git-hooks');\n    const git: Git = new Git(this.rushConfiguration);\n    const hookDestination: string | undefined = git.getHooksFolder();\n\n    if (FileSystem.exists(hookSource) && hookDestination) {\n      const allHookFilenames: string[] = FileSystem.readFolderItemNames(hookSource);\n      // Ignore the \".sample\" file(s) in this folder.\n      const hookFilenames: string[] = allHookFilenames.filter((x) => !/\\.sample$/.test(x));\n      if (hookFilenames.length > 0) {\n        console.log(os.EOL + colors.bold('Found files in the \"common/git-hooks\" folder.'));\n\n        if (!git.isHooksPathDefault()) {\n          const color: (str: string) => string = this.options.bypassPolicy ? colors.yellow : colors.red;\n          console.error(\n            color(\n              [\n                ' ',\n                `Rush cannot install the \"common/git-hooks\" scripts because your Git configuration `,\n                `specifies \"core.hooksPath=${git.getConfigHooksPath()}\". You can remove the setting by running:`,\n                ' ',\n                '    git config --unset core.hooksPath',\n                ' '\n              ].join(os.EOL)\n            )\n          );\n          if (this.options.bypassPolicy) {\n            // If \"--bypass-policy\" is specified, skip installation of hooks because Rush doesn't\n            // own the hooks folder\n            return;\n          }\n          console.error(\n            color(\n              [\n                '(Or, to temporarily ignore this problem, invoke Rush with the \"--bypass-policy\" option.)',\n                ' '\n              ].join(os.EOL)\n            )\n          );\n          throw new AlreadyReportedError();\n        }\n\n        // Clear the currently installed git hooks and install fresh copies\n        FileSystem.ensureEmptyFolder(hookDestination);\n\n        // Only copy files that look like Git hook names\n        const filteredHookFilenames: string[] = hookFilenames.filter((x) => /^[a-z\\-]+/.test(x));\n        for (const filename of filteredHookFilenames) {\n          // Copy the file.  Important: For Bash scripts, the EOL must not be CRLF.\n          const hookFileContent: string = FileSystem.readFile(path.join(hookSource, filename));\n          FileSystem.writeFile(path.join(hookDestination, filename), hookFileContent, {\n            convertLineEndings: NewlineKind.Lf\n          });\n\n          FileSystem.changePosixModeBits(\n            path.join(hookDestination, filename),\n            // eslint-disable-next-line no-bitwise\n            PosixModeBits.UserRead | PosixModeBits.UserExecute\n          );\n        }\n\n        console.log(\n          'Successfully installed these Git hook scripts: ' + filteredHookFilenames.join(', ') + os.EOL\n        );\n      }\n    }\n  }\n\n  /**\n   * Used when invoking the NPM tool.  Appends the common configuration options\n   * to the command-line.\n   */\n  protected pushConfigurationArgs(args: string[], options: IInstallManagerOptions): void {\n    if (this._rushConfiguration.packageManager === 'npm') {\n      if (semver.lt(this._rushConfiguration.packageManagerToolVersion, '5.0.0')) {\n        // NOTE:\n        //\n        // When using an npm version older than v5.0.0, we do NOT install optional dependencies for\n        // Rush, because npm does not generate the shrinkwrap file consistently across platforms.\n        //\n        // Consider the \"fsevents\" package. This is a Mac specific package\n        // which is an optional second-order dependency. Optional dependencies work by attempting to install\n        // the package, but removes the package if the install failed.\n        // This means that someone running generate on a Mac WILL have fsevents included in their shrinkwrap.\n        // When someone using Windows attempts to install from the shrinkwrap, the install will fail.\n        //\n        // If someone generates the shrinkwrap using Windows, then fsevents will NOT be listed in the shrinkwrap.\n        // When someone using Mac attempts to install from the shrinkwrap, they will NOT have the\n        // optional dependency installed.\n        //\n        // This issue has been fixed as of npm v5.0.0: https://github.com/npm/npm/releases/tag/v5.0.0\n        //\n        // For more context, see https://github.com/microsoft/rushstack/issues/761#issuecomment-428689600\n        args.push('--no-optional');\n      }\n      args.push('--cache', this._rushConfiguration.npmCacheFolder);\n      args.push('--tmp', this._rushConfiguration.npmTmpFolder);\n\n      if (options.collectLogFile) {\n        args.push('--verbose');\n      }\n    } else if (this._rushConfiguration.packageManager === 'pnpm') {\n      // Only explicitly define the store path if `pnpmStore` is using the default, or has been set to\n      // 'local'.  If `pnpmStore` = 'global', then allow PNPM to use the system's default\n      // path.  In all cases, this will be overridden by RUSH_PNPM_STORE_PATH\n      if (\n        this._rushConfiguration.pnpmOptions.pnpmStore === 'local' ||\n        EnvironmentConfiguration.pnpmStorePathOverride\n      ) {\n        args.push('--store', this._rushConfiguration.pnpmOptions.pnpmStorePath);\n      }\n\n      const { configuration: experiments } = this._rushConfiguration.experimentsConfiguration;\n\n      if (experiments.usePnpmFrozenLockfileForRushInstall && !this._options.allowShrinkwrapUpdates) {\n        args.push('--frozen-lockfile');\n      } else if (experiments.usePnpmPreferFrozenLockfileForRushUpdate) {\n        // In workspaces, we want to avoid unnecessary lockfile churn\n        args.push('--prefer-frozen-lockfile');\n      } else {\n        // Ensure that Rush's tarball dependencies get synchronized properly with the pnpm-lock.yaml file.\n        // See this GitHub issue: https://github.com/pnpm/pnpm/issues/1342\n        args.push('--no-prefer-frozen-lockfile');\n      }\n\n      if (options.collectLogFile) {\n        args.push('--reporter', 'ndjson');\n      }\n\n      if (options.networkConcurrency) {\n        args.push('--network-concurrency', options.networkConcurrency.toString());\n      }\n\n      if (semver.gte(this._rushConfiguration.packageManagerToolVersion, '7.0.0')) {\n        // pnpm >= 7.0.0 handles peer dependencies strict by default\n        if (this._rushConfiguration.pnpmOptions.strictPeerDependencies === false) {\n          args.push('--no-strict-peer-dependencies');\n        }\n      } else {\n        // pnpm < 7.0.0 does not handle peer dependencies strict by default\n        if (this._rushConfiguration.pnpmOptions.strictPeerDependencies) {\n          args.push('--strict-peer-dependencies');\n        }\n      }\n    } else if (this._rushConfiguration.packageManager === 'yarn') {\n      args.push('--link-folder', 'yarn-link');\n      args.push('--cache-folder', this._rushConfiguration.yarnCacheFolder);\n\n      // Without this option, Yarn will sometimes stop and ask for user input on STDIN\n      // (e.g. \"Which command would you like to run?\").\n      args.push('--non-interactive');\n\n      if (options.networkConcurrency) {\n        args.push('--network-concurrency', options.networkConcurrency.toString());\n      }\n\n      if (this._rushConfiguration.yarnOptions.ignoreEngines) {\n        args.push('--ignore-engines');\n      }\n\n      if (options.collectLogFile) {\n        args.push('--verbose');\n      }\n    }\n  }\n\n  private async _checkIfReleaseIsPublished(): Promise<boolean> {\n    const lastCheckFile: string = path.join(\n      this._rushGlobalFolder.nodeSpecificPath,\n      'rush-' + Rush.version,\n      'last-check.flag'\n    );\n\n    if (FileSystem.exists(lastCheckFile)) {\n      let cachedResult: boolean | 'error' | undefined = undefined;\n      try {\n        // NOTE: mtimeMs is not supported yet in Node.js 6.x\n        const nowMs: number = new Date().getTime();\n        const ageMs: number = nowMs - FileSystem.getStatistics(lastCheckFile).mtime.getTime();\n        const HOUR: number = 60 * 60 * 1000;\n\n        // Is the cache too old?\n        if (ageMs < 24 * HOUR) {\n          // No, read the cached result\n          cachedResult = JsonFile.load(lastCheckFile);\n        }\n      } catch (e) {\n        // Unable to parse file\n      }\n      if (cachedResult === 'error') {\n        throw new Error('Unable to contact server');\n      }\n      if (cachedResult === true || cachedResult === false) {\n        return cachedResult;\n      }\n    }\n\n    // Before we start the network operation, record a failed state.  If the process exits for some reason,\n    // this will record the error.  It will also update the timestamp to prevent other Rush instances\n    // from attempting to update the file.\n    await JsonFile.saveAsync('error', lastCheckFile, { ensureFolderExists: true });\n\n    try {\n      // For this check we use the official registry, not the private registry\n      const publishedRelease: boolean = await this._queryIfReleaseIsPublishedAsync(\n        'https://registry.npmjs.org:443'\n      );\n      // Cache the result\n      await JsonFile.saveAsync(publishedRelease, lastCheckFile, { ensureFolderExists: true });\n      return publishedRelease;\n    } catch (error) {\n      await JsonFile.saveAsync('error', lastCheckFile, { ensureFolderExists: true });\n      throw error;\n    }\n  }\n\n  // Helper for checkIfReleaseIsPublished()\n  private async _queryIfReleaseIsPublishedAsync(registryUrl: string): Promise<boolean> {\n    let queryUrl: string = registryUrl;\n    if (queryUrl[-1] !== '/') {\n      queryUrl += '/';\n    }\n    // Note that the \"@\" symbol does not normally get URL-encoded\n    queryUrl += RushConstants.rushPackageName.replace('/', '%2F');\n\n    const webClient: WebClient = new WebClient();\n    webClient.userAgent = `pnpm/? npm/? node/${process.version} ${os.platform()} ${os.arch()}`;\n    webClient.accept = 'application/vnd.npm.install-v1+json; q=1.0, application/json; q=0.8, */*';\n\n    const response: WebClientResponse = await webClient.fetchAsync(queryUrl);\n    if (!response.ok) {\n      throw new Error('Failed to query');\n    }\n\n    const data: { versions: { [version: string]: { dist: { tarball: string } } } } = await response.json();\n    let url: string;\n    try {\n      if (!data.versions[Rush.version]) {\n        // Version was not published\n        return false;\n      }\n\n      url = data.versions[Rush.version].dist.tarball;\n      if (!url) {\n        throw new Error(`URL not found`);\n      }\n    } catch (e) {\n      throw new Error('Error parsing response');\n    }\n\n    // Make sure the tarball wasn't deleted from the CDN\n    webClient.accept = '*/*';\n\n    const response2: fetch.Response = await webClient.fetchAsync(url);\n\n    if (!response2.ok) {\n      if (response2.status === 404) {\n        return false;\n      } else {\n        throw new Error('Failed to fetch');\n      }\n    }\n\n    return true;\n  }\n\n  private _syncTempShrinkwrap(shrinkwrapFile: BaseShrinkwrapFile | undefined): void {\n    if (shrinkwrapFile) {\n      Utilities.syncFile(\n        this._rushConfiguration.getCommittedShrinkwrapFilename(this.options.variant),\n        this.rushConfiguration.tempShrinkwrapFilename\n      );\n      Utilities.syncFile(\n        this._rushConfiguration.getCommittedShrinkwrapFilename(this.options.variant),\n        this.rushConfiguration.tempShrinkwrapPreinstallFilename\n      );\n    } else {\n      // Otherwise delete the temporary file\n      FileSystem.deleteFile(this.rushConfiguration.tempShrinkwrapFilename);\n\n      if (this.rushConfiguration.packageManager === 'pnpm') {\n        // Workaround for https://github.com/pnpm/pnpm/issues/1890\n        //\n        // When \"rush update --full\" is run, rush deletes common/temp/pnpm-lock.yaml so that\n        // a new lockfile can be generated. But because of the above bug \"pnpm install\" would\n        // respect \"common/temp/node_modules/.pnpm-lock.yaml\" and thus would not generate a\n        // new lockfile. Deleting this file in addition to deleting common/temp/pnpm-lock.yaml\n        // ensures that a new lockfile will be generated with \"rush update --full\".\n\n        const pnpmPackageManager: PnpmPackageManager = this.rushConfiguration\n          .packageManagerWrapper as PnpmPackageManager;\n\n        FileSystem.deleteFile(\n          path.join(\n            this.rushConfiguration.commonTempFolder,\n            pnpmPackageManager.internalShrinkwrapRelativePath\n          )\n        );\n      }\n    }\n  }\n\n  protected async validateNpmSetup(): Promise<void> {\n    if (this._npmSetupValidated) {\n      return;\n    }\n\n    if (!this.options.bypassPolicy) {\n      const setupPackageRegistry: SetupPackageRegistry = new SetupPackageRegistry({\n        rushConfiguration: this.rushConfiguration,\n        isDebug: this.options.debug,\n        syncNpmrcAlreadyCalled: this._syncNpmrcAlreadyCalled\n      });\n      const valid: boolean = await setupPackageRegistry.checkOnly();\n      if (!valid) {\n        console.error();\n        console.error(colors.red('ERROR: NPM credentials are missing or expired'));\n        console.error();\n        console.error(\n          colors.bold(\n            '==> Please run \"rush setup\" to update your NPM token.  (Or append \"--bypass-policy\" to proceed anyway.)'\n          )\n        );\n        throw new AlreadyReportedError();\n      }\n    }\n\n    this._npmSetupValidated = true;\n  }\n}\n"]}