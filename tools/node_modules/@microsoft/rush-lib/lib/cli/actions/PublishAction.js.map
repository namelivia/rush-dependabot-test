{"version":3,"file":"PublishAction.js","sourceRoot":"","sources":["../../../src/cli/actions/PublishAction.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport colors from 'colors/safe';\nimport { EOL } from 'os';\nimport * as path from 'path';\nimport * as semver from 'semver';\nimport {\n  CommandLineFlagParameter,\n  CommandLineStringParameter,\n  CommandLineChoiceParameter\n} from '@rushstack/ts-command-line';\nimport { FileSystem } from '@rushstack/node-core-library';\n\nimport { IChangeInfo, ChangeType } from '../../api/ChangeManagement';\nimport { RushConfigurationProject } from '../../api/RushConfigurationProject';\nimport { Npm } from '../../utilities/Npm';\nimport { RushCommandLineParser } from '../RushCommandLineParser';\nimport { PublishUtilities } from '../../logic/PublishUtilities';\nimport { ChangelogGenerator } from '../../logic/ChangelogGenerator';\nimport { PrereleaseToken } from '../../logic/PrereleaseToken';\nimport { ChangeManager } from '../../logic/ChangeManager';\nimport { BaseRushAction } from './BaseRushAction';\nimport { PublishGit } from '../../logic/PublishGit';\nimport { PolicyValidator } from '../../logic/policy/PolicyValidator';\nimport { VersionPolicy } from '../../api/VersionPolicy';\nimport { DEFAULT_PACKAGE_UPDATE_MESSAGE } from './VersionAction';\nimport { Utilities } from '../../utilities/Utilities';\nimport { Git } from '../../logic/Git';\n\nexport class PublishAction extends BaseRushAction {\n  private _addCommitDetails!: CommandLineFlagParameter;\n  private _apply!: CommandLineFlagParameter;\n  private _includeAll!: CommandLineFlagParameter;\n  private _npmAuthToken!: CommandLineStringParameter;\n  private _npmTag!: CommandLineStringParameter;\n  private _npmAccessLevel!: CommandLineChoiceParameter;\n  private _publish!: CommandLineFlagParameter;\n  private _regenerateChangelogs!: CommandLineFlagParameter;\n  private _registryUrl!: CommandLineStringParameter;\n  private _targetBranch!: CommandLineStringParameter;\n  private _prereleaseName!: CommandLineStringParameter;\n  private _partialPrerelease!: CommandLineFlagParameter;\n  private _suffix!: CommandLineStringParameter;\n  private _force!: CommandLineFlagParameter;\n  private _versionPolicy!: CommandLineStringParameter;\n  private _applyGitTagsOnPack!: CommandLineFlagParameter;\n  private _commitId!: CommandLineStringParameter;\n  private _releaseFolder!: CommandLineStringParameter;\n  private _pack!: CommandLineFlagParameter;\n  private _ignoreGitHooksParameter!: CommandLineFlagParameter;\n\n  private _prereleaseToken!: PrereleaseToken;\n  private _hotfixTagOverride!: string;\n  private _targetNpmrcPublishFolder!: string;\n  private _targetNpmrcPublishPath!: string;\n\n  public constructor(parser: RushCommandLineParser) {\n    super({\n      actionName: 'publish',\n      summary: 'Reads and processes package publishing change requests generated by \"rush change\".',\n      documentation:\n        'Reads and processes package publishing change requests generated by \"rush change\". This will perform a ' +\n        'read-only operation by default, printing operations executed to the console. To commit ' +\n        'changes and publish packages, you must use the --commit flag and/or the --publish flag.',\n      parser\n    });\n  }\n\n  protected onDefineParameters(): void {\n    this._apply = this.defineFlagParameter({\n      parameterLongName: '--apply',\n      parameterShortName: '-a',\n      description: 'If this flag is specified, the change requests will be applied to package.json files.'\n    });\n    this._targetBranch = this.defineStringParameter({\n      parameterLongName: '--target-branch',\n      parameterShortName: '-b',\n      argumentName: 'BRANCH',\n      description:\n        'If this flag is specified, applied changes and deleted change requests will be ' +\n        'committed and merged into the target branch.'\n    });\n    this._publish = this.defineFlagParameter({\n      parameterLongName: '--publish',\n      parameterShortName: '-p',\n      description: 'If this flag is specified, applied changes will be published to the NPM registry.'\n    });\n    this._addCommitDetails = this.defineFlagParameter({\n      parameterLongName: '--add-commit-details',\n      parameterShortName: undefined,\n      description: 'Adds commit author and hash to the changelog.json files for each change.'\n    });\n    this._regenerateChangelogs = this.defineFlagParameter({\n      parameterLongName: '--regenerate-changelogs',\n      parameterShortName: undefined,\n      description: 'Regenerates all changelog files based on the current JSON content.'\n    });\n\n    // NPM registry related parameters\n    this._registryUrl = this.defineStringParameter({\n      parameterLongName: '--registry',\n      parameterShortName: '-r',\n      argumentName: 'REGISTRY',\n      description:\n        `Publishes to a specified NPM registry. If this is specified, it will prevent the current commit will not be ` +\n        'tagged.'\n    });\n    this._npmAuthToken = this.defineStringParameter({\n      parameterLongName: '--npm-auth-token',\n      parameterShortName: '-n',\n      argumentName: 'TOKEN',\n      description:\n        '(DEPRECATED) Specifies the authentication token to use during publishing. This parameter is deprecated' +\n        ' because command line parameters may be readable by unrelated processes on a lab machine. Instead, a' +\n        ' safer practice is to pass the token via an environment variable and reference it from your ' +\n        ' common/config/rush/.npmrc-publish file.'\n    });\n    this._npmTag = this.defineStringParameter({\n      parameterLongName: '--tag',\n      parameterShortName: '-t',\n      argumentName: 'TAG',\n      description:\n        `The tag option to pass to npm publish. By default NPM will publish using the 'latest' tag, even if ` +\n        `the package is older than the current latest, so in publishing workflows for older releases, providing ` +\n        `a tag is important. When hotfix changes are made, this parameter defaults to 'hotfix'.`\n    });\n    this._npmAccessLevel = this.defineChoiceParameter({\n      alternatives: ['public', 'restricted'],\n      parameterLongName: '--set-access-level',\n      parameterShortName: undefined,\n      description:\n        `By default, when Rush invokes \"npm publish\" it will publish scoped packages with an access level ` +\n        `of \"restricted\". Scoped packages can be published with an access level of \"public\" by specifying ` +\n        `that value for this flag with the initial publication. NPM always publishes unscoped packages with ` +\n        `an access level of \"public\". For more information, see the NPM documentation for the \"--access\" ` +\n        `option of \"npm publish\".`\n    });\n\n    // NPM pack tarball related parameters\n    this._pack = this.defineFlagParameter({\n      parameterLongName: '--pack',\n      description:\n        `Packs projects into tarballs instead of publishing to npm repository. It can only be used when ` +\n        `--include-all is specified. If this flag is specified, NPM registry related parameters will be ignored.`\n    });\n    this._releaseFolder = this.defineStringParameter({\n      parameterLongName: '--release-folder',\n      argumentName: 'FOLDER',\n      description:\n        `This parameter is used with --pack parameter to provide customized location for the tarballs instead of ` +\n        `the default value. `\n    });\n    // End of NPM pack tarball related parameters\n\n    this._includeAll = this.defineFlagParameter({\n      parameterLongName: '--include-all',\n      parameterShortName: undefined,\n      description:\n        'If this flag is specified, all packages with shouldPublish=true in rush.json ' +\n        'or with a specified version policy ' +\n        'will be published if their version is newer than published version.'\n    });\n    this._versionPolicy = this.defineStringParameter({\n      parameterLongName: '--version-policy',\n      argumentName: 'POLICY',\n      description:\n        'Version policy name. Only projects with this version policy will be published if used ' +\n        'with --include-all.'\n    });\n    this._prereleaseName = this.defineStringParameter({\n      parameterLongName: '--prerelease-name',\n      argumentName: 'NAME',\n      description:\n        'Bump up to a prerelease version with the provided prerelease name. Cannot be used with --suffix'\n    });\n    this._partialPrerelease = this.defineFlagParameter({\n      parameterLongName: '--partial-prerelease',\n      parameterShortName: undefined,\n      description:\n        'Used with --prerelease-name. Only bump packages to a prerelease version if they have changes.'\n    });\n    this._suffix = this.defineStringParameter({\n      parameterLongName: '--suffix',\n      argumentName: 'SUFFIX',\n      description: 'Append a suffix to all changed versions. Cannot be used with --prerelease-name.'\n    });\n    this._force = this.defineFlagParameter({\n      parameterLongName: '--force',\n      parameterShortName: undefined,\n      description: 'If this flag is specified with --publish, packages will be published with --force on npm'\n    });\n    this._applyGitTagsOnPack = this.defineFlagParameter({\n      parameterLongName: '--apply-git-tags-on-pack',\n      description:\n        `If specified with --publish and --pack, git tags will be applied for packages` +\n        ` as if a publish was being run without --pack.`\n    });\n    this._commitId = this.defineStringParameter({\n      parameterLongName: '--commit',\n      parameterShortName: '-c',\n      argumentName: 'COMMIT_ID',\n      description:\n        `Used in conjunction with git tagging -- apply git tags at the commit hash` +\n        ` specified. If not provided, the current HEAD will be tagged.`\n    });\n    this._ignoreGitHooksParameter = this.defineFlagParameter({\n      parameterLongName: '--ignore-git-hooks',\n      description: `Skips execution of all git hooks. Make sure you know what you are skipping.`\n    });\n  }\n\n  /**\n   * Executes the publish action, which will read change request files, apply changes to package.jsons,\n   */\n  protected async runAsync(): Promise<void> {\n    PolicyValidator.validatePolicy(this.rushConfiguration, { bypassPolicy: false });\n\n    // Example: \"common\\temp\\publish-home\"\n    this._targetNpmrcPublishFolder = path.join(this.rushConfiguration.commonTempFolder, 'publish-home');\n\n    // Example: \"common\\temp\\publish-home\\.npmrc\"\n    this._targetNpmrcPublishPath = path.join(this._targetNpmrcPublishFolder, '.npmrc');\n\n    const allPackages: Map<string, RushConfigurationProject> = this.rushConfiguration.projectsByName;\n\n    if (this._regenerateChangelogs.value) {\n      console.log('Regenerating changelogs');\n      ChangelogGenerator.regenerateChangelogs(allPackages, this.rushConfiguration);\n      return;\n    }\n\n    this._validate();\n\n    this._addNpmPublishHome();\n\n    const git: Git = new Git(this.rushConfiguration);\n    const publishGit: PublishGit = new PublishGit(git, this._targetBranch.value);\n    if (this._includeAll.value) {\n      this._publishAll(publishGit, allPackages);\n    } else {\n      this._prereleaseToken = new PrereleaseToken(\n        this._prereleaseName.value,\n        this._suffix.value,\n        this._partialPrerelease.value\n      );\n      this._publishChanges(git, publishGit, allPackages);\n    }\n\n    console.log(EOL + colors.green('Rush publish finished successfully.'));\n  }\n\n  /**\n   * Validate some input parameters\n   */\n  private _validate(): void {\n    if (this._pack.value && !this._includeAll.value) {\n      throw new Error('--pack can only be used with --include-all');\n    }\n    if (this._releaseFolder.value && !this._pack.value) {\n      throw new Error(`--release-folder can only be used with --pack`);\n    }\n    if (this._applyGitTagsOnPack.value && !this._pack.value) {\n      throw new Error(`${this._applyGitTagsOnPack.longName} must be used with ${this._pack.longName}`);\n    }\n  }\n\n  private _publishChanges(\n    git: Git,\n    publishGit: PublishGit,\n    allPackages: Map<string, RushConfigurationProject>\n  ): void {\n    const changeManager: ChangeManager = new ChangeManager(this.rushConfiguration);\n    changeManager.load(\n      this.rushConfiguration.changesFolder,\n      this._prereleaseToken,\n      this._addCommitDetails.value\n    );\n\n    if (changeManager.hasChanges()) {\n      const orderedChanges: IChangeInfo[] = changeManager.packageChanges;\n      const tempBranchName: string = `publish-${Date.now()}`;\n\n      // Make changes in temp branch.\n      publishGit.checkout(tempBranchName, true);\n\n      this._setDependenciesBeforePublish();\n\n      // Make changes to package.json and change logs.\n      changeManager.apply(this._apply.value);\n      changeManager.updateChangelog(this._apply.value);\n\n      this._setDependenciesBeforeCommit();\n\n      if (git.hasUncommittedChanges()) {\n        // Stage, commit, and push the changes to remote temp branch.\n        publishGit.addChanges(':/*');\n        publishGit.commit(\n          this.rushConfiguration.gitVersionBumpCommitMessage || DEFAULT_PACKAGE_UPDATE_MESSAGE,\n          !this._ignoreGitHooksParameter.value\n        );\n        publishGit.push(tempBranchName, !this._ignoreGitHooksParameter.value);\n\n        this._setDependenciesBeforePublish();\n\n        // Override tag parameter if there is a hotfix change.\n        for (const change of orderedChanges) {\n          if (change.changeType === ChangeType.hotfix) {\n            this._hotfixTagOverride = 'hotfix';\n            break;\n          }\n        }\n\n        // npm publish the things that need publishing.\n        for (const change of orderedChanges) {\n          if (change.changeType && change.changeType > ChangeType.dependency) {\n            const project: RushConfigurationProject | undefined = allPackages.get(change.packageName);\n            if (project) {\n              if (!this._packageExists(project)) {\n                this._npmPublish(change.packageName, project.publishFolder);\n              } else {\n                console.log(`Skip ${change.packageName}. Package exists.`);\n              }\n            } else {\n              console.log(`Skip ${change.packageName}. Failed to find its project.`);\n            }\n          }\n        }\n\n        this._setDependenciesBeforeCommit();\n\n        // Create and push appropriate Git tags.\n        this._gitAddTags(publishGit, orderedChanges);\n        publishGit.push(tempBranchName, !this._ignoreGitHooksParameter.value);\n\n        // Now merge to target branch.\n        publishGit.checkout(this._targetBranch.value!);\n        publishGit.pull(!this._ignoreGitHooksParameter.value);\n        publishGit.merge(tempBranchName, !this._ignoreGitHooksParameter.value);\n        publishGit.push(this._targetBranch.value!, !this._ignoreGitHooksParameter.value);\n        publishGit.deleteBranch(tempBranchName, true, !this._ignoreGitHooksParameter.value);\n      } else {\n        publishGit.checkout(this._targetBranch.value!);\n        publishGit.deleteBranch(tempBranchName, false, !this._ignoreGitHooksParameter.value);\n      }\n    }\n  }\n\n  private _publishAll(git: PublishGit, allPackages: Map<string, RushConfigurationProject>): void {\n    console.log(`Rush publish starts with includeAll and version policy ${this._versionPolicy.value}`);\n\n    let updated: boolean = false;\n\n    allPackages.forEach((packageConfig, packageName) => {\n      if (\n        packageConfig.shouldPublish &&\n        (!this._versionPolicy.value || this._versionPolicy.value === packageConfig.versionPolicyName)\n      ) {\n        const applyTag: (apply: boolean) => void = (apply: boolean): void => {\n          if (!apply) {\n            return;\n          }\n\n          const packageVersion: string = packageConfig.packageJson.version;\n\n          // Do not create a new tag if one already exists, this will result in a fatal error\n          if (git.hasTag(packageConfig)) {\n            console.log(\n              `Not tagging ${packageName}@${packageVersion}. A tag already exists for this version.`\n            );\n            return;\n          }\n\n          git.addTag(\n            !!this._publish.value,\n            packageName,\n            packageVersion,\n            this._commitId.value,\n            this._prereleaseName.value\n          );\n          updated = true;\n        };\n\n        if (this._pack.value) {\n          // packs to tarball instead of publishing to NPM repository\n          this._npmPack(packageName, packageConfig);\n          applyTag(this._applyGitTagsOnPack.value);\n        } else if (this._force.value || !this._packageExists(packageConfig)) {\n          // Publish to npm repository\n          this._npmPublish(packageName, packageConfig.publishFolder);\n          applyTag(true);\n        } else {\n          console.log(`Skip ${packageName}. Not updated.`);\n        }\n      }\n    });\n\n    if (updated) {\n      git.push(this._targetBranch.value!, !this._ignoreGitHooksParameter.value);\n    }\n  }\n\n  private _gitAddTags(git: PublishGit, orderedChanges: IChangeInfo[]): void {\n    for (const change of orderedChanges) {\n      if (\n        change.changeType &&\n        change.changeType > ChangeType.dependency &&\n        this.rushConfiguration.projectsByName.get(change.packageName)!.shouldPublish\n      ) {\n        git.addTag(\n          !!this._publish.value && !this._registryUrl.value,\n          change.packageName,\n          change.newVersion!,\n          this._commitId.value,\n          this._prereleaseName.value\n        );\n      }\n    }\n  }\n\n  private _npmPublish(packageName: string, packagePath: string): void {\n    const env: { [key: string]: string | undefined } = PublishUtilities.getEnvArgs();\n    const args: string[] = ['publish'];\n\n    if (this.rushConfiguration.projectsByName.get(packageName)!.shouldPublish) {\n      this._addSharedNpmConfig(env, args);\n\n      if (this._npmTag.value) {\n        args.push(`--tag`, this._npmTag.value);\n      } else if (this._hotfixTagOverride) {\n        args.push(`--tag`, this._hotfixTagOverride);\n      }\n\n      if (this._force.value) {\n        args.push(`--force`);\n      }\n\n      if (this._npmAccessLevel.value) {\n        args.push(`--access`, this._npmAccessLevel.value);\n      }\n\n      if (this.rushConfiguration.packageManager === 'pnpm') {\n        // PNPM 4.11.0 introduced a feature that may interrupt publishing and prompt the user for input.\n        // See this issue for details: https://github.com/microsoft/rushstack/issues/1940\n        args.push('--no-git-checks');\n      }\n\n      // TODO: Yarn's \"publish\" command line is fairly different from NPM and PNPM.  The right thing to do here\n      // would be to remap our options to the Yarn equivalents.  But until we get around to that, we'll simply invoke\n      // whatever NPM binary happens to be installed in the global path.\n      const packageManagerToolFilename: string =\n        this.rushConfiguration.packageManager === 'yarn'\n          ? 'npm'\n          : this.rushConfiguration.packageManagerToolFilename;\n\n      // If the auth token was specified via the command line, avoid printing it on the console\n      const secretSubstring: string | undefined = this._npmAuthToken.value;\n\n      PublishUtilities.execCommand(\n        !!this._publish.value,\n        packageManagerToolFilename,\n        args,\n        packagePath,\n        env,\n        secretSubstring\n      );\n    }\n  }\n\n  private _packageExists(packageConfig: RushConfigurationProject): boolean {\n    const env: { [key: string]: string | undefined } = PublishUtilities.getEnvArgs();\n    const args: string[] = [];\n    this._addSharedNpmConfig(env, args);\n\n    const publishedVersions: string[] = Npm.publishedVersions(\n      packageConfig.packageName,\n      packageConfig.publishFolder,\n      env,\n      args\n    );\n\n    const packageVersion: string = packageConfig.packageJsonEditor.version;\n\n    // SemVer supports an obscure (and generally deprecated) feature where \"build metadata\" can be\n    // appended to a version.  For example if our version is \"1.2.3-beta.4+extra567\", then \"+extra567\" is the\n    // build metadata part.  The suffix has no effect on version comparisons and is mostly ignored by\n    // the NPM registry.  Importantly, the queried version number will not include it, so we need to discard\n    // it before comparing against the list of already published versions.\n    const parsedVersion: semver.SemVer | null = semver.parse(packageVersion);\n    if (!parsedVersion) {\n      throw new Error(`The package \"${packageConfig.packageName}\" has an invalid \"version\" value`);\n    }\n\n    // For example, normalize \"1.2.3-beta.4+extra567\" -->\"1.2.3-beta.4\".\n    //\n    // This is redundant in the current API, but might change in the future:\n    // https://github.com/npm/node-semver/issues/264\n    parsedVersion.build = [];\n    const normalizedVersion: string = parsedVersion.format();\n\n    return publishedVersions.indexOf(normalizedVersion) >= 0;\n  }\n\n  private _npmPack(packageName: string, project: RushConfigurationProject): void {\n    const args: string[] = ['pack'];\n    const env: { [key: string]: string | undefined } = PublishUtilities.getEnvArgs();\n\n    PublishUtilities.execCommand(\n      !!this._publish.value,\n      this.rushConfiguration.packageManagerToolFilename,\n      args,\n      project.publishFolder,\n      env\n    );\n\n    if (this._publish.value) {\n      // Copy the tarball the release folder\n      const tarballName: string = this._calculateTarballName(project);\n      const tarballPath: string = path.join(project.publishFolder, tarballName);\n      const destFolder: string = this._releaseFolder.value\n        ? this._releaseFolder.value\n        : path.join(this.rushConfiguration.commonTempFolder, 'artifacts', 'packages');\n\n      FileSystem.move({\n        sourcePath: tarballPath,\n        destinationPath: path.join(destFolder, tarballName),\n        overwrite: true\n      });\n    }\n  }\n\n  private _calculateTarballName(project: RushConfigurationProject): string {\n    // Same logic as how npm forms the tarball name\n    const packageName: string = project.packageName;\n    const name: string = packageName[0] === '@' ? packageName.substr(1).replace(/\\//g, '-') : packageName;\n\n    if (this.rushConfiguration.packageManager === 'yarn') {\n      // yarn tarballs have a \"v\" before the version number\n      return `${name}-v${project.packageJson.version}.tgz`;\n    } else {\n      return `${name}-${project.packageJson.version}.tgz`;\n    }\n  }\n\n  private _setDependenciesBeforePublish(): void {\n    for (const project of this.rushConfiguration.projects) {\n      if (!this._versionPolicy.value || this._versionPolicy.value === project.versionPolicyName) {\n        const versionPolicy: VersionPolicy | undefined = project.versionPolicy;\n\n        if (versionPolicy) {\n          versionPolicy.setDependenciesBeforePublish(project.packageName, this.rushConfiguration);\n        }\n      }\n    }\n  }\n\n  private _setDependenciesBeforeCommit(): void {\n    for (const project of this.rushConfiguration.projects) {\n      if (!this._versionPolicy.value || this._versionPolicy.value === project.versionPolicyName) {\n        const versionPolicy: VersionPolicy | undefined = project.versionPolicy;\n\n        if (versionPolicy) {\n          versionPolicy.setDependenciesBeforePublish(project.packageName, this.rushConfiguration);\n        }\n      }\n    }\n  }\n\n  private _addNpmPublishHome(): void {\n    // Create \"common\\temp\\publish-home\" folder, if it doesn't exist\n    Utilities.createFolderWithRetry(this._targetNpmrcPublishFolder);\n\n    // Copy down the committed \"common\\config\\rush\\.npmrc-publish\" file, if there is one\n    Utilities.syncNpmrc(this.rushConfiguration.commonRushConfigFolder, this._targetNpmrcPublishFolder, true);\n  }\n\n  private _addSharedNpmConfig(env: { [key: string]: string | undefined }, args: string[]): void {\n    const userHomeEnvVariable: string = process.platform === 'win32' ? 'USERPROFILE' : 'HOME';\n    let registry: string = '//registry.npmjs.org/';\n\n    // Check if .npmrc file exists in \"common\\temp\\publish-home\"\n    if (FileSystem.exists(this._targetNpmrcPublishPath)) {\n      // Redirect userHomeEnvVariable, NPM will use config in \"common\\temp\\publish-home\\.npmrc\"\n      env[userHomeEnvVariable] = this._targetNpmrcPublishFolder;\n    }\n\n    // Check if registryUrl and token are specified via command-line\n    if (this._registryUrl.value) {\n      const registryUrl: string = this._registryUrl.value;\n      env['npm_config_registry'] = registryUrl; // eslint-disable-line dot-notation\n      registry = registryUrl.substring(registryUrl.indexOf('//'));\n    }\n\n    if (this._npmAuthToken.value) {\n      args.push(`--${registry}:_authToken=${this._npmAuthToken.value}`);\n    }\n  }\n}\n"]}