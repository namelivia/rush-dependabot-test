{"version":3,"file":"PnpmShrinkwrapFile.js","sourceRoot":"","sources":["../../../src/logic/pnpm/PnpmShrinkwrapFile.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAE3D,uCAAyB;AACzB,2CAA6B;AAC7B,+CAAiC;AACjC,oDAA4B;AAC5B,uDAAiC;AACjC,oEAA4G;AAE5G,mEAAgE;AAChE,gEAA6D;AAC7D,mEAIqC;AAErC,qDAA+D;AAC/D,oDAAiD;AAEjD,mEAAuG;AAEvG,mEAAgE;AAChE,2EAAwE;AAExE,MAAM,UAAU,GAA6B,0BAAM,CAAC,IAAI,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;AAkF7E;;;;;GAKG;AACH,SAAgB,sBAAsB,CACpC,cAAsB,EACtB,aAAqB;IAErB,IAAI,CAAC,aAAa,EAAE;QAClB,OAAO,SAAS,CAAC;KAClB;IAED,IAAI,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE;QAC/B,4FAA4F;QAC5F,OAAO,SAAS,CAAC;KAClB;IAED,wFAAwF;IACxF,2BAA2B;IAC3B,IAAI,iBAAyB,CAAC;IAE9B,0GAA0G;IAC1G,2CAA2C;IAC3C,IAAI,iBAAyB,CAAC;IAE9B,6FAA6F;IAC7F,6FAA6F;IAC7F,qHAAqH;IACrH,MAAM,gBAAgB,GAA4B,wCAAwC,CAAC,IAAI,CAC7F,aAAa,CACd,CAAC;IACF,IAAI,gBAAgB,EAAE;QACpB,iBAAiB,GAAG,gBAAgB,CAAC,CAAC,CAAC,CAAC;QACxC,iBAAiB,GAAG,gBAAgB,CAAC,CAAC,CAAC,CAAC;KACzC;SAAM;QACL,iBAAiB,GAAG,cAAc,CAAC;QAEnC,sCAAsC;QACtC,oBAAoB;QACpB,iBAAiB,GAAG,aAAa,CAAC;KACnC;IAED,mBAAmB;IACnB,mBAAmB;IACnB,IAAI,iBAAyB,CAAC;IAE9B,mDAAmD;IACnD,uDAAuD;IACvD,MAAM,YAAY,GAA4B,iBAAiB,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;IACxF,IAAI,YAAY,EAAE;QAChB,iBAAiB,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;KACrC;SAAM;QACL,mBAAmB;QACnB,iBAAiB,GAAG,iBAAiB,CAAC;KACvC;IAED,wEAAwE;IACxE,IAAI,CAAC,iBAAiB,EAAE;QACtB,OAAO,SAAS,CAAC;KAClB;IAED,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,iBAAiB,CAAC,EAAE;QACpC,MAAM,QAAQ,GACZ,iFAAiF,CAAC;QACpF,iBAAiB;QACjB,YAAY;QACZ,mEAAmE;QACnE,kEAAkE;QAClE,qEAAqE;QACrE,qEAAqE;QACrE,qEAAqE;QACrE,yEAAyE;QACzE,uEAAuE;QACvE,IAAI,QAAQ,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE;YAChC,MAAM,mBAAmB,GAAwB,IAAI,yCAAmB,CAAC,cAAc,EAAE,aAAa,CAAC,CAAC;YACxG,OAAO,mBAAmB,CAAC;SAC5B;aAAM;YACL,OAAO,SAAS,CAAC;SAClB;KACF;IAED,0CAA0C;IAC1C,IAAI,iBAAiB,KAAK,cAAc,EAAE;QACxC,gCAAgC;QAChC,OAAO,IAAI,yCAAmB,CAAC,iBAAiB,EAAE,iBAAiB,CAAC,CAAC;KACtE;SAAM;QACL,qGAAqG;QACrG,OAAO,IAAI,yCAAmB,CAAC,cAAc,EAAE,OAAO,iBAAiB,IAAI,iBAAiB,EAAE,CAAC,CAAC;KACjG;AACH,CAAC;AArFD,wDAqFC;AAED,MAAa,kBAAmB,SAAQ,uCAAkB;IAYxD,YAAoB,cAAmC;QACrD,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,eAAe,GAAG,cAAc,CAAC;QAEtC,qBAAqB;QACrB,IAAI,CAAC,QAAQ,GAAG,cAAc,CAAC,QAAQ,IAAI,EAAE,CAAC;QAC9C,IAAI,CAAC,YAAY,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,cAAc,CAAC,YAAY,IAAI,EAAE,CAAC,CAAC,CAAC;QAC/E,IAAI,CAAC,SAAS,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,cAAc,CAAC,SAAS,IAAI,EAAE,CAAC,CAAC,CAAC;QACzE,IAAI,CAAC,UAAU,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,cAAc,CAAC,UAAU,IAAI,EAAE,CAAC,CAAC,CAAC;QAC3E,IAAI,CAAC,QAAQ,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,cAAc,CAAC,QAAQ,IAAI,EAAE,CAAC,CAAC,CAAC;QAEvE,qCAAqC;QACrC,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,GAAG,CAAC,CAAC;QAErD,IAAI,CAAC,YAAY,GAAG,IAAI,GAAG,EAAE,CAAC;IAChC,CAAC;IAEM,MAAM,CAAC,YAAY,CAAC,sBAA8B;QACvD,IAAI;YACF,MAAM,iBAAiB,GAAW,8BAAU,CAAC,QAAQ,CAAC,sBAAsB,CAAC,CAAC;YAC9E,OAAO,kBAAkB,CAAC,cAAc,CAAC,iBAAiB,CAAC,CAAC;SAC7D;QAAC,OAAO,KAAK,EAAE;YACd,IAAI,8BAAU,CAAC,eAAe,CAAC,KAAc,CAAC,EAAE;gBAC9C,OAAO,SAAS,CAAC,CAAC,sBAAsB;aACzC;YACD,MAAM,IAAI,KAAK,CAAC,kBAAkB,sBAAsB,KAAK,EAAE,CAAC,GAAG,KAAM,KAAe,CAAC,OAAO,EAAE,CAAC,CAAC;SACrG;IACH,CAAC;IAEM,MAAM,CAAC,cAAc,CAAC,iBAAyB;QACpD,MAAM,UAAU,GAAwB,UAAU,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC;QAC/E,OAAO,IAAI,kBAAkB,CAAC,UAAU,CAAC,CAAC;IAC5C,CAAC;IAEM,iBAAiB,CAAC,iBAAoC;QAC3D,iGAAiG;QACjG,0GAA0G;QAC1G,MAAM,EAAE,+CAA+C,EAAE,GAAG,iBAAiB,IAAI,EAAE,CAAC;QAEpF,MAAM,iBAAiB,GAAW,IAAI,CAAC,kBAAkB,CACvD,+CAA+C,CAChD,CAAC;QACF,OAAO,gBAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAC3E,CAAC;IAED,gBAAgB;IACT,QAAQ,CACb,2BAAmE,EACnE,aAAoD,EACpD,iBAAoC;QAEpC,KAAK,CAAC,QAAQ,CAAC,2BAA2B,EAAE,aAAa,CAAC,CAAC;QAC3D,IAAI,CAAC,CAAC,2BAA2B,YAAY,4CAAwB,CAAC,EAAE;YACtE,MAAM,IAAI,KAAK,CAAC,+EAA+E,CAAC,CAAC;SAClG;QAED,IAAI,CAAC,aAAa,CAAC,sBAAsB,EAAE;YACzC,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,OAAO,EAAE;gBACpC,OAAO,CAAC,GAAG,CACT,cAAM,CAAC,GAAG,CACR,OAAO,6BAAa,CAAC,iBAAiB,yDAAyD;oBAC7F,yEAAyE,CAC5E,GAAG,EAAE,CAAC,GAAG,CACX,CAAC;gBACF,MAAM,IAAI,wCAAoB,EAAE,CAAC;aAClC;YAED,uFAAuF;YACvF,kDAAkD;YAClD,IAAI,2BAA2B,CAAC,8BAA8B,EAAE;gBAC9D,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,kBAAkB,EAAE;oBAC/C,OAAO,CAAC,GAAG,CACT,cAAM,CAAC,GAAG,CACR,6FAA6F;wBAC3F,gGAAgG,CACnG,GAAG,EAAE,CAAC,GAAG,CACX,CAAC;oBACF,MAAM,IAAI,wCAAoB,EAAE,CAAC;iBAClC;gBAED,IAAI,IAAI,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,KAAK,aAAa,CAAC,SAAS,CAAC,kBAAkB,EAAE;oBAC5F,OAAO,CAAC,GAAG,CACT,cAAM,CAAC,GAAG,CACR,oGAAoG;wBAClG,oGAAoG;wBACpG,UAAU,CACb,GAAG,EAAE,CAAC,GAAG,CACX,CAAC;oBACF,MAAM,IAAI,wCAAoB,EAAE,CAAC;iBAClC;aACF;SACF;IACH,CAAC;IAED,gBAAgB;IACT,mBAAmB;QACxB,OAAO,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,eAAe,CAAC,YAAY,IAAI,EAAE,CAAC,CAAC;IAC5E,CAAC;IAED;;;;OAIG;IACI,cAAc,CAAC,WAAmB;;QACvC,MAAM,UAAU,GAA8C,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QAC7F,OAAO,MAAA,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,UAAU,0CAAE,OAAO,CAAC;IACzC,CAAC;IAEM,wBAAwB,CAAC,cAAsB;QACpD,OAAO,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;IAC/C,CAAC;IAED;;;;;;;;;OASG;IACI,4BAA4B,CAAC,cAAsB;;QACxD,IAAI,KAAK,GAAuB,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;QACtE,IAAI,KAAK,EAAE;YACT,4EAA4E;YAC5E,6EAA6E;YAC7E,EAAE;YACF,uEAAuE;YACvE,oGAAoG;YAEpG,sCAAsC;YACtC,yEAAyE;YACzE,qBAAqB;YACrB,gDAAgD;YAChD,YAAY;YACZ,mBAAmB;YACnB,sCAAsC;YACtC,mDAAmD;YAEnD,gHAAgH;YAChH,+GAA+G;YAC/G,sCAAsC;YAEtC,iFAAiF;YACjF,0DAA0D;YAC1D,8DAA8D;YAE9D,uEAAuE;YAEvE,iEAAiE;YAEjE,MAAM,UAAU,GAA8C,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YACvF,IAAI,CAAA,MAAA,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,UAAU,0CAAE,OAAO,KAAI,KAAK,CAAC,UAAU,CAAC,UAAU,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE;gBACtF,OAAO,IAAI,yCAAmB,CAAC,cAAc,EAAE,UAAU,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;aAC/E;iBAAM;gBACL,MAAM,eAAe,GAAW,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;gBACnD,IAAI,eAAe,IAAI,CAAC,EAAE;oBACxB,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,eAAe,CAAC,CAAC;iBAC1C;aACF;YAED,OAAO,IAAI,yCAAmB,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;SACvD;QACD,OAAO,SAAS,CAAC;IACnB,CAAC;IAED;;;;;;;;;;;;;;;;;OAiBG;IACI,2BAA2B,CAAC,eAAuB;QACxD,MAAM,wBAAwB,GAAuB,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;QAC5F,OAAO,wBAAwB,CAAC,CAAC,CAAC,wBAAwB,CAAC,CAAC,CAAC,SAAS,CAAC;IACzE,CAAC;IAEM,8CAA8C,CACnD,wBAAgC;QAEhC,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;IACrD,CAAC;IAEM,kBAAkB,CAAC,IAAY,EAAE,OAAe;QACrD,MAAM,SAAS,GAAW,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAC5D,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;IACtC,CAAC;IAED;;;;OAIG;IACO,SAAS;QACjB,OAAO,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;IACxC,CAAC;IAED;;;;;;OAMG;IACO,0BAA0B,CAClC,mBAAwC,EACxC,eAAuB;QAEvB,yFAAyF;QACzF,mFAAmF;QACnF,+CAA+C;QAC/C,6FAA6F;QAC7F,0BAA0B;QAC1B,yFAAyF;QACzF,aAAa;QAEb,MAAM,WAAW,GAAW,mBAAmB,CAAC,WAAW,CAAC;QAE5D,MAAM,wBAAwB,GAAuB,IAAI,CAAC,2BAA2B,CAAC,eAAe,CAAC,CAAC;QACvG,IAAI,CAAC,wBAAwB,EAAE;YAC7B,OAAO,SAAS,CAAC;SAClB;QAED,MAAM,kBAAkB,GACtB,IAAI,CAAC,sBAAsB,CAAC,wBAAwB,CAAC,CAAC;QACxD,IACE,CAAC,kBAAkB;YACnB,CAAC,kBAAkB,CAAC,YAAY;YAChC,CAAC,kBAAkB,CAAC,YAAY,CAAC,cAAc,CAAC,WAAW,CAAC,EAC5D;YACA,OAAO,SAAS,CAAC;SAClB;QAED,MAAM,aAAa,GAAW,kBAAkB,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;QAC3E,OAAO,IAAI,CAAC,uBAAuB,CAAC,WAAW,EAAE,aAAa,CAAC,CAAC;IAClE,CAAC;IAED,gBAAgB;IACT,oBAAoB,CAAC,iBAAoC;QAC9D,sFAAsF;QACtF,oDAAoD;QACpD,IAAI,CAAC,IAAI,CAAC,qBAAqB,EAAE;YAC/B,OAAO,KAAK,CAAC,oBAAoB,CAAC,iBAAiB,CAAC,CAAC;SACtD;QAED,MAAM,oBAAoB,GAAa,EAAE,CAAC;QAC1C,KAAK,MAAM,WAAW,IAAI,IAAI,CAAC,eAAe,EAAE,EAAE;YAChD,iGAAiG;YACjG,MAAM,eAAe,GAAW,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,gBAAgB,EAAE,WAAW,CAAC,CAAC;YAC9F,IAAI,CAAC,iBAAiB,CAAC,oBAAoB,CAAC,eAAe,CAAC,EAAE;gBAC5D,oBAAoB,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;aAC5C;SACF;QACD,OAAO,oBAAoB,CAAC;IAC9B,CAAC;IAED,gBAAgB;IACT,oBAAoB,CAAC,OAAiC;QAC3D,OAAO,IAAI,qDAAyB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IACtD,CAAC;IAEM,CAAC,eAAe;QACrB,+EAA+E;QAC/E,4CAA4C;QAC5C,KAAK,MAAM,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,EAAE;YACvC,IAAI,GAAG,KAAK,GAAG,EAAE;gBACf,MAAM,GAAG,CAAC;aACX;SACF;IACH,CAAC;IAEM,oBAAoB,CAAC,aAAqB,EAAE,aAAqB;QACtE,OAAO,wBAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,aAAa,CAAC,CAAC,CAAC;IAC5E,CAAC;IAEM,WAAW,CAAC,WAAmB;QACpC,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;IACzC,CAAC;IAEM,uBAAuB,CAAC,WAAmB;QAChD,wGAAwG;QACxG,qDAAqD;QACrD,IAAI,YAAY,GAAoC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QACvF,IAAI,CAAC,YAAY,EAAE;YACjB,MAAM,QAAQ,GAA4C,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;YACxF,IAAI,QAAQ,EAAE;gBACZ,YAAY,GAAG,IAAI,GAAG,EAAE,CAAC;gBACzB,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;gBAEjD,MAAM,YAAY,GAAW,gBAAM;qBAChC,UAAU,CAAC,QAAQ,CAAC;qBACpB,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;qBAChC,MAAM,CAAC,QAAQ,CAAC,CAAC;gBACpB,MAAM,aAAa,GAAW,GAAG,WAAW,IAAI,YAAY,GAAG,CAAC;gBAChE,YAAY,CAAC,GAAG,CAAC,WAAW,EAAE,aAAa,CAAC,CAAC;gBAE7C,MAAM,EAAE,YAAY,EAAE,eAAe,EAAE,oBAAoB,EAAE,GAAG,QAAQ,CAAC;gBAEzE,MAAM,cAAc,GAA+C,CACjE,IAAY,EACZ,OAAe,EACN,EAAE;oBACX,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;gBACpC,CAAC,CAAC;gBAEF,IAAI,YAAY,EAAE;oBAChB,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE,YAAY,EAAE,KAAK,EAAE,cAAc,CAAC,CAAC;iBACzE;gBAED,IAAI,eAAe,EAAE;oBACnB,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE,eAAe,EAAE,KAAK,EAAE,cAAc,CAAC,CAAC;iBAC5E;gBAED,IAAI,oBAAoB,EAAE;oBACxB,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE,oBAAoB,EAAE,IAAI,EAAE,cAAc,CAAC,CAAC;iBAChF;aACF;SACF;QAED,OAAO,YAAY,CAAC;IACtB,CAAC;IAED,gBAAgB;IACT,0BAA0B,CAAC,OAAiC,EAAE,OAAgB;QACnF,MAAM,WAAW,GAAW,IAAI,CAAC,oBAAoB,CACnD,OAAO,CAAC,iBAAiB,CAAC,gBAAgB,EAC1C,OAAO,CAAC,aAAa,CACtB,CAAC;QACF,MAAM,QAAQ,GAA4C,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;QACxF,IAAI,CAAC,QAAQ,EAAE;YACb,OAAO,IAAI,CAAC;SACb;QAED,6DAA6D;QAC7D,MAAM,WAAW,GAAiB,OAAO,CAAC,iBAAiB,CAAC,YAAY,EAAE,CAAC;QAE3E,8CAA8C;QAC9C,IAAI,CAAC,IAAI,CAAC,sBAAsB,EAAE;YAChC,IAAI,CAAC,sBAAsB,GAAG,IAAI,6CAAqB,CAAC,OAAO,CAAC,iBAAiB,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC;SACjG;QAED,+FAA+F;QAC/F,+BAA+B;QAC/B,MAAM,EAAE,cAAc,EAAE,iBAAiB,EAAE,GAAG,qCAAiB,CAAC,UAAU,CACxE,IAAI,CAAC,sBAAsB,CAAC,SAAS,CAAC,WAAW,CAAC,EAClD,OAAO,CAAC,iBAAiB,CAAC,QAAQ,CACnC,CAAC;QAEF,sEAAsE;QACtE,MAAM,kBAAkB,GAAuC,IAAI,GAAG,EAAE,CAAC;QACzE,KAAK,MAAM,iBAAiB,IAAI,CAAC,GAAG,cAAc,EAAE,GAAG,iBAAiB,CAAC,EAAE;YACzE,+FAA+F;YAC/F,IAAI,iBAAiB,CAAC,cAAc,KAAK,kCAAc,CAAC,IAAI,EAAE;gBAC5D,SAAS;aACV;YAED,MAAM,eAAe,GAAsC,kBAAkB,CAAC,GAAG,CAC/E,iBAAiB,CAAC,IAAI,CACvB,CAAC;YACF,IAAI,CAAC,eAAe,EAAE;gBACpB,kBAAkB,CAAC,GAAG,CAAC,iBAAiB,CAAC,IAAI,EAAE,iBAAiB,CAAC,CAAC;aACnE;iBAAM;gBACL,qGAAqG;gBACrG,wEAAwE;gBACxE,sGAAsG;gBACtG,QAAQ,eAAe,CAAC,cAAc,EAAE;oBACtC,KAAK,kCAAc,CAAC,QAAQ;wBAC1B,MAAM;oBACR,KAAK,kCAAc,CAAC,OAAO;wBACzB,IAAI,iBAAiB,CAAC,cAAc,KAAK,kCAAc,CAAC,QAAQ,EAAE;4BAChE,kBAAkB,CAAC,GAAG,CAAC,iBAAiB,CAAC,IAAI,EAAE,iBAAiB,CAAC,CAAC;yBACnE;wBACD,MAAM;oBACR,KAAK,kCAAc,CAAC,GAAG;wBACrB,kBAAkB,CAAC,GAAG,CAAC,iBAAiB,CAAC,IAAI,EAAE,iBAAiB,CAAC,CAAC;wBAClE,MAAM;iBACT;aACF;SACF;QAED,sGAAsG;QACtG,qDAAqD;QACrD,KAAK,MAAM,iBAAiB,IAAI,kBAAkB,CAAC,MAAM,EAAE,EAAE;YAC3D,QAAQ,iBAAiB,CAAC,cAAc,EAAE;gBACxC,KAAK,kCAAc,CAAC,QAAQ;oBAC1B,IAAI,CAAC,QAAQ,CAAC,oBAAoB,IAAI,CAAC,QAAQ,CAAC,oBAAoB,CAAC,iBAAiB,CAAC,IAAI,CAAC;wBAC1F,OAAO,IAAI,CAAC;oBACd,MAAM;gBACR,KAAK,kCAAc,CAAC,OAAO;oBACzB,IAAI,CAAC,QAAQ,CAAC,YAAY,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,iBAAiB,CAAC,IAAI,CAAC;wBAAE,OAAO,IAAI,CAAC;oBAC1F,MAAM;gBACR,KAAK,kCAAc,CAAC,GAAG;oBACrB,IAAI,CAAC,QAAQ,CAAC,eAAe,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,iBAAiB,CAAC,IAAI,CAAC;wBAAE,OAAO,IAAI,CAAC;oBAChG,MAAM;aACT;SACF;QAED,sGAAsG;QACtG,mGAAmG;QACnG,IAAI,kBAAkB,CAAC,IAAI,KAAK,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,MAAM,EAAE;YACvE,OAAO,IAAI,CAAC;SACb;QAED,6FAA6F;QAC7F,KAAK,MAAM,CAAC,mBAAmB,EAAE,wBAAwB,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE;YACjG,MAAM,eAAe,GAAsC,kBAAkB,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;YACvG,IAAI,CAAC,eAAe,IAAI,eAAe,CAAC,OAAO,KAAK,wBAAwB,EAAE;gBAC5E,OAAO,IAAI,CAAC;aACb;SACF;QAED,OAAO,KAAK,CAAC;IACf,CAAC;IAEO,uBAAuB,CAAC,SAAiB,EAAE,QAAiB;;QAClE,MAAM,WAAW,GAAqC,IAAI,CAAC,YAAY,CAAC;QAExE,IAAI,YAAY,GAAoC,WAAW,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QAC/E,IAAI,YAAY,EAAE;YAChB,OAAO,YAAY,CAAC;SACrB;QAED,YAAY,GAAG,IAAI,GAAG,EAAE,CAAC;QACzB,WAAW,CAAC,GAAG,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC;QAEzC,MAAM,eAAe,GAA8C,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QAChG,IAAI,CAAC,eAAe,EAAE;YACpB,IAAI,CAAC,QAAQ,EAAE;gBACb,+FAA+F;gBAC/F,6EAA6E;gBAC7E,YAAY,CAAC,GAAG,CAAC,SAAS,EAAE,2BAA2B,CAAC,CAAC;aAC1D;YAED,0BAA0B;YAC1B,OAAO,YAAY,CAAC;SACrB;QAED,IAAI,aAAa,GAAuB,MAAA,eAAe,CAAC,UAAU,0CAAE,SAAS,CAAC;QAC9E,IAAI,CAAC,aAAa,EAAE;YAClB,qGAAqG;YACrG,oGAAoG;YACpG,MAAM;YACN,2EAA2E;YAC3E,QAAQ;YACR,gBAAgB;YAChB,iHAAiH;YACjH,MAAM,YAAY,GAAW,gBAAM;iBAChC,UAAU,CAAC,QAAQ,CAAC;iBACpB,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC;iBACvC,MAAM,CAAC,QAAQ,CAAC,CAAC;YACpB,aAAa,GAAG,GAAG,SAAS,IAAI,YAAY,GAAG,CAAC;SACjD;QAED,YAAY,CAAC,GAAG,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;QAC3C,MAAM,EAAE,YAAY,EAAE,oBAAoB,EAAE,GAAG,eAAe,CAAC;QAE/D,IAAI,YAAY,EAAE;YAChB,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE,YAAY,EAAE,KAAK,CAAC,CAAC;SACzD;QAED,IAAI,oBAAoB,EAAE;YACxB,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE,oBAAoB,EAAE,IAAI,CAAC,CAAC;SAChE;QAED,OAAO,YAAY,CAAC;IACtB,CAAC;IAEO,eAAe,CACrB,YAAiC,EACjC,UAAkC,EAClC,QAAiB,EACjB,MAAmD;QAEnD,KAAK,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;YACxD,IAAI,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,EAAE;gBACpC,SAAS;aACV;YAED,MAAM,SAAS,GAAW,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;YAC5D,IAAI,YAAY,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE;gBAC/B,iEAAiE;gBACjE,SAAS;aACV;YAED,MAAM,YAAY,GAAwB,IAAI,CAAC,uBAAuB,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;YAC5F,KAAK,MAAM,CAAC,GAAG,EAAE,SAAS,CAAC,IAAI,YAAY,EAAE;gBAC3C,YAAY,CAAC,GAAG,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;aAClC;SACF;IACH,CAAC;IAED;;OAEG;IACK,sBAAsB,CAC5B,wBAAgC;QAEhC,MAAM,kBAAkB,GACtB,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;QAE9C,OAAO,kBAAkB,IAAI,kBAAkB,CAAC,YAAY,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC,SAAS,CAAC;IAChG,CAAC;IAEO,aAAa,CAAC,IAAY,EAAE,OAAe;QACjD,6FAA6F;QAC7F,MAAM,SAAS,GAAW,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,IAAI,IAAI,OAAO,EAAE,CAAC;QACxF,OAAO,SAAS,CAAC;IACnB,CAAC;IAEO,uBAAuB,CAC7B,cAAsB,EACtB,iBAAyB;QAEzB,IAAI,iBAAiB,EAAE;YACrB,MAAM,MAAM,GAAoC,sBAAsB,CACpE,cAAc,EACd,iBAAiB,CAClB,CAAC;YAEF,IAAI,CAAC,MAAM,EAAE;gBACX,MAAM,IAAI,KAAK,CACb,oDAAoD,iBAAiB,GAAG;oBACtE,SAAS,cAAc,GAAG,CAC7B,CAAC;aACH;YAED,OAAO,MAAM,CAAC;SACf;aAAM;YACL,OAAO,SAAS,CAAC;SAClB;IACH,CAAC;IAEO,kBAAkB,CAAC,gBAAyB,KAAK;QACvD,4GAA4G;QAC5G,mHAAmH;QACnH,MAAM,qBAAqB,GAA+B,EAAE,CAAC;QAC7D,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,EAAE;YAC/D,IAAI,aAAa,IAAI,GAAG,KAAK,WAAW,EAAE;gBACxC,SAAS;aACV;YAED,IAAI,CAAC,KAAK,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;gBACxE,qBAAqB,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;aACpC;SACF;QAED,OAAO,UAAU,CAAC,QAAQ,CAAC,qBAAqB,EAAE,4CAA2B,CAAC,CAAC;IACjF,CAAC;CACF;AA9jBD,gDA8jBC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as os from 'os';\nimport * as path from 'path';\nimport * as semver from 'semver';\nimport crypto from 'crypto';\nimport colors from 'colors/safe';\nimport { FileSystem, AlreadyReportedError, Import, Path, IPackageJson } from '@rushstack/node-core-library';\n\nimport { BaseShrinkwrapFile } from '../base/BaseShrinkwrapFile';\nimport { DependencySpecifier } from '../DependencySpecifier';\nimport {\n  PackageManagerOptionsConfigurationBase,\n  PnpmOptionsConfiguration,\n  RushConfiguration\n} from '../../api/RushConfiguration';\nimport { IShrinkwrapFilePolicyValidatorOptions } from '../policy/ShrinkwrapFilePolicy';\nimport { PNPM_SHRINKWRAP_YAML_FORMAT } from './PnpmYamlCommon';\nimport { RushConstants } from '../RushConstants';\nimport { IExperimentsJson } from '../../api/ExperimentsConfiguration';\nimport { DependencyType, PackageJsonDependency, PackageJsonEditor } from '../../api/PackageJsonEditor';\nimport { RushConfigurationProject } from '../../api/RushConfigurationProject';\nimport { PnpmfileConfiguration } from './PnpmfileConfiguration';\nimport { PnpmProjectShrinkwrapFile } from './PnpmProjectShrinkwrapFile';\n\nconst yamlModule: typeof import('js-yaml') = Import.lazy('js-yaml', require);\n\nexport interface IPeerDependenciesMetaYaml {\n  optional?: boolean;\n}\n\nexport interface IPnpmShrinkwrapDependencyYaml {\n  /** Information about the resolved package */\n  resolution?: {\n    /** The hash of the tarball, to ensure archive integrity */\n    integrity: string;\n    /** The name of the tarball, if this was from a TGX file */\n    tarball?: string;\n  };\n  /** The list of dependencies and the resolved version */\n  dependencies?: { [dependency: string]: string };\n  /** The list of optional dependencies and the resolved version */\n  optionalDependencies?: { [dependency: string]: string };\n  /** The list of peer dependencies and the resolved version */\n  peerDependencies?: { [dependency: string]: string };\n  /**\n   * Used to indicate optional peer dependencies, as described in this RFC:\n   * https://github.com/yarnpkg/rfcs/blob/master/accepted/0000-optional-peer-dependencies.md\n   */\n  peerDependenciesMeta?: { [dependency: string]: IPeerDependenciesMetaYaml };\n}\n\nexport interface IPnpmShrinkwrapImporterYaml {\n  /** The list of resolved version numbers for direct dependencies */\n  dependencies?: { [dependency: string]: string };\n  /** The list of resolved version numbers for dev dependencies */\n  devDependencies?: { [dependency: string]: string };\n  /** The list of resolved version numbers for optional dependencies */\n  optionalDependencies?: { [dependency: string]: string };\n  /** The list of specifiers used to resolve dependency versions */\n  specifiers: { [dependency: string]: string };\n}\n\n/**\n * This interface represents the raw pnpm-lock.YAML file\n * Example:\n *  {\n *    \"dependencies\": {\n *      \"@rush-temp/project1\": \"file:./projects/project1.tgz\"\n *    },\n *    \"packages\": {\n *      \"file:projects/library1.tgz\": {\n *        \"dependencies: {\n *          \"markdown\": \"0.5.0\"\n *        },\n *        \"name\": \"@rush-temp/library1\",\n *        \"resolution\": {\n *          \"tarball\": \"file:projects/library1.tgz\"\n *        },\n *        \"version\": \"0.0.0\"\n *      },\n *      \"markdown/0.5.0\": {\n *        \"resolution\": {\n *          \"integrity\": \"sha1-KCBbVlqK51kt4gdGPWY33BgnIrI=\"\n *        }\n *      }\n *    },\n *    \"registry\": \"http://localhost:4873/\",\n *    \"shrinkwrapVersion\": 3,\n *    \"specifiers\": {\n *      \"@rush-temp/project1\": \"file:./projects/project1.tgz\"\n *    }\n *  }\n */\nexport interface IPnpmShrinkwrapYaml {\n  /** The list of resolved version numbers for direct dependencies */\n  dependencies: { [dependency: string]: string };\n  /** The list of importers for local workspace projects */\n  importers: { [relativePath: string]: IPnpmShrinkwrapImporterYaml };\n  /** The description of the solved graph */\n  packages: { [dependencyVersion: string]: IPnpmShrinkwrapDependencyYaml };\n  /** URL of the registry which was used */\n  registry: string;\n  /** The list of specifiers used to resolve direct dependency versions */\n  specifiers: { [dependency: string]: string };\n}\n\n/**\n * Given an encoded \"dependency key\" from the PNPM shrinkwrap file, this parses it into an equivalent\n * DependencySpecifier.\n *\n * @returns a SemVer string, or undefined if the version specifier cannot be parsed\n */\nexport function parsePnpmDependencyKey(\n  dependencyName: string,\n  dependencyKey: string\n): DependencySpecifier | undefined {\n  if (!dependencyKey) {\n    return undefined;\n  }\n\n  if (/^\\w+:/.test(dependencyKey)) {\n    // If it starts with an NPM scheme such as \"file:projects/my-app.tgz\", we don't support that\n    return undefined;\n  }\n\n  // The package name parsed from the dependency key, or dependencyName if it was omitted.\n  // Example: \"@scope/depame\"\n  let parsedPackageName: string;\n\n  // The trailing portion of the dependency key that includes the version and optional peer dependency path.\n  // Example: \"2.8.0/chai@3.5.0+sinon@1.17.7\"\n  let parsedInstallPath: string;\n\n  // Example: \"path.pkgs.visualstudio.com/@scope/depame/1.4.0\"  --> 0=\"@scope/depame\" 1=\"1.4.0\"\n  // Example: \"/isarray/2.0.1\"                                  --> 0=\"isarray\"       1=\"2.0.1\"\n  // Example: \"/sinon-chai/2.8.0/chai@3.5.0+sinon@1.17.7\"       --> 0=\"sinon-chai\"    1=\"2.8.0/chai@3.5.0+sinon@1.17.7\"\n  const packageNameMatch: RegExpMatchArray | null = /^[^\\/]*\\/((?:@[^\\/]+\\/)?[^\\/]+)\\/(.*)$/.exec(\n    dependencyKey\n  );\n  if (packageNameMatch) {\n    parsedPackageName = packageNameMatch[1];\n    parsedInstallPath = packageNameMatch[2];\n  } else {\n    parsedPackageName = dependencyName;\n\n    // Example: \"23.6.0_babel-core@6.26.3\"\n    // Example: \"23.6.0\"\n    parsedInstallPath = dependencyKey;\n  }\n\n  // The SemVer value\n  // Example: \"2.8.0\"\n  let parsedVersionPart: string;\n\n  // Example: \"23.6.0_babel-core@6.26.3\" --> \"23.6.0\"\n  // Example: \"2.8.0/chai@3.5.0+sinon@1.17.7\" --> \"2.8.0\"\n  const versionMatch: RegExpMatchArray | null = /^([^\\/_]+)[\\/_]/.exec(parsedInstallPath);\n  if (versionMatch) {\n    parsedVersionPart = versionMatch[1];\n  } else {\n    // Example: \"2.8.0\"\n    parsedVersionPart = parsedInstallPath;\n  }\n\n  // By this point, we expect parsedVersionPart to be a valid SemVer range\n  if (!parsedVersionPart) {\n    return undefined;\n  }\n\n  if (!semver.valid(parsedVersionPart)) {\n    const urlRegex: RegExp =\n      /^(git@|@)?([a-z0-9]+(-[a-z0-9]+)*\\.)+[a-z]{2,}(\\/|\\+)([^\\/\\\\]+\\/?)*([^\\/\\\\]+)$/i;\n    // Test for urls:\n    // Examples:\n    //     @github.com/abc/def/188ed64efd5218beda276e02f2277bf3a6b745b2\n    //     github.com/abc/def/188ed64efd5218beda276e02f2277bf3a6b745b2\n    //     github.com.au/abc/def/188ed64efd5218beda276e02f2277bf3a6b745b2\n    //     bitbucket.com/abc/def/188ed64efd5218beda276e02f2277bf3a6b745b2\n    //     bitbucket.com+abc/def/188ed64efd5218beda276e02f2277bf3a6b745b2\n    //     git@bitbucket.com+abc/def/188ed64efd5218beda276e02f2277bf3a6b745b2\n    //     bitbucket.co.in/abc/def/188ed64efd5218beda276e02f2277bf3a6b745b2\n    if (urlRegex.test(dependencyKey)) {\n      const dependencySpecifier: DependencySpecifier = new DependencySpecifier(dependencyName, dependencyKey);\n      return dependencySpecifier;\n    } else {\n      return undefined;\n    }\n  }\n\n  // Is it an alias for a different package?\n  if (parsedPackageName === dependencyName) {\n    // No, it's a regular dependency\n    return new DependencySpecifier(parsedPackageName, parsedVersionPart);\n  } else {\n    // If the parsed package name is different from the dependencyName, then this is an NPM package alias\n    return new DependencySpecifier(dependencyName, `npm:${parsedPackageName}@${parsedVersionPart}`);\n  }\n}\n\nexport class PnpmShrinkwrapFile extends BaseShrinkwrapFile {\n  public readonly isWorkspaceCompatible: boolean;\n  public readonly registry: string;\n  public readonly dependencies: ReadonlyMap<string, string>;\n  public readonly importers: ReadonlyMap<string, IPnpmShrinkwrapImporterYaml>;\n  public readonly specifiers: ReadonlyMap<string, string>;\n  public readonly packages: ReadonlyMap<string, IPnpmShrinkwrapDependencyYaml>;\n\n  private readonly _shrinkwrapJson: IPnpmShrinkwrapYaml;\n  private readonly _integrities: Map<string, Map<string, string>>;\n  private _pnpmfileConfiguration: PnpmfileConfiguration | undefined;\n\n  private constructor(shrinkwrapJson: IPnpmShrinkwrapYaml) {\n    super();\n    this._shrinkwrapJson = shrinkwrapJson;\n\n    // Normalize the data\n    this.registry = shrinkwrapJson.registry || '';\n    this.dependencies = new Map(Object.entries(shrinkwrapJson.dependencies || {}));\n    this.importers = new Map(Object.entries(shrinkwrapJson.importers || {}));\n    this.specifiers = new Map(Object.entries(shrinkwrapJson.specifiers || {}));\n    this.packages = new Map(Object.entries(shrinkwrapJson.packages || {}));\n\n    // Importers only exist in workspaces\n    this.isWorkspaceCompatible = this.importers.size > 0;\n\n    this._integrities = new Map();\n  }\n\n  public static loadFromFile(shrinkwrapYamlFilename: string): PnpmShrinkwrapFile | undefined {\n    try {\n      const shrinkwrapContent: string = FileSystem.readFile(shrinkwrapYamlFilename);\n      return PnpmShrinkwrapFile.loadFromString(shrinkwrapContent);\n    } catch (error) {\n      if (FileSystem.isNotExistError(error as Error)) {\n        return undefined; // file does not exist\n      }\n      throw new Error(`Error reading \"${shrinkwrapYamlFilename}\":${os.EOL}  ${(error as Error).message}`);\n    }\n  }\n\n  public static loadFromString(shrinkwrapContent: string): PnpmShrinkwrapFile {\n    const parsedData: IPnpmShrinkwrapYaml = yamlModule.safeLoad(shrinkwrapContent);\n    return new PnpmShrinkwrapFile(parsedData);\n  }\n\n  public getShrinkwrapHash(experimentsConfig?: IExperimentsJson): string {\n    // The 'omitImportersFromPreventManualShrinkwrapChanges' experiment skips the 'importers' section\n    // when computing the hash, since the main concern is changes to the overall external dependency footprint\n    const { omitImportersFromPreventManualShrinkwrapChanges } = experimentsConfig || {};\n\n    const shrinkwrapContent: string = this._serializeInternal(\n      omitImportersFromPreventManualShrinkwrapChanges\n    );\n    return crypto.createHash('sha1').update(shrinkwrapContent).digest('hex');\n  }\n\n  /** @override */\n  public validate(\n    packageManagerOptionsConfig: PackageManagerOptionsConfigurationBase,\n    policyOptions: IShrinkwrapFilePolicyValidatorOptions,\n    experimentsConfig?: IExperimentsJson\n  ): void {\n    super.validate(packageManagerOptionsConfig, policyOptions);\n    if (!(packageManagerOptionsConfig instanceof PnpmOptionsConfiguration)) {\n      throw new Error('The provided package manager options are not valid for PNPM shrinkwrap files.');\n    }\n\n    if (!policyOptions.allowShrinkwrapUpdates) {\n      if (!policyOptions.repoState.isValid) {\n        console.log(\n          colors.red(\n            `The ${RushConstants.repoStateFilename} file is invalid. There may be a merge conflict marker ` +\n              'in the file. You may need to run \"rush update\" to refresh its contents.'\n          ) + os.EOL\n        );\n        throw new AlreadyReportedError();\n      }\n\n      // Only check the hash if allowShrinkwrapUpdates is false. If true, the shrinkwrap file\n      // may have changed and the hash could be invalid.\n      if (packageManagerOptionsConfig.preventManualShrinkwrapChanges) {\n        if (!policyOptions.repoState.pnpmShrinkwrapHash) {\n          console.log(\n            colors.red(\n              'The existing shrinkwrap file hash could not be found. You may need to run \"rush update\" to ' +\n                'populate the hash. See the \"preventManualShrinkwrapChanges\" setting documentation for details.'\n            ) + os.EOL\n          );\n          throw new AlreadyReportedError();\n        }\n\n        if (this.getShrinkwrapHash(experimentsConfig) !== policyOptions.repoState.pnpmShrinkwrapHash) {\n          console.log(\n            colors.red(\n              'The shrinkwrap file hash does not match the expected hash. Please run \"rush update\" to ensure the ' +\n                'shrinkwrap file is up to date. See the \"preventManualShrinkwrapChanges\" setting documentation for ' +\n                'details.'\n            ) + os.EOL\n          );\n          throw new AlreadyReportedError();\n        }\n      }\n    }\n  }\n\n  /** @override */\n  public getTempProjectNames(): ReadonlyArray<string> {\n    return this._getTempProjectNames(this._shrinkwrapJson.dependencies || {});\n  }\n\n  /**\n   * Gets the path to the tarball file if the package is a tarball.\n   * Returns undefined if the package entry doesn't exist or the package isn't a tarball.\n   * Example of return value: file:projects/build-tools.tgz\n   */\n  public getTarballPath(packageName: string): string | undefined {\n    const dependency: IPnpmShrinkwrapDependencyYaml | undefined = this.packages.get(packageName);\n    return dependency?.resolution?.tarball;\n  }\n\n  public getTopLevelDependencyKey(dependencyName: string): string | undefined {\n    return this.dependencies.get(dependencyName);\n  }\n\n  /**\n   * Gets the version number from the list of top-level dependencies in the \"dependencies\" section\n   * of the shrinkwrap file. Sample return values:\n   *   '2.1.113'\n   *   '1.9.0-dev.27'\n   *   'file:projects/empty-webpart-project.tgz'\n   *   undefined\n   *\n   * @override\n   */\n  public getTopLevelDependencyVersion(dependencyName: string): DependencySpecifier | undefined {\n    let value: string | undefined = this.dependencies.get(dependencyName);\n    if (value) {\n      // Getting the top level dependency version from a PNPM lockfile version 5.1\n      // --------------------------------------------------------------------------\n      //\n      // 1) Top-level tarball dependency entries in pnpm-lock.yaml look like:\n      //    '@rush-temp/sp-filepicker': 'file:projects/sp-filepicker.tgz_0ec79d3b08edd81ebf49cd19ca50b3f5'\n\n      //    Then, it would be defined below:\n      //    'file:projects/sp-filepicker.tgz_0ec79d3b08edd81ebf49cd19ca50b3f5':\n      //      dependencies:\n      //       '@microsoft/load-themed-styles': 1.10.7\n      //       ...\n      //      resolution:\n      //       integrity: sha512-guuoFIc**==\n      //       tarball: 'file:projects/sp-filepicker.tgz'\n\n      //    Here, we are interested in the part 'file:projects/sp-filepicker.tgz'. Splitting by underscores is not the\n      //    best way to get this because file names could have underscores in them. Instead, we could use the tarball\n      //    field in the resolution section.\n\n      // 2) Top-level non-tarball dependency entries in pnpm-lock.yaml would look like:\n      //    '@rushstack/set-webpack-public-path-plugin': 2.1.133\n      //    @microsoft/sp-build-node': 1.9.0-dev.27_typescript@2.9.2\n\n      //    Here, we could just split by underscores and take the first part.\n\n      // The below code is also compatible with lockfile versions < 5.1\n\n      const dependency: IPnpmShrinkwrapDependencyYaml | undefined = this.packages.get(value);\n      if (dependency?.resolution?.tarball && value.startsWith(dependency.resolution.tarball)) {\n        return new DependencySpecifier(dependencyName, dependency.resolution.tarball);\n      } else {\n        const underscoreIndex: number = value.indexOf('_');\n        if (underscoreIndex >= 0) {\n          value = value.substr(0, underscoreIndex);\n        }\n      }\n\n      return new DependencySpecifier(dependencyName, value);\n    }\n    return undefined;\n  }\n\n  /**\n   * The PNPM shrinkwrap file has top-level dependencies on the temp projects like this:\n   *\n   * ```\n   * dependencies:\n   *   '@rush-temp/my-app': 'file:projects/my-app.tgz_25c559a5921686293a001a397be4dce0'\n   * packages:\n   *   /@types/node/10.14.15:\n   *     dev: false\n   *   'file:projects/my-app.tgz_25c559a5921686293a001a397be4dce0':\n   *     dev: false\n   *     name: '@rush-temp/my-app'\n   *     version: 0.0.0\n   * ```\n   *\n   * We refer to 'file:projects/my-app.tgz_25c559a5921686293a001a397be4dce0' as the temp project dependency key\n   * of the temp project '@rush-temp/my-app'.\n   */\n  public getTempProjectDependencyKey(tempProjectName: string): string | undefined {\n    const tempProjectDependencyKey: string | undefined = this.dependencies.get(tempProjectName);\n    return tempProjectDependencyKey ? tempProjectDependencyKey : undefined;\n  }\n\n  public getShrinkwrapEntryFromTempProjectDependencyKey(\n    tempProjectDependencyKey: string\n  ): IPnpmShrinkwrapDependencyYaml | undefined {\n    return this.packages.get(tempProjectDependencyKey);\n  }\n\n  public getShrinkwrapEntry(name: string, version: string): IPnpmShrinkwrapDependencyYaml | undefined {\n    const packageId: string = this._getPackageId(name, version);\n    return this.packages.get(packageId);\n  }\n\n  /**\n   * Serializes the PNPM Shrinkwrap file\n   *\n   * @override\n   */\n  protected serialize(): string {\n    return this._serializeInternal(false);\n  }\n\n  /**\n   * Gets the resolved version number of a dependency for a specific temp project.\n   * For PNPM, we can reuse the version that another project is using.\n   * Note that this function modifies the shrinkwrap data if tryReusingPackageVersionsFromShrinkwrap is set to true.\n   *\n   * @override\n   */\n  protected tryEnsureDependencyVersion(\n    dependencySpecifier: DependencySpecifier,\n    tempProjectName: string\n  ): DependencySpecifier | undefined {\n    // PNPM doesn't have the same advantage of NPM, where we can skip generate as long as the\n    // shrinkwrap file puts our dependency in either the top of the node_modules folder\n    // or underneath the package we are looking at.\n    // This is because the PNPM shrinkwrap file describes the exact links that need to be created\n    // to recreate the graph..\n    // Because of this, we actually need to check for a version that this package is directly\n    // linked to.\n\n    const packageName: string = dependencySpecifier.packageName;\n\n    const tempProjectDependencyKey: string | undefined = this.getTempProjectDependencyKey(tempProjectName);\n    if (!tempProjectDependencyKey) {\n      return undefined;\n    }\n\n    const packageDescription: IPnpmShrinkwrapDependencyYaml | undefined =\n      this._getPackageDescription(tempProjectDependencyKey);\n    if (\n      !packageDescription ||\n      !packageDescription.dependencies ||\n      !packageDescription.dependencies.hasOwnProperty(packageName)\n    ) {\n      return undefined;\n    }\n\n    const dependencyKey: string = packageDescription.dependencies[packageName];\n    return this._parsePnpmDependencyKey(packageName, dependencyKey);\n  }\n\n  /** @override */\n  public findOrphanedProjects(rushConfiguration: RushConfiguration): ReadonlyArray<string> {\n    // The base shrinkwrap handles orphaned projects the same across all package managers,\n    // but this is only valid for non-workspace installs\n    if (!this.isWorkspaceCompatible) {\n      return super.findOrphanedProjects(rushConfiguration);\n    }\n\n    const orphanedProjectPaths: string[] = [];\n    for (const importerKey of this.getImporterKeys()) {\n      // PNPM importer keys are relative paths from the workspace root, which is the common temp folder\n      const rushProjectPath: string = path.resolve(rushConfiguration.commonTempFolder, importerKey);\n      if (!rushConfiguration.tryGetProjectForPath(rushProjectPath)) {\n        orphanedProjectPaths.push(rushProjectPath);\n      }\n    }\n    return orphanedProjectPaths;\n  }\n\n  /** @override */\n  public getProjectShrinkwrap(project: RushConfigurationProject): PnpmProjectShrinkwrapFile {\n    return new PnpmProjectShrinkwrapFile(this, project);\n  }\n\n  public *getImporterKeys(): Iterable<string> {\n    // Filter out the root importer used for the generated package.json in the root\n    // of the install, since we do not use this.\n    for (const key of this.importers.keys()) {\n      if (key !== '.') {\n        yield key;\n      }\n    }\n  }\n\n  public getImporterKeyByPath(workspaceRoot: string, projectFolder: string): string {\n    return Path.convertToSlashes(path.relative(workspaceRoot, projectFolder));\n  }\n\n  public getImporter(importerKey: string): IPnpmShrinkwrapImporterYaml | undefined {\n    return this.importers.get(importerKey);\n  }\n\n  public getIntegrityForImporter(importerKey: string): Map<string, string> | undefined {\n    // This logic formerly lived in PnpmProjectShrinkwrapFile. Moving it here allows caching of the external\n    // dependency integrity relationships across projects\n    let integrityMap: Map<string, string> | undefined = this._integrities.get(importerKey);\n    if (!integrityMap) {\n      const importer: IPnpmShrinkwrapImporterYaml | undefined = this.getImporter(importerKey);\n      if (importer) {\n        integrityMap = new Map();\n        this._integrities.set(importerKey, integrityMap);\n\n        const sha256Digest: string = crypto\n          .createHash('sha256')\n          .update(JSON.stringify(importer))\n          .digest('base64');\n        const selfIntegrity: string = `${importerKey}:${sha256Digest}:`;\n        integrityMap.set(importerKey, selfIntegrity);\n\n        const { dependencies, devDependencies, optionalDependencies } = importer;\n\n        const externalFilter: (name: string, version: string) => boolean = (\n          name: string,\n          version: string\n        ): boolean => {\n          return !version.includes('link:');\n        };\n\n        if (dependencies) {\n          this._addIntegrities(integrityMap, dependencies, false, externalFilter);\n        }\n\n        if (devDependencies) {\n          this._addIntegrities(integrityMap, devDependencies, false, externalFilter);\n        }\n\n        if (optionalDependencies) {\n          this._addIntegrities(integrityMap, optionalDependencies, true, externalFilter);\n        }\n      }\n    }\n\n    return integrityMap;\n  }\n\n  /** @override */\n  public isWorkspaceProjectModified(project: RushConfigurationProject, variant?: string): boolean {\n    const importerKey: string = this.getImporterKeyByPath(\n      project.rushConfiguration.commonTempFolder,\n      project.projectFolder\n    );\n    const importer: IPnpmShrinkwrapImporterYaml | undefined = this.getImporter(importerKey);\n    if (!importer) {\n      return true;\n    }\n\n    // First, let's transform the package.json using the pnpmfile\n    const packageJson: IPackageJson = project.packageJsonEditor.saveToObject();\n\n    // Initialize the pnpmfile if it doesn't exist\n    if (!this._pnpmfileConfiguration) {\n      this._pnpmfileConfiguration = new PnpmfileConfiguration(project.rushConfiguration, { variant });\n    }\n\n    // Use a new PackageJsonEditor since it will classify each dependency type, making tracking the\n    // found versions much simpler.\n    const { dependencyList, devDependencyList } = PackageJsonEditor.fromObject(\n      this._pnpmfileConfiguration.transform(packageJson),\n      project.packageJsonEditor.filePath\n    );\n\n    // Then get the unique package names and map them to package versions.\n    const dependencyVersions: Map<string, PackageJsonDependency> = new Map();\n    for (const packageDependency of [...dependencyList, ...devDependencyList]) {\n      // We will also filter out peer dependencies since these are not installed at development time.\n      if (packageDependency.dependencyType === DependencyType.Peer) {\n        continue;\n      }\n\n      const foundDependency: PackageJsonDependency | undefined = dependencyVersions.get(\n        packageDependency.name\n      );\n      if (!foundDependency) {\n        dependencyVersions.set(packageDependency.name, packageDependency);\n      } else {\n        // Shrinkwrap will prioritize optional dependencies, followed by regular dependencies, with dev being\n        // the least prioritized. We will only keep the most prioritized option.\n        // See: https://github.com/pnpm/pnpm/blob/main/packages/lockfile-utils/src/satisfiesPackageManifest.ts\n        switch (foundDependency.dependencyType) {\n          case DependencyType.Optional:\n            break;\n          case DependencyType.Regular:\n            if (packageDependency.dependencyType === DependencyType.Optional) {\n              dependencyVersions.set(packageDependency.name, packageDependency);\n            }\n            break;\n          case DependencyType.Dev:\n            dependencyVersions.set(packageDependency.name, packageDependency);\n            break;\n        }\n      }\n    }\n\n    // Then validate that the dependency fields are as expected in the shrinkwrap to avoid false-negatives\n    // when moving a package from one field to the other.\n    for (const dependencyVersion of dependencyVersions.values()) {\n      switch (dependencyVersion.dependencyType) {\n        case DependencyType.Optional:\n          if (!importer.optionalDependencies || !importer.optionalDependencies[dependencyVersion.name])\n            return true;\n          break;\n        case DependencyType.Regular:\n          if (!importer.dependencies || !importer.dependencies[dependencyVersion.name]) return true;\n          break;\n        case DependencyType.Dev:\n          if (!importer.devDependencies || !importer.devDependencies[dependencyVersion.name]) return true;\n          break;\n      }\n    }\n\n    // Then validate the length matches between the importer and the dependency list, since duplicates are\n    // a valid use-case. Importers will only take one of these values, so no need to do more work here.\n    if (dependencyVersions.size !== Object.keys(importer.specifiers).length) {\n      return true;\n    }\n\n    // Finally, validate that all values in the importer are also present in the dependency list.\n    for (const [importerPackageName, importerVersionSpecifier] of Object.entries(importer.specifiers)) {\n      const foundDependency: PackageJsonDependency | undefined = dependencyVersions.get(importerPackageName);\n      if (!foundDependency || foundDependency.version !== importerVersionSpecifier) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private _getIntegrityForPackage(specifier: string, optional: boolean): Map<string, string> {\n    const integrities: Map<string, Map<string, string>> = this._integrities;\n\n    let integrityMap: Map<string, string> | undefined = integrities.get(specifier);\n    if (integrityMap) {\n      return integrityMap;\n    }\n\n    integrityMap = new Map();\n    integrities.set(specifier, integrityMap);\n\n    const shrinkwrapEntry: IPnpmShrinkwrapDependencyYaml | undefined = this.packages.get(specifier);\n    if (!shrinkwrapEntry) {\n      if (!optional) {\n        // This algorithm heeds to be robust against missing shrinkwrap entries, so we can't just throw\n        // Instead set it to a value which will not match any valid shrinkwrap record\n        integrityMap.set(specifier, 'Missing shrinkwrap entry!');\n      }\n\n      // Indicate an empty entry\n      return integrityMap;\n    }\n\n    let selfIntegrity: string | undefined = shrinkwrapEntry.resolution?.integrity;\n    if (!selfIntegrity) {\n      // git dependency specifiers do not have an integrity entry. Instead, they specify the tarball field.\n      // So instead, we will hash the contents of the dependency entry and use that as the integrity hash.\n      // Ex:\n      // github.com/chfritz/node-xmlrpc/948db2fbd0260e5d56ed5ba58df0f5b6599bbe38:\n      //   ...\n      //   resolution:\n      //     tarball: 'https://codeload.github.com/chfritz/node-xmlrpc/tar.gz/948db2fbd0260e5d56ed5ba58df0f5b6599bbe38'\n      const sha256Digest: string = crypto\n        .createHash('sha256')\n        .update(JSON.stringify(shrinkwrapEntry))\n        .digest('base64');\n      selfIntegrity = `${specifier}:${sha256Digest}:`;\n    }\n\n    integrityMap.set(specifier, selfIntegrity);\n    const { dependencies, optionalDependencies } = shrinkwrapEntry;\n\n    if (dependencies) {\n      this._addIntegrities(integrityMap, dependencies, false);\n    }\n\n    if (optionalDependencies) {\n      this._addIntegrities(integrityMap, optionalDependencies, true);\n    }\n\n    return integrityMap;\n  }\n\n  private _addIntegrities(\n    integrityMap: Map<string, string>,\n    collection: Record<string, string>,\n    optional: boolean,\n    filter?: (name: string, version: string) => boolean\n  ): void {\n    for (const [name, version] of Object.entries(collection)) {\n      if (filter && !filter(name, version)) {\n        continue;\n      }\n\n      const packageId: string = this._getPackageId(name, version);\n      if (integrityMap.has(packageId)) {\n        // The entry could already have been added as a nested dependency\n        continue;\n      }\n\n      const contribution: Map<string, string> = this._getIntegrityForPackage(packageId, optional);\n      for (const [dep, integrity] of contribution) {\n        integrityMap.set(dep, integrity);\n      }\n    }\n  }\n\n  /**\n   * Gets the package description for a tempProject from the shrinkwrap file.\n   */\n  private _getPackageDescription(\n    tempProjectDependencyKey: string\n  ): IPnpmShrinkwrapDependencyYaml | undefined {\n    const packageDescription: IPnpmShrinkwrapDependencyYaml | undefined =\n      this.packages.get(tempProjectDependencyKey);\n\n    return packageDescription && packageDescription.dependencies ? packageDescription : undefined;\n  }\n\n  private _getPackageId(name: string, version: string): string {\n    // Version can sometimes be in the form of a path that's already in the /name/version format.\n    const packageId: string = version.indexOf('/') !== -1 ? version : `/${name}/${version}`;\n    return packageId;\n  }\n\n  private _parsePnpmDependencyKey(\n    dependencyName: string,\n    pnpmDependencyKey: string\n  ): DependencySpecifier | undefined {\n    if (pnpmDependencyKey) {\n      const result: DependencySpecifier | undefined = parsePnpmDependencyKey(\n        dependencyName,\n        pnpmDependencyKey\n      );\n\n      if (!result) {\n        throw new Error(\n          `Cannot parse PNPM shrinkwrap version specifier: \"${pnpmDependencyKey}\"` +\n            ` for \"${dependencyName}\"`\n        );\n      }\n\n      return result;\n    } else {\n      return undefined;\n    }\n  }\n\n  private _serializeInternal(omitImporters: boolean = false): string {\n    // Ensure that if any of the top-level properties are provided but empty are removed. We populate the object\n    // properties when we read the shrinkwrap but PNPM does not set these top-level properties unless they are present.\n    const shrinkwrapToSerialize: { [key: string]: unknown } = {};\n    for (const [key, value] of Object.entries(this._shrinkwrapJson)) {\n      if (omitImporters && key === 'importers') {\n        continue;\n      }\n\n      if (!value || typeof value !== 'object' || Object.keys(value).length > 0) {\n        shrinkwrapToSerialize[key] = value;\n      }\n    }\n\n    return yamlModule.safeDump(shrinkwrapToSerialize, PNPM_SHRINKWRAP_YAML_FORMAT);\n  }\n}\n"]}