import type { ITerminal } from '@rushstack/node-core-library';
/**
 * @public
 */
export declare enum AzureAuthorityHosts {
    AzureChina = "https://login.chinacloudapi.cn",
    AzureGermany = "https://login.microsoftonline.de",
    AzureGovernment = "https://login.microsoftonline.us",
    AzurePublicCloud = "https://login.microsoftonline.com"
}
/**
 * @public
 */
export declare type AzureEnvironmentNames = keyof typeof AzureAuthorityHosts;
/**
 * @public
 */
export interface IAzureStorageAuthenticationOptions {
    storageContainerName: string;
    storageAccountName: string;
    azureEnvironment?: AzureEnvironmentNames;
    isCacheWriteAllowed: boolean;
}
/**
 * @public
 */
export declare class AzureStorageAuthentication {
    protected readonly _azureEnvironment: AzureEnvironmentNames;
    protected readonly _storageAccountName: string;
    protected readonly _storageContainerName: string;
    protected readonly _isCacheWriteAllowedByConfiguration: boolean;
    private __credentialCacheId;
    private get _credentialCacheId();
    protected get _storageAccountUrl(): string;
    constructor(options: IAzureStorageAuthenticationOptions);
    updateCachedCredentialAsync(terminal: ITerminal, credential: string): Promise<void>;
    /**
     * Launches an interactive flow to renew a cached credential.
     *
     * @param terminal - The terminal to log output to
     * @param onlyIfExistingCredentialExpiresAfter - If specified, and a cached credential exists that is still valid
     * after the date specified, no action will be taken.
     */
    updateCachedCredentialInteractiveAsync(terminal: ITerminal, onlyIfExistingCredentialExpiresAfter?: Date): Promise<void>;
    deleteCachedCredentialsAsync(terminal: ITerminal): Promise<void>;
    tryGetCachedCredentialAsync(): Promise<string | undefined>;
    private _getSasQueryParametersAsync;
}
//# sourceMappingURL=AzureStorageAuthentication.d.ts.map