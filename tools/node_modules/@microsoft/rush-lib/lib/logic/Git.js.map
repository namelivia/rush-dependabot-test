{"version":3,"file":"Git.js","sourceRoot":"","sources":["../../src/logic/Git.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport child_process from 'child_process';\nimport gitInfo = require('git-repo-info');\nimport * as os from 'os';\nimport * as path from 'path';\nimport * as url from 'url';\nimport colors from 'colors/safe';\nimport { trueCasePathSync } from 'true-case-path';\nimport { Executable, AlreadyReportedError, Path, ITerminal } from '@rushstack/node-core-library';\nimport { ensureGitMinimumVersion } from '@rushstack/package-deps-hash';\n\nimport { Utilities } from '../utilities/Utilities';\nimport { GitEmailPolicy } from './policy/GitEmailPolicy';\nimport { RushConfiguration } from '../api/RushConfiguration';\nimport { EnvironmentConfiguration } from '../api/EnvironmentConfiguration';\nimport { IChangedGitStatusEntry, IGitStatusEntry, parseGitStatus } from './GitStatusParser';\n\nexport const DEFAULT_GIT_TAG_SEPARATOR: string = '_';\n\ninterface IResultOrError<TResult> {\n  error?: Error;\n  result?: TResult;\n}\n\nexport interface IGetBlobOptions {\n  blobSpec: string;\n  repositoryRoot: string;\n}\n\nexport class Git {\n  private readonly _rushConfiguration: RushConfiguration;\n  private _checkedGitPath: boolean = false;\n  private _gitPath: string | undefined;\n  private _checkedGitInfo: boolean = false;\n  private _gitInfo: gitInfo.GitRepoInfo | undefined;\n\n  private _gitEmailResult: IResultOrError<string> | undefined = undefined;\n  private _gitHooksPath: IResultOrError<string> | undefined = undefined;\n\n  public constructor(rushConfiguration: RushConfiguration) {\n    this._rushConfiguration = rushConfiguration;\n  }\n\n  /**\n   * Returns the path to the Git binary if found. Otherwise, return undefined.\n   */\n  public get gitPath(): string | undefined {\n    if (!this._checkedGitPath) {\n      this._gitPath = EnvironmentConfiguration.gitBinaryPath || Executable.tryResolve('git');\n      this._checkedGitPath = true;\n    }\n\n    return this._gitPath;\n  }\n\n  public getGitPathOrThrow(): string {\n    const gitPath: string | undefined = this.gitPath;\n    if (!gitPath) {\n      throw new Error('Git is not present');\n    } else {\n      return gitPath;\n    }\n  }\n\n  /**\n   * Returns true if the Git binary can be found.\n   */\n  public isGitPresent(): boolean {\n    return !!this.gitPath;\n  }\n\n  /**\n   * Returns true if the Git binary was found and the current path is under a Git working tree.\n   * @param repoInfo - If provided, do the check based on this Git repo info. If not provided,\n   * the result of `this.getGitInfo()` is used.\n   */\n  public isPathUnderGitWorkingTree(repoInfo?: gitInfo.GitRepoInfo): boolean {\n    if (this.isGitPresent()) {\n      // Do we even have a Git binary?\n      if (!repoInfo) {\n        repoInfo = this.getGitInfo();\n      }\n      return !!(repoInfo && repoInfo.sha);\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * If a Git email address is configured and is nonempty, this returns it.\n   * Otherwise, undefined is returned.\n   */\n  public tryGetGitEmail(): string | undefined {\n    const emailResult: IResultOrError<string> = this._tryGetGitEmail();\n    if (emailResult.result !== undefined && emailResult.result.length > 0) {\n      return emailResult.result;\n    }\n    return undefined;\n  }\n\n  /**\n   * If a Git email address is configured and is nonempty, this returns it.\n   * Otherwise, configuration instructions are printed to the console,\n   * and AlreadyReportedError is thrown.\n   */\n  public getGitEmail(): string {\n    // Determine the user's account\n    // Ex: \"bob@example.com\"\n    const emailResult: IResultOrError<string> = this._tryGetGitEmail();\n    if (emailResult.error) {\n      console.log(\n        [\n          `Error: ${emailResult.error.message}`,\n          'Unable to determine your Git configuration using this command:',\n          '',\n          '    git config user.email',\n          ''\n        ].join(os.EOL)\n      );\n      throw new AlreadyReportedError();\n    }\n\n    if (emailResult.result === undefined || emailResult.result.length === 0) {\n      console.log(\n        [\n          'This operation requires that a Git email be specified.',\n          '',\n          `If you didn't configure your email yet, try something like this:`,\n          '',\n          ...GitEmailPolicy.getEmailExampleLines(this._rushConfiguration),\n          ''\n        ].join(os.EOL)\n      );\n      throw new AlreadyReportedError();\n    }\n\n    return emailResult.result;\n  }\n\n  /**\n   * Get the folder where Git hooks should go for the current working tree.\n   * Returns undefined if the current path is not under a Git working tree.\n   */\n  public getHooksFolder(): string | undefined {\n    const repoInfo: gitInfo.GitRepoInfo | undefined = this.getGitInfo();\n    if (repoInfo && repoInfo.worktreeGitDir) {\n      return path.join(repoInfo.worktreeGitDir, 'hooks');\n    }\n    return undefined;\n  }\n\n  public isHooksPathDefault(): boolean {\n    const repoInfo: gitInfo.GitRepoInfo | undefined = this.getGitInfo();\n    if (!repoInfo?.commonGitDir) {\n      // This should have never been called in a non-Git environment\n      return true;\n    }\n    let commonGitDir: string = repoInfo.commonGitDir;\n    try {\n      commonGitDir = trueCasePathSync(commonGitDir);\n    } catch (error) {\n      /* ignore errors from true-case-path */\n    }\n    const defaultHooksPath: string = path.resolve(commonGitDir, 'hooks');\n    const hooksResult: IResultOrError<string> = this._tryGetGitHooksPath();\n    if (hooksResult.error) {\n      console.log(\n        [\n          `Error: ${hooksResult.error.message}`,\n          'Unable to determine your Git configuration using this command:',\n          '',\n          '    git rev-parse --git-path hooks',\n          '',\n          'Assuming hooks can still be installed in the default location'\n        ].join(os.EOL)\n      );\n      return true;\n    }\n\n    if (hooksResult.result) {\n      const absoluteHooksPath: string = path.resolve(\n        this._rushConfiguration.rushJsonFolder,\n        hooksResult.result\n      );\n      return absoluteHooksPath === defaultHooksPath;\n    }\n\n    // No error, but also empty result? Not sure it's possible.\n    return true;\n  }\n\n  public getConfigHooksPath(): string {\n    let configHooksPath: string = '';\n    const gitPath: string = this.getGitPathOrThrow();\n    try {\n      configHooksPath = this._executeGitCommandAndCaptureOutput(gitPath, ['config', 'core.hooksPath']).trim();\n    } catch (e) {\n      // git config returns error code 1 if core.hooksPath is not set.\n    }\n    return configHooksPath;\n  }\n\n  /**\n   * Get information about the current Git working tree.\n   * Returns undefined if the current path is not under a Git working tree.\n   */\n  public getGitInfo(): Readonly<gitInfo.GitRepoInfo> | undefined {\n    if (!this._checkedGitInfo) {\n      let repoInfo: gitInfo.GitRepoInfo | undefined;\n      try {\n        // gitInfo() shouldn't usually throw, but wrapping in a try/catch just in case\n        repoInfo = gitInfo();\n      } catch (ex) {\n        // if there's an error, assume we're not in a Git working tree\n      }\n\n      if (repoInfo && this.isPathUnderGitWorkingTree(repoInfo)) {\n        this._gitInfo = repoInfo;\n      }\n      this._checkedGitInfo = true;\n    }\n    return this._gitInfo;\n  }\n\n  public getMergeBase(targetBranch: string, terminal: ITerminal, shouldFetch: boolean = false): string {\n    if (shouldFetch) {\n      this._fetchRemoteBranch(targetBranch, terminal);\n    }\n\n    const gitPath: string = this.getGitPathOrThrow();\n    const output: string = this._executeGitCommandAndCaptureOutput(gitPath, [\n      '--no-optional-locks',\n      'merge-base',\n      '--',\n      'HEAD',\n      targetBranch\n    ]);\n    const result: string = output.trim();\n\n    return result;\n  }\n\n  public getBlobContent({ blobSpec, repositoryRoot }: IGetBlobOptions): string {\n    const gitPath: string = this.getGitPathOrThrow();\n    const output: string = this._executeGitCommandAndCaptureOutput(\n      gitPath,\n      ['cat-file', 'blob', blobSpec, '--'],\n      repositoryRoot\n    );\n\n    return output;\n  }\n\n  /**\n   * @param pathPrefix - An optional path prefix \"git diff\"s should be filtered by.\n   * @returns\n   * An array of paths of repo-root-relative paths of files that are different from\n   * those in the provided {@param targetBranch}. If a {@param pathPrefix} is provided,\n   * this function only returns results under the that path.\n   */\n  public getChangedFiles(\n    targetBranch: string,\n    terminal: ITerminal,\n    skipFetch: boolean = false,\n    pathPrefix?: string\n  ): string[] {\n    if (!skipFetch) {\n      this._fetchRemoteBranch(targetBranch, terminal);\n    }\n\n    const gitPath: string = this.getGitPathOrThrow();\n    const output: string = this._executeGitCommandAndCaptureOutput(gitPath, [\n      'diff',\n      `${targetBranch}...`,\n      '--name-only',\n      '--no-renames',\n      '--diff-filter=A'\n    ]);\n    return output\n      .split('\\n')\n      .map((line) => {\n        if (line) {\n          const trimmedLine: string = line.trim();\n          if (!pathPrefix || Path.isUnderOrEqual(trimmedLine, pathPrefix)) {\n            return trimmedLine;\n          }\n        } else {\n          return undefined;\n        }\n      })\n      .filter((line) => {\n        return line && line.length > 0;\n      }) as string[];\n  }\n\n  /**\n   * Gets the remote default branch that maps to the provided repository url.\n   * This method is used by 'Rush change' to find the default remote branch to compare against.\n   * If repository url is not provided or if there is no match, returns the default remote's\n   * default branch 'origin/main'.\n   * If there are more than one matches, returns the first remote's default branch.\n   *\n   * @param rushConfiguration - rush configuration\n   */\n  public getRemoteDefaultBranch(): string {\n    const repositoryUrls: string[] = this._rushConfiguration.repositoryUrls;\n    if (repositoryUrls.length > 0) {\n      const gitPath: string = this.getGitPathOrThrow();\n      const output: string = this._executeGitCommandAndCaptureOutput(gitPath, ['remote']).trim();\n\n      const normalizedRepositoryUrls: Set<string> = new Set<string>();\n      for (const repositoryUrl of repositoryUrls) {\n        // Apply toUpperCase() for a case-insensitive comparison\n        normalizedRepositoryUrls.add(Git.normalizeGitUrlForComparison(repositoryUrl).toUpperCase());\n      }\n\n      const matchingRemotes: string[] = output.split('\\n').filter((remoteName) => {\n        if (remoteName) {\n          const remoteUrl: string = this._executeGitCommandAndCaptureOutput(gitPath, [\n            'remote',\n            'get-url',\n            '--',\n            remoteName\n          ]).trim();\n\n          if (!remoteUrl) {\n            return false;\n          }\n\n          // Also apply toUpperCase() for a case-insensitive comparison\n          const normalizedRemoteUrl: string = Git.normalizeGitUrlForComparison(remoteUrl).toUpperCase();\n          if (normalizedRepositoryUrls.has(normalizedRemoteUrl)) {\n            return true;\n          }\n        }\n\n        return false;\n      });\n\n      if (matchingRemotes.length > 0) {\n        if (matchingRemotes.length > 1) {\n          console.log(\n            `More than one git remote matches the repository URL. Using the first remote (${matchingRemotes[0]}).`\n          );\n        }\n\n        return `${matchingRemotes[0]}/${this._rushConfiguration.repositoryDefaultBranch}`;\n      } else {\n        const errorMessage: string =\n          repositoryUrls.length > 1\n            ? `Unable to find a git remote matching one of the repository URLs (${repositoryUrls.join(\n                ', '\n              )}). `\n            : `Unable to find a git remote matching the repository URL (${repositoryUrls[0]}). `;\n        console.log(colors.yellow(errorMessage + 'Detected changes are likely to be incorrect.'));\n\n        return this._rushConfiguration.repositoryDefaultFullyQualifiedRemoteBranch;\n      }\n    } else {\n      console.log(\n        colors.yellow(\n          'A git remote URL has not been specified in rush.json. Setting the baseline remote URL is recommended.'\n        )\n      );\n      return this._rushConfiguration.repositoryDefaultFullyQualifiedRemoteBranch;\n    }\n  }\n\n  public hasUncommittedChanges(): boolean {\n    const gitStatusEntries: Iterable<IGitStatusEntry> = this.getGitStatus();\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    for (const gitStatusEntry of gitStatusEntries) {\n      // If there are any changes, return true. We only need to evaluate the first iterator entry\n      return true;\n    }\n\n    return false;\n  }\n\n  public hasUnstagedChanges(): boolean {\n    const gitStatusEntries: Iterable<IGitStatusEntry> = this.getGitStatus();\n    for (const gitStatusEntry of gitStatusEntries) {\n      if (\n        gitStatusEntry.kind === 'untracked' ||\n        (gitStatusEntry as IChangedGitStatusEntry).unstagedChangeType !== undefined\n      ) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * The list of files changed but not committed\n   */\n  public getUncommittedChanges(): ReadonlyArray<string> {\n    const result: string[] = [];\n    const gitStatusEntries: Iterable<IGitStatusEntry> = this.getGitStatus();\n    for (const gitStatusEntry of gitStatusEntries) {\n      result.push(gitStatusEntry.path);\n    }\n\n    return result;\n  }\n\n  public getTagSeparator(): string {\n    return this._rushConfiguration.gitTagSeparator || DEFAULT_GIT_TAG_SEPARATOR;\n  }\n\n  public getGitStatus(): Iterable<IGitStatusEntry> {\n    const gitPath: string = this.getGitPathOrThrow();\n    // See Git.test.ts for example output\n    const output: string = this._executeGitCommandAndCaptureOutput(gitPath, [\n      'status',\n      '--porcelain=2',\n      '--null',\n      '--ignored=no'\n    ]);\n\n    return parseGitStatus(output);\n  }\n\n  /**\n   * Git remotes can use different URL syntaxes; this converts them all to a normalized HTTPS\n   * representation for matching purposes.  IF THE INPUT IS NOT ALREADY HTTPS, THE OUTPUT IS\n   * NOT NECESSARILY A VALID GIT URL.\n   *\n   * @example\n   * `git@github.com:ExampleOrg/ExampleProject.git` --> `https://github.com/ExampleOrg/ExampleProject`\n   */\n  public static normalizeGitUrlForComparison(gitUrl: string): string {\n    // Git URL formats are documented here: https://www.git-scm.com/docs/git-clone#_git_urls\n\n    let result: string = gitUrl.trim();\n\n    // [user@]host.xz:path/to/repo.git/\n    // \"This syntax is only recognized if there are no slashes before the first colon. This helps\n    // differentiate a local path that contains a colon.\"\n    //\n    // Match patterns like this:\n    //   user@host.ext:path/to/repo\n    //   host.ext:path/to/repo\n    //   localhost:/~user/path/to/repo\n    //\n    // But not:\n    //   http://blah\n    //   c:/windows/path.txt\n    //\n    const scpLikeSyntaxRegExp: RegExp = /^(?:[^@:\\/]+\\@)?([^:\\/]{2,})\\:((?!\\/\\/).+)$/;\n\n    // Example: \"user@host.ext:path/to/repo\"\n    const scpLikeSyntaxMatch: RegExpExecArray | null = scpLikeSyntaxRegExp.exec(gitUrl);\n    if (scpLikeSyntaxMatch) {\n      // Example: \"host.ext\"\n      const host: string = scpLikeSyntaxMatch[1];\n      // Example: \"path/to/repo\"\n      const path: string = scpLikeSyntaxMatch[2];\n\n      if (path.startsWith('/')) {\n        result = `https://${host}${path}`;\n      } else {\n        result = `https://${host}/${path}`;\n      }\n    }\n\n    const parsedUrl: url.UrlWithStringQuery = url.parse(result);\n\n    // Only convert recognized schemes\n\n    switch (parsedUrl.protocol) {\n      case 'http:':\n      case 'https:':\n      case 'ssh:':\n      case 'ftp:':\n      case 'ftps:':\n      case 'git:':\n      case 'git+http:':\n      case 'git+https:':\n      case 'git+ssh:':\n      case 'git+ftp:':\n      case 'git+ftps:':\n        // Assemble the parts we want:\n        result = `https://${parsedUrl.host}${parsedUrl.pathname}`;\n        break;\n    }\n\n    // Trim \".git\" or \".git/\" from the end\n    result = result.replace(/.git\\/?$/, '');\n    return result;\n  }\n\n  private _tryGetGitEmail(): IResultOrError<string> {\n    if (this._gitEmailResult === undefined) {\n      const gitPath: string = this.getGitPathOrThrow();\n      try {\n        this._gitEmailResult = {\n          result: this._executeGitCommandAndCaptureOutput(gitPath, ['config', 'user.email']).trim()\n        };\n      } catch (e) {\n        this._gitEmailResult = {\n          error: e as Error\n        };\n      }\n    }\n\n    return this._gitEmailResult;\n  }\n\n  private _tryGetGitHooksPath(): IResultOrError<string> {\n    if (this._gitHooksPath === undefined) {\n      const gitPath: string = this.getGitPathOrThrow();\n      try {\n        this._gitHooksPath = {\n          result: this._executeGitCommandAndCaptureOutput(gitPath, [\n            'rev-parse',\n            '--git-path',\n            'hooks'\n          ]).trim()\n        };\n      } catch (e) {\n        this._gitHooksPath = {\n          error: e as Error\n        };\n      }\n    }\n\n    return this._gitHooksPath;\n  }\n\n  private _tryFetchRemoteBranch(remoteBranchName: string): boolean {\n    const firstSlashIndex: number = remoteBranchName.indexOf('/');\n    if (firstSlashIndex === -1) {\n      throw new Error(\n        `Unexpected git remote branch format: ${remoteBranchName}. ` +\n          'Expected branch to be in the <remote>/<branch name> format.'\n      );\n    }\n\n    const remoteName: string = remoteBranchName.substr(0, firstSlashIndex);\n    const branchName: string = remoteBranchName.substr(firstSlashIndex + 1);\n    const gitPath: string = this.getGitPathOrThrow();\n    const spawnResult: child_process.SpawnSyncReturns<string> = Executable.spawnSync(\n      gitPath,\n      ['fetch', '--', remoteName, branchName],\n      {\n        stdio: 'ignore'\n      }\n    );\n    return spawnResult.status === 0;\n  }\n\n  private _fetchRemoteBranch(remoteBranchName: string, terminal: ITerminal): void {\n    console.log(`Checking for updates to ${remoteBranchName}...`);\n    const fetchResult: boolean = this._tryFetchRemoteBranch(remoteBranchName);\n    if (!fetchResult) {\n      terminal.writeWarningLine(\n        `Error fetching git remote branch ${remoteBranchName}. Detected changed files may be incorrect.`\n      );\n    }\n  }\n\n  /**\n   * @internal\n   */\n  public _executeGitCommandAndCaptureOutput(\n    gitPath: string,\n    args: string[],\n    repositoryRoot: string = this._rushConfiguration.rushJsonFolder\n  ): string {\n    try {\n      return Utilities.executeCommandAndCaptureOutput(gitPath, args, repositoryRoot);\n    } catch (e) {\n      ensureGitMinimumVersion(gitPath);\n      throw e;\n    }\n  }\n}\n"]}