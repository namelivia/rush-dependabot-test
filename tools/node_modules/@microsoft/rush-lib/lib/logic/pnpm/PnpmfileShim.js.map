{"version":3,"file":"PnpmfileShim.js","sourceRoot":"","sources":["../../../src/logic/pnpm/PnpmfileShim.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\n// The \"rush install\" or \"rush update\" commands will copy this template to\n// \"common/temp/<pnpmfile.js|.pnpmfile.cjs>\" so that it can implement Rush-specific features such as\n// implicitly preferred versions. It reads its input data from \"common/temp/pnpmfileSettings.json\",\n// which includes the path to the user's pnpmfile for the currently selected variant. The pnpmfile is\n// required directly by this shim and is called after Rush's transformations are applied.\n\n// This file can use \"import type\" but otherwise should not reference any other modules, since it will\n// be run from the \"common/temp\" directory\nimport type * as TSemver from 'semver';\nimport type { IPackageJson } from '@rushstack/node-core-library';\n\nimport type { IPnpmShrinkwrapYaml } from './PnpmShrinkwrapFile';\nimport type { IPnpmfile, IPnpmfileShimSettings, IPnpmfileContext } from './IPnpmfile';\n\nlet settings: IPnpmfileShimSettings;\nlet allPreferredVersions: Map<string, string>;\nlet allowedAlternativeVersions: Map<string, Set<string>> | undefined;\nlet userPnpmfile: IPnpmfile | undefined;\nlet semver: typeof TSemver | undefined;\n\n// Initialize all external aspects of the pnpmfile shim. When using the shim, settings\n// are always expected to be available. Init must be called before running any hook that\n// depends on a resource obtained from or related to the settings, and will require modules\n// once so they aren't repeatedly required in the hook functions.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction init(context: IPnpmfileContext | any): IPnpmfileContext {\n  // Sometimes PNPM may provide us a context arg that doesn't fit spec, ex.:\n  // https://github.com/pnpm/pnpm/blob/97c64bae4d14a8c8f05803f1d94075ee29c2df2f/packages/get-context/src/index.ts#L134\n  // So we need to normalize the context format before we move on\n  if (typeof context !== 'object' || Array.isArray(context)) {\n    context = {\n      log: (message: string) => {},\n      originalContext: context\n    } as IPnpmfileContext;\n  }\n  if (!settings) {\n    // Initialize the settings from file\n    if (!context.pnpmfileShimSettings) {\n      context.pnpmfileShimSettings = require('./pnpmfileSettings.json');\n    }\n    settings = context.pnpmfileShimSettings!;\n  } else if (!context.pnpmfileShimSettings) {\n    // Reuse the already initialized settings\n    context.pnpmfileShimSettings = settings;\n  }\n  if (!allPreferredVersions && settings.allPreferredVersions) {\n    allPreferredVersions = new Map(Object.entries(settings.allPreferredVersions));\n  }\n  if (!allowedAlternativeVersions && settings.allowedAlternativeVersions) {\n    allowedAlternativeVersions = new Map(\n      Object.entries(settings.allowedAlternativeVersions).map(([packageName, versions]) => {\n        return [packageName, new Set(versions)];\n      })\n    );\n  }\n  // If a userPnpmfilePath is provided, we expect it to exist\n  if (!userPnpmfile && settings.userPnpmfilePath) {\n    userPnpmfile = require(settings.userPnpmfilePath);\n  }\n  // If a semverPath is provided, we expect it to exist\n  if (!semver && settings.semverPath) {\n    semver = require(settings.semverPath);\n  }\n  // Return the normalized context\n  return context as IPnpmfileContext;\n}\n\n// Set the preferred versions on the dependency map. If the version on the map is an allowedAlternativeVersion\n// then skip it. Otherwise, check to ensure that the common version is a subset of the specified version. If\n// it is, then replace the specified version with the preferredVersion\nfunction setPreferredVersions(dependencies: { [dependencyName: string]: string } | undefined): void {\n  for (const [name, version] of Object.entries(dependencies || {})) {\n    const preferredVersion: string | undefined = allPreferredVersions?.get(name);\n    if (preferredVersion && !allowedAlternativeVersions?.get(name)?.has(version)) {\n      let preferredVersionRange: TSemver.Range | undefined;\n      let versionRange: TSemver.Range | undefined;\n      try {\n        preferredVersionRange = new semver!.Range(preferredVersion);\n        versionRange = new semver!.Range(version);\n      } catch {\n        // Swallow invalid range errors\n      }\n      if (\n        preferredVersionRange &&\n        versionRange &&\n        semver!.subset(preferredVersionRange, versionRange, { includePrerelease: true })\n      ) {\n        dependencies![name] = preferredVersion;\n      }\n    }\n  }\n}\n\nconst pnpmfileShim: IPnpmfile = {\n  hooks: {\n    // Call the original pnpmfile (if it exists)\n    afterAllResolved: (lockfile: IPnpmShrinkwrapYaml, context: IPnpmfileContext) => {\n      context = init(context);\n      return userPnpmfile?.hooks?.afterAllResolved\n        ? userPnpmfile.hooks.afterAllResolved(lockfile, context)\n        : lockfile;\n    },\n\n    // Set the preferred versions in the package, then call the original pnpmfile (if it exists)\n    readPackage: (pkg: IPackageJson, context: IPnpmfileContext) => {\n      context = init(context);\n      setPreferredVersions(pkg.dependencies);\n      setPreferredVersions(pkg.devDependencies);\n      setPreferredVersions(pkg.optionalDependencies);\n      return userPnpmfile?.hooks?.readPackage ? userPnpmfile.hooks.readPackage(pkg, context) : pkg;\n    },\n\n    // Call the original pnpmfile (if it exists)\n    filterLog: userPnpmfile?.hooks?.filterLog\n  }\n};\n\nexport = pnpmfileShim;\n"]}