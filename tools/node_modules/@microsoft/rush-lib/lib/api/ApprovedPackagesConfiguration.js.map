{"version":3,"file":"ApprovedPackagesConfiguration.js","sourceRoot":"","sources":["../../src/api/ApprovedPackagesConfiguration.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as path from 'path';\nimport * as os from 'os';\nimport { JsonFile, JsonSchema, FileSystem, NewlineKind, InternalError } from '@rushstack/node-core-library';\n\nimport { Utilities } from '../utilities/Utilities';\nimport { JsonSchemaUrls } from '../logic/JsonSchemaUrls';\n\n/**\n * Part of IApprovedPackagesJson.\n */\nexport interface IApprovedPackagesItemJson {\n  name: string;\n  allowedCategories: string[];\n}\n\n/**\n * This represents the JSON data structure for the \"browser-approved-packages.json\"\n * and \"nonbrowser-approved-packages.json\" configuration files.  See \"approved-packages.schema.json\"\n * for documentation.\n */\nexport interface IApprovedPackagesJson {\n  $schema?: string;\n  packages: IApprovedPackagesItemJson[];\n}\n\n/**\n * An item returned by ApprovedPackagesConfiguration\n * @public\n */\nexport class ApprovedPackagesItem {\n  /**\n   * The NPM package name\n   */\n  public packageName: string;\n\n  /**\n   * The project categories that are allowed to use this package.\n   */\n  public allowedCategories: Set<string> = new Set<string>();\n\n  /**\n   * @internal\n   */\n  public constructor(packageName: string) {\n    this.packageName = packageName;\n  }\n}\n\n/**\n * This represents the JSON file specified via the \"approvedPackagesFile\" option in rush.json.\n * @public\n */\nexport class ApprovedPackagesConfiguration {\n  private static _jsonSchema: JsonSchema = JsonSchema.fromFile(\n    path.join(__dirname, '../schemas/approved-packages.schema.json')\n  );\n\n  public items: ApprovedPackagesItem[] = [];\n\n  private _itemsByName: Map<string, ApprovedPackagesItem> = new Map<string, ApprovedPackagesItem>();\n\n  private _loadedJson!: IApprovedPackagesJson;\n  private _jsonFilename: string;\n\n  public constructor(jsonFilename: string) {\n    this._jsonFilename = jsonFilename;\n    this.clear();\n  }\n\n  /**\n   * Clears all the settings, returning to an empty state.\n   */\n  public clear(): void {\n    this._itemsByName.clear();\n    this._loadedJson = {\n      // Ensure this comes first in the key ordering\n      $schema: '',\n      packages: []\n    };\n  }\n\n  public getItemByName(packageName: string): ApprovedPackagesItem | undefined {\n    return this._itemsByName.get(packageName);\n  }\n\n  public addOrUpdatePackage(packageName: string, reviewCategory: string): boolean {\n    let changed: boolean = false;\n\n    let item: ApprovedPackagesItem | undefined = this._itemsByName.get(packageName);\n    if (!item) {\n      item = new ApprovedPackagesItem(packageName);\n      this._addItem(item);\n      changed = true;\n    }\n\n    if (reviewCategory && !item.allowedCategories.has(reviewCategory)) {\n      item.allowedCategories.add(reviewCategory);\n      changed = true;\n    }\n\n    return changed;\n  }\n\n  /**\n   * If the file exists, calls loadFromFile().\n   */\n  public tryLoadFromFile(approvedPackagesPolicyEnabled: boolean): boolean {\n    if (!FileSystem.exists(this._jsonFilename)) {\n      return false;\n    }\n\n    this.loadFromFile();\n\n    if (!approvedPackagesPolicyEnabled) {\n      console.log(\n        `Warning: Ignoring \"${path.basename(this._jsonFilename)}\" because the` +\n          ` \"approvedPackagesPolicy\" setting was not specified in rush.json`\n      );\n    }\n\n    return false;\n  }\n\n  /**\n   * Loads the configuration data from the filename that was passed to the constructor.\n   */\n  public loadFromFile(): void {\n    const approvedPackagesJson: IApprovedPackagesJson = JsonFile.loadAndValidate(\n      this._jsonFilename,\n      ApprovedPackagesConfiguration._jsonSchema\n    );\n\n    this.clear();\n\n    for (const browserPackage of approvedPackagesJson.packages) {\n      this._addItemJson(browserPackage, this._jsonFilename);\n    }\n  }\n\n  /**\n   * Loads the configuration data to the filename that was passed to the constructor.\n   */\n  public saveToFile(): void {\n    // Update the JSON structure that we already loaded, preserving any existing state\n    // (which passed schema validation).\n\n    // eslint-disable-next-line dot-notation\n    this._loadedJson['$schema'] = JsonSchemaUrls.approvedPackages;\n\n    this._loadedJson.packages = [];\n\n    this.items.sort((a: ApprovedPackagesItem, b: ApprovedPackagesItem) => {\n      return a.packageName.localeCompare(b.packageName);\n    });\n\n    for (const item of this.items) {\n      // Sort the items from the set.  Too bad we can't use the new Array.from().\n      const allowedCategories: string[] = Utilities.getSetAsArray(item.allowedCategories);\n      allowedCategories.sort();\n\n      const itemJson: IApprovedPackagesItemJson = {\n        name: item.packageName,\n        allowedCategories: allowedCategories\n      };\n\n      this._loadedJson.packages.push(itemJson);\n    }\n\n    // Save the file\n    let body: string = JsonFile.stringify(this._loadedJson);\n\n    // Unindent the allowedCategories array to improve readability\n    body = body.replace(/(\"allowedCategories\": +\\[)([^\\]]+)/g, (substring: string, ...args: string[]) => {\n      return args[0] + args[1].replace(/\\s+/g, ' ');\n    });\n\n    // Add a header\n    body = '// DO NOT ADD COMMENTS IN THIS FILE.  They will be lost when the Rush tool resaves it.\\n' + body;\n\n    FileSystem.writeFile(this._jsonFilename, body, {\n      convertLineEndings: NewlineKind.CrLf\n    });\n  }\n\n  /**\n   * Helper function only used by the constructor when loading the file.\n   */\n  private _addItemJson(itemJson: IApprovedPackagesItemJson, jsonFilename: string): void {\n    if (this._itemsByName.has(itemJson.name)) {\n      throw new Error(\n        `Error loading package review file ${jsonFilename}:` +\n          os.EOL +\n          ` the name \"${itemJson.name}\" appears more than once`\n      );\n    }\n\n    const item: ApprovedPackagesItem = new ApprovedPackagesItem(itemJson.name);\n    if (itemJson.allowedCategories) {\n      for (const allowedCategory of itemJson.allowedCategories) {\n        item.allowedCategories.add(allowedCategory);\n      }\n    }\n    this._addItem(item);\n  }\n\n  /**\n   * Helper function that adds an already created ApprovedPackagesItem to the\n   * list and set.\n   */\n  private _addItem(item: ApprovedPackagesItem): void {\n    if (this._itemsByName.has(item.packageName)) {\n      throw new InternalError('Duplicate key');\n    }\n    this.items.push(item);\n    this._itemsByName.set(item.packageName, item);\n  }\n}\n"]}