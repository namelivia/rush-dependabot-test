{"version":3,"file":"PhasedCommandHooks.js","sourceRoot":"","sources":["../../src/pluginFramework/PhasedCommandHooks.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,qCAA8E;AA0E9E;;;GAGG;AACH,MAAa,kBAAkB;IAA/B;QACE;;;WAGG;QACa,qBAAgB,GAC9B,IAAI,kCAAwB,CAAC,CAAC,YAAY,EAAE,SAAS,CAAC,EAAE,kBAAkB,CAAC,CAAC;QAE9E;;;;WAIG;QACa,2BAAsB,GACpC,IAAI,yBAAe,CAAC,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC,CAAC;QAE9C;;;;WAIG;QACa,sBAAiB,GAAmB,IAAI,kBAAQ,CAAC,SAAS,EAAE,mBAAmB,CAAC,CAAC;IACnG,CAAC;CAAA;AAtBD,gDAsBC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { AsyncSeriesHook, AsyncSeriesWaterfallHook, SyncHook } from 'tapable';\n\nimport type { CommandLineParameter } from '@rushstack/ts-command-line';\nimport type { BuildCacheConfiguration } from '../api/BuildCacheConfiguration';\nimport type { IPhase } from '../api/CommandLineConfiguration';\nimport type { RushConfiguration } from '../api/RushConfiguration';\nimport type { RushConfigurationProject } from '../api/RushConfigurationProject';\n\nimport type { Operation } from '../logic/operations/Operation';\nimport type { ProjectChangeAnalyzer } from '../logic/ProjectChangeAnalyzer';\nimport { IExecutionResult } from '../logic/operations/IOperationExecutionResult';\n\n/**\n * A plugin that interacts with a phased commands.\n * @alpha\n */\nexport interface IPhasedCommandPlugin {\n  /**\n   * Applies this plugin.\n   */\n  apply(hooks: PhasedCommandHooks): void;\n}\n\n/**\n * Context used for creating operations to be executed.\n * @alpha\n */\nexport interface ICreateOperationsContext {\n  /**\n   * The configuration for the build cache, if the feature is enabled.\n   */\n  readonly buildCacheConfiguration: BuildCacheConfiguration | undefined;\n  /**\n   * The set of custom parameters for the executing command.\n   * Maps from the `longName` field in command-line.json to the parser configuration in ts-command-line.\n   */\n  readonly customParameters: ReadonlyMap<string, CommandLineParameter>;\n  /**\n   * If true, projects may read their output from cache or be skipped if already up to date.\n   * If false, neither of the above may occur, e.g. \"rush rebuild\"\n   */\n  readonly isIncrementalBuildAllowed: boolean;\n  /**\n   * If true, this is the initial run of the command.\n   * If false, this execution is in response to changes.\n   */\n  readonly isInitial: boolean;\n  /**\n   * If true, the command is running in watch mode.\n   */\n  readonly isWatch: boolean;\n  /**\n   * The set of phases selected for the current command execution.\n   */\n  readonly phaseSelection: ReadonlySet<IPhase>;\n  /**\n   * The current state of the repository\n   */\n  readonly projectChangeAnalyzer: ProjectChangeAnalyzer;\n  /**\n   * The set of Rush projects selected for the current command execution.\n   */\n  readonly projectSelection: ReadonlySet<RushConfigurationProject>;\n  /**\n   * The set of Rush projects that have not been built in the current process since they were last modified.\n   * When `isInitial` is true, this will be an exact match of `projectSelection`.\n   */\n  readonly projectsInUnknownState: ReadonlySet<RushConfigurationProject>;\n  /**\n   * The Rush configuration\n   */\n  readonly rushConfiguration: RushConfiguration;\n}\n\n/**\n * Hooks into the execution process for phased commands\n * @alpha\n */\nexport class PhasedCommandHooks {\n  /**\n   * Hook invoked to create operations for execution.\n   * Use the context to distinguish between the initial run and phased runs.\n   */\n  public readonly createOperations: AsyncSeriesWaterfallHook<[Set<Operation>, ICreateOperationsContext]> =\n    new AsyncSeriesWaterfallHook(['operations', 'context'], 'createOperations');\n\n  /**\n   * Hook invoked after executing a set of operations.\n   * Use the context to distinguish between the initial run and phased runs.\n   * Hook is series for stable output.\n   */\n  public readonly afterExecuteOperations: AsyncSeriesHook<[IExecutionResult, ICreateOperationsContext]> =\n    new AsyncSeriesHook(['results', 'context']);\n\n  /**\n   * Hook invoked after a run has finished and the command is watching for changes.\n   * May be used to display additional relevant data to the user.\n   * Only relevant when running in watch mode.\n   */\n  public readonly waitingForChanges: SyncHook<void> = new SyncHook(undefined, 'waitingForChanges');\n}\n"]}