{"version":3,"file":"VersionPolicyConfiguration.js","sourceRoot":"","sources":["../../src/api/VersionPolicyConfiguration.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as path from 'path';\nimport { JsonFile, JsonSchema, FileSystem } from '@rushstack/node-core-library';\n\nimport { VersionPolicy, BumpType, LockStepVersionPolicy } from './VersionPolicy';\nimport { RushConfigurationProject } from './RushConfigurationProject';\nimport { EOL } from 'os';\n\nexport interface IVersionPolicyJson {\n  policyName: string;\n  definitionName: string;\n  dependencies?: IVersionPolicyDependencyJson;\n  exemptFromRushChange?: boolean;\n  includeEmailInChangeFile?: boolean;\n}\n\nexport interface ILockStepVersionJson extends IVersionPolicyJson {\n  version: string;\n  nextBump?: string;\n  mainProject?: string;\n}\n\nexport interface IIndividualVersionJson extends IVersionPolicyJson {\n  lockedMajor?: number;\n}\n\nexport enum VersionFormatForPublish {\n  original = 'original',\n  exact = 'exact'\n}\n\nexport enum VersionFormatForCommit {\n  wildcard = 'wildcard',\n  original = 'original'\n}\n\nexport interface IVersionPolicyDependencyJson {\n  versionFormatForPublish?: VersionFormatForPublish;\n  versionFormatForCommit?: VersionFormatForCommit;\n}\n\n/**\n * Use this class to load and save the \"common/config/rush/version-policies.json\" config file.\n * This config file configures how different groups of projects will be published by Rush,\n * and how their version numbers will be determined.\n * @public\n */\nexport class VersionPolicyConfiguration {\n  private static _jsonSchema: JsonSchema = JsonSchema.fromFile(\n    path.join(__dirname, '../schemas/version-policies.schema.json')\n  );\n\n  private _versionPolicies: Map<string, VersionPolicy>;\n  private _jsonFileName: string;\n\n  /**\n   * @internal\n   */\n  public constructor(jsonFileName: string) {\n    this._jsonFileName = jsonFileName;\n    this._versionPolicies = new Map<string, VersionPolicy>();\n    this._loadFile();\n  }\n\n  /**\n   * Validate the version policy configuration against the rush config\n   */\n  public validate(projectsByName: Map<string, RushConfigurationProject>): void {\n    if (!this.versionPolicies) {\n      return;\n    }\n    this.versionPolicies.forEach((policy) => {\n      const lockStepPolicy: LockStepVersionPolicy = policy as LockStepVersionPolicy;\n      if (lockStepPolicy.mainProject && !projectsByName.get(lockStepPolicy.mainProject)) {\n        throw new Error(\n          `Version policy \\\"${policy.policyName}\\\" has a non-existing mainProject:` +\n            ` ${lockStepPolicy.mainProject}.`\n        );\n      }\n    });\n  }\n\n  /**\n   * Gets the version policy by its name.\n   * Throws error if the version policy is not found.\n   * @param policyName - Name of the version policy\n   */\n  public getVersionPolicy(policyName: string): VersionPolicy {\n    const policy: VersionPolicy | undefined = this._versionPolicies.get(policyName);\n    if (!policy) {\n      throw new Error(`Failed to find version policy by name \\'${policyName}\\'`);\n    }\n    return policy;\n  }\n\n  /**\n   * Gets all the version policies\n   */\n  public get versionPolicies(): Map<string, VersionPolicy> {\n    return this._versionPolicies;\n  }\n\n  /**\n   * Bumps up versions for the specified version policy or all version policies\n   *\n   * @param versionPolicyName - version policy name\n   * @param bumpType - bump type to override what policy has defined.\n   * @param identifier - prerelease identifier to override what policy has defined.\n   * @param shouldCommit - should save to disk\n   */\n  public bump(\n    versionPolicyName?: string,\n    bumpType?: BumpType,\n    identifier?: string,\n    shouldCommit?: boolean\n  ): void {\n    if (versionPolicyName) {\n      const policy: VersionPolicy | undefined = this.versionPolicies.get(versionPolicyName);\n      if (policy) {\n        policy.bump(bumpType, identifier);\n      }\n    } else {\n      this.versionPolicies.forEach((versionPolicy) => {\n        if (versionPolicy) {\n          versionPolicy.bump(bumpType, identifier);\n        }\n      });\n    }\n    this._saveFile(!!shouldCommit);\n  }\n\n  /**\n   * Updates the version directly for the specified version policy\n   * @param versionPolicyName - version policy name\n   * @param newVersion - new version\n   */\n  public update(versionPolicyName: string, newVersion: string, shouldCommit?: boolean): void {\n    const policy: VersionPolicy | undefined = this.versionPolicies.get(versionPolicyName);\n    if (!policy || !policy.isLockstepped) {\n      throw new Error(`Lockstep Version policy with name \"${versionPolicyName}\" cannot be found`);\n    }\n    const lockStepVersionPolicy: LockStepVersionPolicy = policy as LockStepVersionPolicy;\n    const previousVersion: string = lockStepVersionPolicy.version;\n    if (lockStepVersionPolicy.update(newVersion)) {\n      console.log(\n        `${EOL}Update version policy ${versionPolicyName} from ${previousVersion} to ${newVersion}`\n      );\n      this._saveFile(!!shouldCommit);\n    }\n  }\n\n  private _loadFile(): void {\n    if (!FileSystem.exists(this._jsonFileName)) {\n      return;\n    }\n    const versionPolicyJson: IVersionPolicyJson[] = JsonFile.loadAndValidate(\n      this._jsonFileName,\n      VersionPolicyConfiguration._jsonSchema\n    );\n\n    versionPolicyJson.forEach((policyJson) => {\n      const policy: VersionPolicy | undefined = VersionPolicy.load(policyJson);\n      if (policy) {\n        this._versionPolicies.set(policy.policyName, policy);\n      }\n    });\n  }\n\n  private _saveFile(shouldCommit: boolean): void {\n    const versionPolicyJson: IVersionPolicyJson[] = [];\n    this.versionPolicies.forEach((versionPolicy) => {\n      versionPolicyJson.push(versionPolicy._json);\n    });\n    if (shouldCommit) {\n      JsonFile.save(versionPolicyJson, this._jsonFileName, { updateExistingFile: true });\n    }\n  }\n}\n"]}