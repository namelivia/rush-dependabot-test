{"version":3,"file":"InstallAction.js","sourceRoot":"","sources":["../../../src/cli/actions/InstallAction.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAG3D,oEAAiF;AAEjF,2DAAwD;AAGxD,oEAAiE;AAEjE,MAAa,aAAc,SAAQ,qCAAiB;IAGlD,YAAmB,MAA6B;QAC9C,KAAK,CAAC;YACJ,UAAU,EAAE,SAAS;YACrB,OAAO,EAAE,4FAA4F;YACrG,aAAa,EACX,iFAAiF;gBACjF,4EAA4E;gBAC5E,sFAAsF;gBACtF,8EAA8E;gBAC9E,8FAA8F;gBAC9F,gFAAgF;gBAChF,uFAAuF;gBACvF,yFAAyF;gBACzF,yFAAyF;gBACzF,+CAA+C;YACjD,MAAM;SACP,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACO,kBAAkB;QAC1B,KAAK,CAAC,kBAAkB,EAAE,CAAC;QAE3B,IAAI,CAAC,oBAAoB,GAAG,IAAI,6CAAqB,CAAC,IAAI,CAAC,iBAAiB,EAAE,IAAI,EAAE;YAClF,sFAAsF;YACtF,0EAA0E;YAC1E,2BAA2B,EAAE,IAAI;YACjC,6FAA6F;YAC7F,eAAe,EAAE,KAAK;SACvB,CAAC,CAAC;QAEH,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,mBAAmB,CAAC;YAClD,iBAAiB,EAAE,cAAc;YACjC,WAAW,EAAE,+EAA+E;SAC7F,CAAC,CAAC;IACL,CAAC;IAES,KAAK,CAAC,wBAAwB;QACtC,MAAM,QAAQ,GAAa,IAAI,4BAAQ,CAAC,IAAI,2CAAuB,EAAE,CAAC,CAAC;QACvE,OAAO;YACL,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,OAAO;YAC1B,sBAAsB,EAAE,KAAK;YAC7B,YAAY,EAAE,IAAI,CAAC,sBAAsB,CAAC,KAAM;YAChD,MAAM,EAAE,IAAI,CAAC,gBAAgB,CAAC,KAAM;YACpC,WAAW,EAAE,KAAK;YAClB,iBAAiB,EAAE,KAAK;YACxB,kBAAkB,EAAE,IAAI,CAAC,4BAA4B,CAAC,KAAK;YAC3D,cAAc,EAAE,IAAI,CAAC,6BAA6B,CAAC,KAAM;YACzD,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,KAAK;YAC5B,iFAAiF;YACjF,kDAAkD;YAClD,kBAAkB,EAAE,IAAI,CAAC,mBAAmB,CAAC,KAAM;YACnD,4EAA4E;YAC5E,mBAAmB,EAAE,MAAM,IAAI,CAAC,oBAAqB,CAAC,2BAA2B,CAAC,QAAQ,CAAC;YAC3F,SAAS,EAAE,IAAI,CAAC,mBAAmB,CAAC,KAAK;SAC1C,CAAC;IACJ,CAAC;CACF;AA9DD,sCA8DC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { CommandLineFlagParameter } from '@rushstack/ts-command-line';\nimport { ConsoleTerminalProvider, Terminal } from '@rushstack/node-core-library';\n\nimport { BaseInstallAction } from './BaseInstallAction';\nimport { IInstallManagerOptions } from '../../logic/base/BaseInstallManager';\nimport { RushCommandLineParser } from '../RushCommandLineParser';\nimport { SelectionParameterSet } from '../SelectionParameterSet';\n\nexport class InstallAction extends BaseInstallAction {\n  private _checkOnlyParameter!: CommandLineFlagParameter;\n\n  public constructor(parser: RushCommandLineParser) {\n    super({\n      actionName: 'install',\n      summary: 'Install package dependencies for all projects in the repo according to the shrinkwrap file',\n      documentation:\n        'The \"rush install\" command installs package dependencies for all your projects,' +\n        ' based on the shrinkwrap file that is created/updated using \"rush update\".' +\n        ' (This \"shrinkwrap\" file stores a central inventory of all dependencies and versions' +\n        ' for projects in your repo. It is found in the \"common/config/rush\" folder.)' +\n        ' If the shrinkwrap file is missing or outdated (e.g. because project package.json files have' +\n        ' changed), \"rush install\" will fail and tell you to run \"rush update\" instead.' +\n        ' This read-only nature is the main feature:  Continuous integration builds should use' +\n        ' \"rush install\" instead of \"rush update\" to catch developers who forgot to commit their' +\n        ' shrinkwrap changes.  Cautious people can also use \"rush install\" if they want to avoid' +\n        ' accidentally updating their shrinkwrap file.',\n      parser\n    });\n  }\n\n  /**\n   * @override\n   */\n  protected onDefineParameters(): void {\n    super.onDefineParameters();\n\n    this._selectionParameters = new SelectionParameterSet(this.rushConfiguration, this, {\n      // Include lockfile processing since this expands the selection, and we need to select\n      // at least the same projects selected with the same query to \"rush build\"\n      includeExternalDependencies: true,\n      // Disable filtering because rush-project.json is riggable and therefore may not be available\n      enableFiltering: false\n    });\n\n    this._checkOnlyParameter = this.defineFlagParameter({\n      parameterLongName: '--check-only',\n      description: `Only check the validity of the shrinkwrap file without performing an install.`\n    });\n  }\n\n  protected async buildInstallOptionsAsync(): Promise<IInstallManagerOptions> {\n    const terminal: Terminal = new Terminal(new ConsoleTerminalProvider());\n    return {\n      debug: this.parser.isDebug,\n      allowShrinkwrapUpdates: false,\n      bypassPolicy: this._bypassPolicyParameter.value!,\n      noLink: this._noLinkParameter.value!,\n      fullUpgrade: false,\n      recheckShrinkwrap: false,\n      networkConcurrency: this._networkConcurrencyParameter.value,\n      collectLogFile: this._debugPackageManagerParameter.value!,\n      variant: this._variant.value,\n      // Because the 'defaultValue' option on the _maxInstallAttempts parameter is set,\n      // it is safe to assume that the value is not null\n      maxInstallAttempts: this._maxInstallAttempts.value!,\n      // These are derived independently of the selection for command line brevity\n      pnpmFilterArguments: await this._selectionParameters!.getPnpmFilterArgumentsAsync(terminal),\n      checkOnly: this._checkOnlyParameter.value\n    };\n  }\n}\n"]}