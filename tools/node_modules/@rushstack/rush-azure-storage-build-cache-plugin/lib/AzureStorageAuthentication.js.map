{"version":3,"file":"AzureStorageAuthentication.js","sourceRoot":"","sources":["../src/AzureStorageAuthentication.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,8CAAuE;AACvE,sDAM6B;AAE7B,kDAA4F;AAC5F,kDAAqD;AAErD,8GAA8G;AAC9G,+GAA+G;AAC/G,yDAAyD;AACzD;;GAEG;AACH,IAAY,mBAKX;AALD,WAAY,mBAAmB;IAC7B,oEAA6C,CAAA;IAC7C,wEAAiD,CAAA;IACjD,2EAAoD,CAAA;IACpD,6EAAsD,CAAA;AACxD,CAAC,EALW,mBAAmB,GAAnB,2BAAmB,KAAnB,2BAAmB,QAK9B;AAkBD,MAAM,oBAAoB,GAAW,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,aAAa;AAE3E;;GAEG;AACH,MAAa,0BAA0B;IA8BrC,YAAmB,OAA2C;QAC5D,IAAI,CAAC,mBAAmB,GAAG,OAAO,CAAC,kBAAkB,CAAC;QACtD,IAAI,CAAC,qBAAqB,GAAG,OAAO,CAAC,oBAAoB,CAAC;QAC1D,IAAI,CAAC,iBAAiB,GAAG,OAAO,CAAC,gBAAgB,IAAI,kBAAkB,CAAC;QACxE,IAAI,CAAC,mCAAmC,GAAG,OAAO,CAAC,mBAAmB,CAAC;IACzE,CAAC;IA5BD,IAAY,kBAAkB;QAC5B,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE;YAC7B,MAAM,YAAY,GAAa;gBAC7B,oBAAoB;gBACpB,IAAI,CAAC,iBAAiB;gBACtB,IAAI,CAAC,mBAAmB;gBACxB,IAAI,CAAC,qBAAqB;aAC3B,CAAC;YAEF,IAAI,IAAI,CAAC,mCAAmC,EAAE;gBAC5C,YAAY,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;aACxC;YAED,IAAI,CAAC,mBAAmB,GAAG,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SACnD;QAED,OAAO,IAAI,CAAC,mBAAmB,CAAC;IAClC,CAAC;IAED,IAAc,kBAAkB;QAC9B,OAAO,WAAW,IAAI,CAAC,mBAAmB,yBAAyB,CAAC;IACtE,CAAC;IASM,KAAK,CAAC,2BAA2B,CAAC,QAAmB,EAAE,UAAkB;QAC9E,MAAM,0BAAe,CAAC,UAAU,CAC9B;YACE,cAAc,EAAE,IAAI;SACrB,EACD,KAAK,EAAE,gBAAiC,EAAE,EAAE;YAC1C,gBAAgB,CAAC,aAAa,CAAC,IAAI,CAAC,kBAAkB,EAAE,UAAU,CAAC,CAAC;YACpE,MAAM,gBAAgB,CAAC,mBAAmB,EAAE,CAAC;QAC/C,CAAC,CACF,CAAC;IACJ,CAAC;IAED;;;;;;OAMG;IACI,KAAK,CAAC,sCAAsC,CACjD,QAAmB,EACnB,oCAA2C;QAE3C,MAAM,0BAAe,CAAC,UAAU,CAC9B;YACE,cAAc,EAAE,IAAI;SACrB,EACD,KAAK,EAAE,gBAAiC,EAAE,EAAE;;YAC1C,IAAI,oCAAoC,EAAE;gBACxC,MAAM,4BAA4B,GAAqB,MAAA,gBAAgB,CAAC,gBAAgB,CACtF,IAAI,CAAC,kBAAkB,CACxB,0CAAE,OAAO,CAAC;gBACX,IACE,4BAA4B;oBAC5B,4BAA4B,GAAG,oCAAoC,EACnE;oBACA,OAAO;iBACR;aACF;YAED,MAAM,kBAAkB,GAAuB,MAAM,IAAI,CAAC,2BAA2B,CAAC,QAAQ,CAAC,CAAC;YAChG,MAAM,SAAS,GAAW,kBAAkB,CAAC,QAAQ,EAAE,CAAC;YAExD,gBAAgB,CAAC,aAAa,CAAC,IAAI,CAAC,kBAAkB,EAAE,SAAS,EAAE,kBAAkB,CAAC,SAAS,CAAC,CAAC;YACjG,MAAM,gBAAgB,CAAC,mBAAmB,EAAE,CAAC;QAC/C,CAAC,CACF,CAAC;IACJ,CAAC;IAEM,KAAK,CAAC,4BAA4B,CAAC,QAAmB;QAC3D,MAAM,0BAAe,CAAC,UAAU,CAC9B;YACE,cAAc,EAAE,IAAI;SACrB,EACD,KAAK,EAAE,gBAAiC,EAAE,EAAE;YAC1C,gBAAgB,CAAC,gBAAgB,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;YAC3D,MAAM,gBAAgB,CAAC,mBAAmB,EAAE,CAAC;QAC/C,CAAC,CACF,CAAC;IACJ,CAAC;IAEM,KAAK,CAAC,2BAA2B;;QACtC,IAAI,UAA6C,CAAC;QAClD,MAAM,0BAAe,CAAC,UAAU,CAC9B;YACE,cAAc,EAAE,KAAK;SACtB,EACD,CAAC,gBAAiC,EAAE,EAAE;YACpC,UAAU,GAAG,gBAAgB,CAAC,gBAAgB,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QAC1E,CAAC,CACF,CAAC;QAEF,MAAM,cAAc,GAAuB,MAAA,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,OAAO,0CAAE,OAAO,EAAE,CAAC;QAC1E,IAAI,cAAc,IAAI,cAAc,GAAG,IAAI,CAAC,GAAG,EAAE,EAAE;YACjD,MAAM,IAAI,KAAK,CACb,iDAAiD;gBAC/C,2CAA2C,wBAAa,CAAC,iCAAiC,IAAI,CACjG,CAAC;SACH;aAAM;YACL,OAAO,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,UAAU,CAAC;SAC/B;IACH,CAAC;IAEO,KAAK,CAAC,2BAA2B,CAAC,QAAmB;QAC3D,MAAM,aAAa,GAAuB,mBAAmB,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QACtF,IAAI,CAAC,aAAa,EAAE;YAClB,MAAM,IAAI,KAAK,CAAC,iCAAiC,IAAI,CAAC,iBAAiB,EAAE,CAAC,CAAC;SAC5E;QAED,MAAM,uBAAuB,GAAW,sCAAsC,CAAC;QAC/E,MAAM,oBAAoB,GAAyB,IAAI,+BAAoB,CACzE,eAAe,EACf,uBAAuB,EACvB,CAAC,cAA8B,EAAE,EAAE;YACjC,yBAAc,CAAC,iBAAiB,CAAC,cAAc,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;QACrE,CAAC,EACD,EAAE,aAAa,EAAE,aAAa,EAAE,CACjC,CAAC;QACF,MAAM,iBAAiB,GAAsB,IAAI,gCAAiB,CAChE,IAAI,CAAC,kBAAkB,EACvB,oBAAoB,CACrB,CAAC;QAEF,MAAM,QAAQ,GAAS,IAAI,IAAI,EAAE,CAAC;QAClC,MAAM,OAAO,GAAS,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,oBAAoB,CAAC,CAAC;QAClE,MAAM,GAAG,GAAwC,MAAM,iBAAiB,CAAC,oBAAoB,CAC3F,QAAQ,EACR,OAAO,CACR,CAAC;QAEF,MAAM,uBAAuB,GAA4B,IAAI,sCAAuB,EAAE,CAAC;QACvF,uBAAuB,CAAC,IAAI,GAAG,IAAI,CAAC;QACpC,uBAAuB,CAAC,KAAK,GAAG,IAAI,CAAC,mCAAmC,CAAC;QAEzE,MAAM,eAAe,GAAuB,IAAA,6CAA8B,EACxE;YACE,QAAQ,EAAE,QAAQ;YAClB,SAAS,EAAE,OAAO;YAClB,WAAW,EAAE,uBAAuB;YACpC,aAAa,EAAE,IAAI,CAAC,qBAAqB;SAC1C,EACD,GAAG,EACH,IAAI,CAAC,mBAAmB,CACzB,CAAC;QAEF,OAAO,eAAe,CAAC;IACzB,CAAC;CACF;AApKD,gEAoKC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { DeviceCodeCredential, DeviceCodeInfo } from '@azure/identity';\nimport {\n  BlobServiceClient,\n  ContainerSASPermissions,\n  generateBlobSASQueryParameters,\n  SASQueryParameters,\n  ServiceGetUserDelegationKeyResponse\n} from '@azure/storage-blob';\nimport type { ITerminal } from '@rushstack/node-core-library';\nimport { CredentialCache, ICredentialCacheEntry, RushConstants } from '@rushstack/rush-sdk';\nimport { PrintUtilities } from '@rushstack/terminal';\n\n// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n// TODO: This is a temporary workaround; it should be reverted when we upgrade to \"@azure/identity\" version 2.x\n// import { AzureAuthorityHosts } from '@azure/identity';\n/**\n * @public\n */\nexport enum AzureAuthorityHosts {\n  AzureChina = 'https://login.chinacloudapi.cn',\n  AzureGermany = 'https://login.microsoftonline.de',\n  AzureGovernment = 'https://login.microsoftonline.us',\n  AzurePublicCloud = 'https://login.microsoftonline.com'\n}\n// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\n/**\n * @public\n */\nexport type AzureEnvironmentNames = keyof typeof AzureAuthorityHosts;\n\n/**\n * @public\n */\nexport interface IAzureStorageAuthenticationOptions {\n  storageContainerName: string;\n  storageAccountName: string;\n  azureEnvironment?: AzureEnvironmentNames;\n  isCacheWriteAllowed: boolean;\n}\n\nconst SAS_TTL_MILLISECONDS: number = 7 * 24 * 60 * 60 * 1000; // Seven days\n\n/**\n * @public\n */\nexport class AzureStorageAuthentication {\n  protected readonly _azureEnvironment: AzureEnvironmentNames;\n  protected readonly _storageAccountName: string;\n  protected readonly _storageContainerName: string;\n  protected readonly _isCacheWriteAllowedByConfiguration: boolean;\n\n  private __credentialCacheId: string | undefined;\n  private get _credentialCacheId(): string {\n    if (!this.__credentialCacheId) {\n      const cacheIdParts: string[] = [\n        'azure-blob-storage',\n        this._azureEnvironment,\n        this._storageAccountName,\n        this._storageContainerName\n      ];\n\n      if (this._isCacheWriteAllowedByConfiguration) {\n        cacheIdParts.push('cacheWriteAllowed');\n      }\n\n      this.__credentialCacheId = cacheIdParts.join('|');\n    }\n\n    return this.__credentialCacheId;\n  }\n\n  protected get _storageAccountUrl(): string {\n    return `https://${this._storageAccountName}.blob.core.windows.net/`;\n  }\n\n  public constructor(options: IAzureStorageAuthenticationOptions) {\n    this._storageAccountName = options.storageAccountName;\n    this._storageContainerName = options.storageContainerName;\n    this._azureEnvironment = options.azureEnvironment || 'AzurePublicCloud';\n    this._isCacheWriteAllowedByConfiguration = options.isCacheWriteAllowed;\n  }\n\n  public async updateCachedCredentialAsync(terminal: ITerminal, credential: string): Promise<void> {\n    await CredentialCache.usingAsync(\n      {\n        supportEditing: true\n      },\n      async (credentialsCache: CredentialCache) => {\n        credentialsCache.setCacheEntry(this._credentialCacheId, credential);\n        await credentialsCache.saveIfModifiedAsync();\n      }\n    );\n  }\n\n  /**\n   * Launches an interactive flow to renew a cached credential.\n   *\n   * @param terminal - The terminal to log output to\n   * @param onlyIfExistingCredentialExpiresAfter - If specified, and a cached credential exists that is still valid\n   * after the date specified, no action will be taken.\n   */\n  public async updateCachedCredentialInteractiveAsync(\n    terminal: ITerminal,\n    onlyIfExistingCredentialExpiresAfter?: Date\n  ): Promise<void> {\n    await CredentialCache.usingAsync(\n      {\n        supportEditing: true\n      },\n      async (credentialsCache: CredentialCache) => {\n        if (onlyIfExistingCredentialExpiresAfter) {\n          const existingCredentialExpiration: Date | undefined = credentialsCache.tryGetCacheEntry(\n            this._credentialCacheId\n          )?.expires;\n          if (\n            existingCredentialExpiration &&\n            existingCredentialExpiration > onlyIfExistingCredentialExpiresAfter\n          ) {\n            return;\n          }\n        }\n\n        const sasQueryParameters: SASQueryParameters = await this._getSasQueryParametersAsync(terminal);\n        const sasString: string = sasQueryParameters.toString();\n\n        credentialsCache.setCacheEntry(this._credentialCacheId, sasString, sasQueryParameters.expiresOn);\n        await credentialsCache.saveIfModifiedAsync();\n      }\n    );\n  }\n\n  public async deleteCachedCredentialsAsync(terminal: ITerminal): Promise<void> {\n    await CredentialCache.usingAsync(\n      {\n        supportEditing: true\n      },\n      async (credentialsCache: CredentialCache) => {\n        credentialsCache.deleteCacheEntry(this._credentialCacheId);\n        await credentialsCache.saveIfModifiedAsync();\n      }\n    );\n  }\n\n  public async tryGetCachedCredentialAsync(): Promise<string | undefined> {\n    let cacheEntry: ICredentialCacheEntry | undefined;\n    await CredentialCache.usingAsync(\n      {\n        supportEditing: false\n      },\n      (credentialsCache: CredentialCache) => {\n        cacheEntry = credentialsCache.tryGetCacheEntry(this._credentialCacheId);\n      }\n    );\n\n    const expirationTime: number | undefined = cacheEntry?.expires?.getTime();\n    if (expirationTime && expirationTime < Date.now()) {\n      throw new Error(\n        'Cached Azure Storage credentials have expired. ' +\n          `Update the credentials by running \"rush ${RushConstants.updateCloudCredentialsCommandName}\".`\n      );\n    } else {\n      return cacheEntry?.credential;\n    }\n  }\n\n  private async _getSasQueryParametersAsync(terminal: ITerminal): Promise<SASQueryParameters> {\n    const authorityHost: string | undefined = AzureAuthorityHosts[this._azureEnvironment];\n    if (!authorityHost) {\n      throw new Error(`Unexpected Azure environment: ${this._azureEnvironment}`);\n    }\n\n    const DeveloperSignOnClientId: string = '04b07795-8ddb-461a-bbee-02f9e1bf7b46';\n    const deviceCodeCredential: DeviceCodeCredential = new DeviceCodeCredential(\n      'organizations',\n      DeveloperSignOnClientId,\n      (deviceCodeInfo: DeviceCodeInfo) => {\n        PrintUtilities.printMessageInBox(deviceCodeInfo.message, terminal);\n      },\n      { authorityHost: authorityHost }\n    );\n    const blobServiceClient: BlobServiceClient = new BlobServiceClient(\n      this._storageAccountUrl,\n      deviceCodeCredential\n    );\n\n    const startsOn: Date = new Date();\n    const expires: Date = new Date(Date.now() + SAS_TTL_MILLISECONDS);\n    const key: ServiceGetUserDelegationKeyResponse = await blobServiceClient.getUserDelegationKey(\n      startsOn,\n      expires\n    );\n\n    const containerSasPermissions: ContainerSASPermissions = new ContainerSASPermissions();\n    containerSasPermissions.read = true;\n    containerSasPermissions.write = this._isCacheWriteAllowedByConfiguration;\n\n    const queryParameters: SASQueryParameters = generateBlobSASQueryParameters(\n      {\n        startsOn: startsOn,\n        expiresOn: expires,\n        permissions: containerSasPermissions,\n        containerName: this._storageContainerName\n      },\n      key,\n      this._storageAccountName\n    );\n\n    return queryParameters;\n  }\n}\n"]}