{"version":3,"file":"RushLifeCycle.js","sourceRoot":"","sources":["../../src/pluginFramework/RushLifeCycle.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,qCAAsE;AAoCtE;;;;GAIG;AACH,MAAa,kBAAkB;IAA/B;QACE;;WAEG;QACI,eAAU,GAAkC,IAAI,yBAAe,CACpE,CAAC,SAAS,CAAC,EACX,YAAY,CACb,CAAC;QAEF;;WAEG;QACI,8BAAyB,GAAoC,IAAI,yBAAe,CACrF,CAAC,SAAS,CAAC,EACX,2BAA2B,CAC5B,CAAC;QAEF;;WAEG;QACI,2BAAsB,GAA6C,IAAI,iBAAO,CAAC,CAAC,GAAW,EAAE,EAAE;YACpG,OAAO,IAAI,yBAAe,CAAiB,CAAC,SAAS,CAAC,EAAE,GAAG,CAAC,CAAC;QAC/D,CAAC,EAAE,wBAAwB,CAAC,CAAC;QAE7B;;WAEG;QACI,wBAAmB,GAAoC,IAAI,yBAAe,CAC/E,CAAC,SAAS,CAAC,EACX,qBAAqB,CACtB,CAAC;QAEF;;WAEG;QACI,qBAAgB,GAA6C,IAAI,iBAAO,CAAC,CAAC,GAAW,EAAE,EAAE;YAC9F,OAAO,IAAI,yBAAe,CAAiB,CAAC,SAAS,CAAC,EAAE,GAAG,CAAC,CAAC;QAC/D,CAAC,EAAE,kBAAkB,CAAC,CAAC;QAEvB;;WAEG;QACI,mBAAc,GAAuD,IAAI,2BAAiB,CAC/F,CAAC,eAAe,CAAC,EACjB,gBAAgB,CACjB,CAAC;IACJ,CAAC;CAAA;AA9CD,gDA8CC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { AsyncParallelHook, AsyncSeriesHook, HookMap } from 'tapable';\nimport type { ITelemetryData } from '../logic/Telemetry';\n\nimport type { PhasedCommandHooks } from './PhasedCommandHooks';\n\n/**\n * Information about the currently executing command provided to plugins.\n * @beta\n */\nexport interface IRushCommand {\n  /**\n   * The name of this command, as seen on the command line\n   */\n  readonly actionName: string;\n}\n\n/**\n * Information about the currently executing global script command (as defined in command-line.json) provided to plugins.\n * @beta\n */\nexport interface IGlobalCommand extends IRushCommand {\n  // Nothing added.\n}\n\n/**\n * Information about the currently executing phased script command (as defined in command-line.json, or default \"build\" or \"rebuild\") provided to plugins.\n * @beta\n */\nexport interface IPhasedCommand extends IRushCommand {\n  /**\n   * Hooks into the execution of the current phased command\n   * @alpha\n   */\n  readonly hooks: PhasedCommandHooks;\n}\n\n/**\n * Hooks into the lifecycle of the Rush process invocation that plugins may tap into.\n *\n * @beta\n */\nexport class RushLifecycleHooks {\n  /**\n   * The hook to run before executing any Rush CLI Command.\n   */\n  public initialize: AsyncSeriesHook<IRushCommand> = new AsyncSeriesHook<IRushCommand>(\n    ['command'],\n    'initialize'\n  );\n\n  /**\n   * The hook to run before executing any global Rush CLI Command (defined in command-line.json).\n   */\n  public runAnyGlobalCustomCommand: AsyncSeriesHook<IGlobalCommand> = new AsyncSeriesHook<IGlobalCommand>(\n    ['command'],\n    'runAnyGlobalCustomCommand'\n  );\n\n  /**\n   * A hook map to allow plugins to hook specific named global commands (defined in command-line.json) before execution.\n   */\n  public runGlobalCustomCommand: HookMap<AsyncSeriesHook<IGlobalCommand>> = new HookMap((key: string) => {\n    return new AsyncSeriesHook<IGlobalCommand>(['command'], key);\n  }, 'runGlobalCustomCommand');\n\n  /**\n   * The hook to run before executing any phased Rush CLI Command (defined in command-line.json, or the default \"build\" or \"rebuild\").\n   */\n  public runAnyPhasedCommand: AsyncSeriesHook<IPhasedCommand> = new AsyncSeriesHook<IPhasedCommand>(\n    ['command'],\n    'runAnyPhasedCommand'\n  );\n\n  /**\n   * A hook map to allow plugins to hook specific named phased commands (defined in command-line.json) before execution.\n   */\n  public runPhasedCommand: HookMap<AsyncSeriesHook<IPhasedCommand>> = new HookMap((key: string) => {\n    return new AsyncSeriesHook<IPhasedCommand>(['command'], key);\n  }, 'runPhasedCommand');\n\n  /**\n   * A hook to allow plugins to hook custom logic to process telemetry data.\n   */\n  public flushTelemetry: AsyncParallelHook<[ReadonlyArray<ITelemetryData>]> = new AsyncParallelHook(\n    ['telemetryData'],\n    'flushTelemetry'\n  );\n}\n"]}