{"version":3,"file":"DeployManager.js","sourceRoot":"","sources":["../../../src/logic/deploy/DeployManager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport colors from 'colors/safe';\nimport * as path from 'path';\nimport * as resolve from 'resolve';\nimport * as npmPacklist from 'npm-packlist';\nimport pnpmLinkBins from '@pnpm/link-bins';\n\n// (Used only by the legacy code fragment in the resolve.sync() hook below)\nimport * as fsForResolve from 'fs';\n\nimport ignore, { Ignore } from 'ignore';\nimport {\n  Path,\n  FileSystem,\n  PackageJsonLookup,\n  FileSystemStats,\n  Sort,\n  JsonFile,\n  IPackageJson,\n  AlreadyExistsBehavior,\n  InternalError,\n  NewlineKind,\n  Text\n} from '@rushstack/node-core-library';\nimport { DeployArchiver } from './DeployArchiver';\nimport { RushConfiguration } from '../../api/RushConfiguration';\nimport { SymlinkAnalyzer, ILinkInfo } from './SymlinkAnalyzer';\nimport { RushConfigurationProject } from '../../api/RushConfigurationProject';\nimport { DeployScenarioConfiguration, IDeployScenarioProjectJson } from './DeployScenarioConfiguration';\nimport { PnpmfileConfiguration } from '../pnpm/PnpmfileConfiguration';\nimport { matchesWithStar } from './Utils';\n\n// (@types/npm-packlist is missing this API)\ndeclare module 'npm-packlist' {\n  export class WalkerSync {\n    public readonly result: string[];\n    public constructor(opts: { path: string });\n    public start(): void;\n  }\n}\n\n/**\n * The deploy-matadata.json file format.\n */\nexport interface IDeployMetadataJson {\n  scenarioName: string;\n  mainProjectName: string;\n  projects: IProjectInfoJson[];\n  links: ILinkInfo[];\n}\n\n/**\n * Part of the deploy-matadata.json file format. Represents a Rush project to be deployed.\n */\ninterface IProjectInfoJson {\n  /**\n   * This path is relative to the deploy folder.\n   */\n  path: string;\n}\n\n/**\n * Stores additional information about folders being copied.\n * Only some of the IDeployState.foldersToCopy items will an IFolderInfo object.\n */\ninterface IFolderInfo {\n  /**\n   * This is the lookup key for IDeployState.folderInfosByPath.\n   * It is an absolute real path.\n   */\n  folderPath: string;\n  /**\n   * True if this is the package folder for a local Rush project.\n   */\n  isRushProject: boolean;\n\n  projectSettings?: IDeployScenarioProjectJson;\n}\n\n/**\n * This object tracks DeployManager state during a deployment.\n */\nexport interface IDeployState {\n  scenarioFilePath: string;\n\n  /**\n   * The parsed scenario config file, as defined by the \"deploy-scenario.schema.json\" JSON schema\n   */\n  scenarioConfiguration: DeployScenarioConfiguration;\n\n  mainProjectName: string;\n\n  /**\n   * The source folder that copying originates from.  Generally it is the repo root folder with rush.json.\n   */\n  sourceRootFolder: string;\n\n  /**\n   * The target folder for the deployment.  By default it will be \"common/deploy\".\n   */\n  targetRootFolder: string;\n\n  /**\n   * During the analysis stage, _collectFoldersRecursive() uses this set to collect the absolute paths\n   * of the package folders to be copied.  The copying is performed later by _deployFolder().\n   */\n  foldersToCopy: Set<string>;\n\n  /**\n   * Additional information about some of the foldersToCopy paths.\n   * The key is the absolute real path from foldersToCopy.\n   */\n  folderInfosByPath: Map<string, IFolderInfo>;\n\n  symlinkAnalyzer: SymlinkAnalyzer;\n\n  /**\n   * The pnpmfile configuration if using PNPM, otherwise undefined. The configuration will be used to\n   * transform the package.json prior to deploy.\n   */\n  pnpmfileConfiguration: PnpmfileConfiguration | undefined;\n\n  /**\n   * The desired path to be used when archiving the target folder. Supported file extensions: .zip.\n   */\n  createArchiveFilePath: string | undefined;\n}\n\n/**\n * Manages the business logic for the \"rush deploy\" command.\n */\nexport class DeployManager {\n  private readonly _rushConfiguration: RushConfiguration;\n  private readonly _packageJsonLookup: PackageJsonLookup;\n\n  public constructor(rushConfiguration: RushConfiguration) {\n    this._rushConfiguration = rushConfiguration;\n    this._packageJsonLookup = new PackageJsonLookup();\n  }\n\n  /**\n   * Recursively crawl the node_modules dependencies and collect the result in IDeployState.foldersToCopy.\n   */\n  private _collectFoldersRecursive(packageJsonFolderPath: string, deployState: IDeployState): void {\n    const packageJsonRealFolderPath: string = FileSystem.getRealPath(packageJsonFolderPath);\n\n    if (deployState.foldersToCopy.has(packageJsonRealFolderPath)) {\n      // we've already seen this folder\n      return;\n    }\n\n    deployState.foldersToCopy.add(packageJsonRealFolderPath);\n\n    const originalPackageJson: IPackageJson = JsonFile.load(\n      path.join(packageJsonRealFolderPath, 'package.json')\n    );\n\n    const sourceFolderInfo: IFolderInfo | undefined = deployState.folderInfosByPath.get(\n      FileSystem.getRealPath(packageJsonFolderPath)\n    );\n\n    // Transform packageJson using pnpmfile.js if available\n    const packageJson: IPackageJson = deployState.pnpmfileConfiguration\n      ? deployState.pnpmfileConfiguration.transform(originalPackageJson)\n      : originalPackageJson;\n\n    // Union of keys from regular dependencies, peerDependencies, optionalDependencies\n    // (and possibly devDependencies if includeDevDependencies=true)\n    const dependencyNamesToProcess: Set<string> = new Set<string>();\n\n    // Just the keys from optionalDependencies and peerDependencies\n    const optionalDependencyNames: Set<string> = new Set<string>();\n\n    for (const name of Object.keys(packageJson.dependencies || {})) {\n      dependencyNamesToProcess.add(name);\n    }\n    if (deployState.scenarioConfiguration.json.includeDevDependencies && sourceFolderInfo?.isRushProject) {\n      for (const name of Object.keys(packageJson.devDependencies || {})) {\n        dependencyNamesToProcess.add(name);\n      }\n    }\n    for (const name of Object.keys(packageJson.peerDependencies || {})) {\n      dependencyNamesToProcess.add(name);\n      optionalDependencyNames.add(name); // consider peers optional, since they are so frequently broken\n    }\n    for (const name of Object.keys(packageJson.optionalDependencies || {})) {\n      dependencyNamesToProcess.add(name);\n      optionalDependencyNames.add(name);\n    }\n\n    if (sourceFolderInfo && sourceFolderInfo.isRushProject) {\n      const projectSettings: IDeployScenarioProjectJson | undefined = sourceFolderInfo.projectSettings;\n      if (projectSettings) {\n        this._applyDependencyFilters(\n          dependencyNamesToProcess,\n          projectSettings.additionalDependenciesToInclude,\n          projectSettings.dependenciesToExclude\n        );\n      }\n    }\n\n    for (const dependencyPackageName of dependencyNamesToProcess) {\n      try {\n        this._traceResolveDependency(dependencyPackageName, packageJsonRealFolderPath, deployState);\n      } catch (resolveErr) {\n        if (\n          (resolveErr as NodeJS.ErrnoException).code === 'MODULE_NOT_FOUND' &&\n          optionalDependencyNames.has(dependencyPackageName)\n        ) {\n          // Ignore missing optional dependency\n          continue;\n        }\n        throw resolveErr;\n      }\n    }\n\n    if (\n      this._rushConfiguration.packageManager === 'pnpm' &&\n      !deployState.scenarioConfiguration.json.omitPnpmWorkaroundLinks\n    ) {\n      // Replicate the PNPM workaround links.\n\n      // Only apply this logic for packages that were actually installed under the common/temp folder.\n      if (Path.isUnder(packageJsonFolderPath, this._rushConfiguration.commonTempFolder)) {\n        try {\n          // The PNPM workaround links are created in this folder.  We will resolve the current package\n          // from that location and collect any additional links encountered along the way.\n          const pnpmDotFolderPath: string = path.join(\n            this._rushConfiguration.commonTempFolder,\n            'node_modules',\n            '.pnpm'\n          );\n\n          // TODO: Investigate how package aliases are handled by PNPM in this case.  For example:\n          //\n          // \"dependencies\": {\n          //   \"alias-name\": \"npm:real-name@^1.2.3\"\n          // }\n          this._traceResolveDependency(packageJson.name, pnpmDotFolderPath, deployState);\n        } catch (resolveErr) {\n          if ((resolveErr as NodeJS.ErrnoException).code === 'MODULE_NOT_FOUND') {\n            // The workaround link isn't guaranteed to exist, so ignore if it's missing\n            // NOTE: If you encounter this warning a lot, please report it to the Rush maintainers.\n            console.log('Ignoring missing PNPM workaround link for ' + packageJsonFolderPath);\n          }\n        }\n      }\n    }\n  }\n\n  private _applyDependencyFilters(\n    allDependencyNames: Set<string>,\n    additionalDependenciesToInclude: string[] = [],\n    dependenciesToExclude: string[] = []\n  ): Set<string> {\n    // Track packages that got added/removed for reporting purposes\n    const extraIncludedPackageNames: string[] = [];\n    const extraExcludedPackageNames: string[] = [];\n\n    for (const patternWithStar of dependenciesToExclude) {\n      for (const dependency of allDependencyNames) {\n        if (matchesWithStar(patternWithStar, dependency)) {\n          if (allDependencyNames.delete(dependency)) {\n            extraExcludedPackageNames.push(dependency);\n          }\n        }\n      }\n    }\n\n    for (const dependencyToInclude of additionalDependenciesToInclude) {\n      if (!allDependencyNames.has(dependencyToInclude)) {\n        allDependencyNames.add(dependencyToInclude);\n        extraIncludedPackageNames.push(dependencyToInclude);\n      }\n    }\n\n    if (extraIncludedPackageNames.length > 0) {\n      extraIncludedPackageNames.sort();\n      console.log('Extra dependencies included by settings: ' + extraIncludedPackageNames.join(', '));\n    }\n\n    if (extraExcludedPackageNames.length > 0) {\n      extraExcludedPackageNames.sort();\n      console.log('Extra dependencies excluded by settings: ' + extraExcludedPackageNames.join(', '));\n    }\n\n    return allDependencyNames;\n  }\n\n  private _traceResolveDependency(\n    packageName: string,\n    startingFolder: string,\n    deployState: IDeployState\n  ): void {\n    // The \"resolve\" library models the Node.js require() API, which gives precedence to \"core\" system modules\n    // over an NPM package with the same name.  But we are traversing package.json dependencies, which never\n    // refer to system modules.  Appending a \"/\" forces require() to look for the NPM package.\n    const resolveSuffix: string = packageName + resolve.isCore(packageName) ? '/' : '';\n\n    const resolvedDependency: string = resolve.sync(packageName + resolveSuffix, {\n      basedir: startingFolder,\n      preserveSymlinks: false,\n      packageFilter: (pkg, dir) => {\n        // point \"main\" at a file that is guaranteed to exist\n        // This helps resolve packages such as @types/node that have no entry point\n        pkg.main = './package.json';\n        return pkg;\n      },\n      realpathSync: (filePath) => {\n        // This code fragment is a modification of the documented default implementation from the \"fs-extra\" docs\n        try {\n          const resolvedPath: string = fsForResolve.realpathSync(filePath);\n\n          deployState.symlinkAnalyzer.analyzePath(filePath);\n          return resolvedPath;\n        } catch (realpathErr) {\n          if ((realpathErr as NodeJS.ErrnoException).code !== 'ENOENT') {\n            throw realpathErr;\n          }\n        }\n        return filePath;\n      }\n    });\n\n    if (!resolvedDependency) {\n      // This should not happen, since the resolve.sync() docs say it will throw an exception instead\n      throw new InternalError(`Error resolving ${packageName} from ${startingFolder}`);\n    }\n\n    const dependencyPackageFolderPath: string | undefined =\n      this._packageJsonLookup.tryGetPackageFolderFor(resolvedDependency);\n\n    if (!dependencyPackageFolderPath) {\n      throw new Error(`Error finding package.json folder for ${resolvedDependency}`);\n    }\n\n    this._collectFoldersRecursive(dependencyPackageFolderPath, deployState);\n  }\n\n  /**\n   * Maps a file path from IDeployState.sourceRootFolder --> IDeployState.targetRootFolder\n   *\n   * Example input: \"C:\\MyRepo\\libraries\\my-lib\"\n   * Example output: \"C:\\MyRepo\\common\\deploy\\libraries\\my-lib\"\n   */\n  private _remapPathForDeployFolder(absolutePathInSourceFolder: string, deployState: IDeployState): string {\n    if (!Path.isUnderOrEqual(absolutePathInSourceFolder, deployState.sourceRootFolder)) {\n      throw new Error(\n        `Source path is not under ${deployState.sourceRootFolder}\\n${absolutePathInSourceFolder}`\n      );\n    }\n    const relativePath: string = path.relative(deployState.sourceRootFolder, absolutePathInSourceFolder);\n    const absolutePathInTargetFolder: string = path.join(deployState.targetRootFolder, relativePath);\n    return absolutePathInTargetFolder;\n  }\n\n  /**\n   * Maps a file path from IDeployState.sourceRootFolder --> relative path\n   *\n   * Example input: \"C:\\MyRepo\\libraries\\my-lib\"\n   * Example output: \"libraries/my-lib\"\n   */\n  private _remapPathForDeployMetadata(absolutePathInSourceFolder: string, deployState: IDeployState): string {\n    if (!Path.isUnderOrEqual(absolutePathInSourceFolder, deployState.sourceRootFolder)) {\n      throw new Error(\n        `Source path is not under ${deployState.sourceRootFolder}\\n${absolutePathInSourceFolder}`\n      );\n    }\n    const relativePath: string = path.relative(deployState.sourceRootFolder, absolutePathInSourceFolder);\n    return Text.replaceAll(relativePath, '\\\\', '/');\n  }\n\n  /**\n   * Copy one package folder to the deployment target folder.\n   */\n  private _deployFolder(sourceFolderPath: string, deployState: IDeployState): void {\n    let useNpmIgnoreFilter: boolean = false;\n\n    if (!deployState.scenarioConfiguration.json.includeNpmIgnoreFiles) {\n      const sourceFolderInfo: IFolderInfo | undefined = deployState.folderInfosByPath.get(\n        FileSystem.getRealPath(sourceFolderPath)\n      );\n      if (sourceFolderInfo) {\n        if (sourceFolderInfo.isRushProject) {\n          useNpmIgnoreFilter = true;\n        }\n      }\n    }\n\n    const targetFolderPath: string = this._remapPathForDeployFolder(sourceFolderPath, deployState);\n\n    if (useNpmIgnoreFilter) {\n      // Use npm-packlist to filter the files.  Using the WalkerSync class (instead of the sync() API) ensures\n      // that \"bundledDependencies\" are not included.\n      const walker: npmPacklist.WalkerSync = new npmPacklist.WalkerSync({\n        path: sourceFolderPath\n      });\n      walker.start();\n      const npmPackFiles: string[] = walker.result;\n\n      const alreadyCopiedSourcePaths: Set<string> = new Set();\n\n      for (const npmPackFile of npmPackFiles) {\n        // In issue https://github.com/microsoft/rushstack/issues/2121 we found that npm-packlist sometimes returns\n        // duplicate file paths, for example:\n        //\n        //   'dist//index.js'\n        //   'dist/index.js'\n        //\n        // We can detect the duplicates by comparing the path.resolve() result.\n        const copySourcePath: string = path.resolve(sourceFolderPath, npmPackFile);\n        if (alreadyCopiedSourcePaths.has(copySourcePath)) {\n          continue;\n        }\n        alreadyCopiedSourcePaths.add(copySourcePath);\n\n        const copyDestinationPath: string = path.join(targetFolderPath, npmPackFile);\n\n        if (deployState.symlinkAnalyzer.analyzePath(copySourcePath).kind !== 'link') {\n          FileSystem.ensureFolder(path.dirname(copyDestinationPath));\n\n          FileSystem.copyFile({\n            sourcePath: copySourcePath,\n            destinationPath: copyDestinationPath,\n            alreadyExistsBehavior: AlreadyExistsBehavior.Error\n          });\n        }\n      }\n    } else {\n      // use a simplistic \"ignore\" ruleset to filter the files\n      const ignoreFilter: Ignore = ignore();\n      ignoreFilter.add([\n        // The top-level node_modules folder is always excluded\n        '/node_modules',\n        // Also exclude well-known folders that can contribute a lot of unnecessary files\n        '**/.git',\n        '**/.svn',\n        '**/.hg',\n        '**/.DS_Store'\n      ]);\n\n      FileSystem.copyFiles({\n        sourcePath: sourceFolderPath,\n        destinationPath: targetFolderPath,\n        alreadyExistsBehavior: AlreadyExistsBehavior.Error,\n        filter: (src: string, dest: string) => {\n          const relativeSrc: string = path.relative(sourceFolderPath, src);\n          if (!relativeSrc) {\n            return true; // don't filter sourceFolderPath itself\n          }\n\n          if (ignoreFilter.ignores(relativeSrc)) {\n            return false;\n          }\n\n          const stats: FileSystemStats = FileSystem.getLinkStatistics(src);\n          if (stats.isSymbolicLink()) {\n            deployState.symlinkAnalyzer.analyzePath(src);\n            return false;\n          } else {\n            return true;\n          }\n        }\n      });\n    }\n  }\n\n  /**\n   * Create a symlink as described by the ILinkInfo object.\n   */\n  private _deploySymlink(originalLinkInfo: ILinkInfo, deployState: IDeployState): boolean {\n    const linkInfo: ILinkInfo = {\n      kind: originalLinkInfo.kind,\n      linkPath: this._remapPathForDeployFolder(originalLinkInfo.linkPath, deployState),\n      targetPath: this._remapPathForDeployFolder(originalLinkInfo.targetPath, deployState)\n    };\n\n    // Has the link target been created yet?  If not, we should try again later\n    if (!FileSystem.exists(linkInfo.targetPath)) {\n      return false;\n    }\n\n    const newLinkFolder: string = path.dirname(linkInfo.linkPath);\n    FileSystem.ensureFolder(newLinkFolder);\n\n    // Link to the relative path for symlinks\n    const relativeTargetPath: string = path.relative(newLinkFolder, linkInfo.targetPath);\n\n    // NOTE: This logic is based on NpmLinkManager._createSymlink()\n    if (process.platform === 'win32') {\n      if (linkInfo.kind === 'folderLink') {\n        // For directories, we use a Windows \"junction\".  On Unix, this produces a regular symlink.\n        FileSystem.createSymbolicLinkJunction({\n          linkTargetPath: relativeTargetPath,\n          newLinkPath: linkInfo.linkPath\n        });\n      } else {\n        // For files, we use a Windows \"hard link\", because creating a symbolic link requires\n        // administrator permission.\n\n        // NOTE: We cannot use the relative path for hard links\n        FileSystem.createHardLink({\n          linkTargetPath: relativeTargetPath,\n          newLinkPath: linkInfo.linkPath\n        });\n      }\n    } else {\n      // However hard links seem to cause build failures on Mac, so for all other operating systems\n      // we use symbolic links for this case.\n      if (linkInfo.kind === 'folderLink') {\n        FileSystem.createSymbolicLinkFolder({\n          linkTargetPath: relativeTargetPath,\n          newLinkPath: linkInfo.linkPath\n        });\n      } else {\n        FileSystem.createSymbolicLinkFile({\n          linkTargetPath: relativeTargetPath,\n          newLinkPath: linkInfo.linkPath\n        });\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Recursively apply the \"additionalProjectToInclude\" setting.\n   */\n  private _collectAdditionalProjectsToInclude(\n    includedProjectNamesSet: Set<string>,\n    projectName: string,\n    deployState: IDeployState\n  ): void {\n    if (includedProjectNamesSet.has(projectName)) {\n      return;\n    }\n    includedProjectNamesSet.add(projectName);\n\n    const projectSettings: IDeployScenarioProjectJson | undefined =\n      deployState.scenarioConfiguration.projectJsonsByName.get(projectName);\n    if (projectSettings && projectSettings.additionalProjectsToInclude) {\n      for (const additionalProjectToInclude of projectSettings.additionalProjectsToInclude) {\n        this._collectAdditionalProjectsToInclude(\n          includedProjectNamesSet,\n          additionalProjectToInclude,\n          deployState\n        );\n      }\n    }\n  }\n\n  /**\n   * Write the common/deploy/deploy-metadata.json file.\n   */\n  private _writeDeployMetadata(deployState: IDeployState): void {\n    const deployMetadataFilePath: string = path.join(deployState.targetRootFolder, 'deploy-metadata.json');\n\n    const deployMetadataJson: IDeployMetadataJson = {\n      scenarioName: path.basename(deployState.scenarioFilePath),\n      mainProjectName: deployState.mainProjectName,\n      projects: [],\n      links: []\n    };\n\n    deployState.folderInfosByPath.forEach((folderInfo) => {\n      if (!folderInfo.isRushProject) {\n        // It's not a Rush project\n        return;\n      }\n\n      if (!deployState.foldersToCopy.has(folderInfo.folderPath)) {\n        // It's not something we crawled\n        return;\n      }\n\n      deployMetadataJson.projects.push({\n        path: this._remapPathForDeployMetadata(folderInfo.folderPath, deployState)\n      });\n    });\n\n    // Remap the links to be relative to target folder\n    for (const absoluteLinkInfo of deployState.symlinkAnalyzer.reportSymlinks()) {\n      const relativeInfo: ILinkInfo = {\n        kind: absoluteLinkInfo.kind,\n        linkPath: this._remapPathForDeployMetadata(absoluteLinkInfo.linkPath, deployState),\n        targetPath: this._remapPathForDeployMetadata(absoluteLinkInfo.targetPath, deployState)\n      };\n      deployMetadataJson.links.push(relativeInfo);\n    }\n\n    JsonFile.save(deployMetadataJson, deployMetadataFilePath, {\n      newlineConversion: NewlineKind.OsDefault\n    });\n  }\n\n  private async _makeBinLinksAsync(deployState: IDeployState): Promise<void> {\n    for (const [, folderInfo] of deployState.folderInfosByPath) {\n      if (!folderInfo.isRushProject) {\n        return;\n      }\n\n      const deployedPath: string = this._remapPathForDeployMetadata(folderInfo.folderPath, deployState);\n      const projectFolder: string = path.join(deployState.targetRootFolder, deployedPath, 'node_modules');\n      const projectBinFolder: string = path.join(\n        deployState.targetRootFolder,\n        deployedPath,\n        'node_modules',\n        '.bin'\n      );\n\n      await pnpmLinkBins(projectFolder, projectBinFolder, {\n        warn: (msg: string) => console.warn(colors.yellow(msg))\n      });\n    }\n  }\n\n  private async _prepareDeploymentAsync(deployState: IDeployState): Promise<void> {\n    // Calculate the set with additionalProjectsToInclude\n    const includedProjectNamesSet: Set<string> = new Set();\n    this._collectAdditionalProjectsToInclude(\n      includedProjectNamesSet,\n      deployState.mainProjectName,\n      deployState\n    );\n\n    for (const rushProject of this._rushConfiguration.projects) {\n      const projectFolder: string = FileSystem.getRealPath(rushProject.projectFolder);\n      const projectSettings: IDeployScenarioProjectJson | undefined =\n        deployState.scenarioConfiguration.projectJsonsByName.get(rushProject.packageName);\n\n      deployState.folderInfosByPath.set(projectFolder, {\n        folderPath: projectFolder,\n        isRushProject: true,\n        projectSettings\n      });\n    }\n\n    for (const projectName of includedProjectNamesSet) {\n      console.log(colors.cyan('Analyzing project: ') + projectName);\n      const project: RushConfigurationProject | undefined =\n        this._rushConfiguration.getProjectByName(projectName);\n\n      if (!project) {\n        throw new Error(`The project ${projectName} is not defined in rush.json`);\n      }\n\n      this._collectFoldersRecursive(project.projectFolder, deployState);\n\n      console.log();\n    }\n\n    Sort.sortSet(deployState.foldersToCopy);\n\n    console.log('Copying folders...');\n    for (const folderToCopy of deployState.foldersToCopy) {\n      this._deployFolder(folderToCopy, deployState);\n    }\n\n    console.log('Writing deploy-metadata.json');\n    this._writeDeployMetadata(deployState);\n\n    if (deployState.scenarioConfiguration.json.linkCreation === 'script') {\n      console.log('Copying create-links.js');\n      FileSystem.copyFile({\n        sourcePath: path.join(__dirname, '../../scripts/create-links.js'),\n        destinationPath: path.join(deployState.targetRootFolder, 'create-links.js'),\n        alreadyExistsBehavior: AlreadyExistsBehavior.Error\n      });\n    }\n\n    if (deployState.scenarioConfiguration.json.linkCreation === 'default') {\n      console.log('Creating symlinks...');\n      const linksToCopy: ILinkInfo[] = deployState.symlinkAnalyzer.reportSymlinks();\n\n      for (const linkToCopy of linksToCopy) {\n        if (!this._deploySymlink(linkToCopy, deployState)) {\n          // TODO: If a symbolic link points to another symbolic link, then we should order the operations\n          // so that the intermediary target is created first.  This case was procrastinated because it does\n          // not seem to occur in practice.  If you encounter this, please report it.\n          throw new InternalError('Target does not exist: ' + JSON.stringify(linkToCopy, undefined, 2));\n        }\n      }\n\n      await this._makeBinLinksAsync(deployState);\n    }\n    if (deployState.scenarioConfiguration.json.folderToCopy !== undefined) {\n      const sourceFolderPath: string = path.resolve(\n        this._rushConfiguration.rushJsonFolder,\n        deployState.scenarioConfiguration.json.folderToCopy\n      );\n      FileSystem.copyFiles({\n        sourcePath: sourceFolderPath,\n        destinationPath: deployState.targetRootFolder,\n        alreadyExistsBehavior: AlreadyExistsBehavior.Error\n      });\n    }\n    await DeployArchiver.createArchiveAsync(deployState);\n  }\n\n  /**\n   * The main entry point for performing a deployment.\n   */\n  public async deployAsync(\n    mainProjectName: string | undefined,\n    scenarioName: string | undefined,\n    overwriteExisting: boolean,\n    targetFolderParameter: string | undefined,\n    createArchiveFilePath: string | undefined\n  ): Promise<void> {\n    const scenarioFilePath: string = DeployScenarioConfiguration.getConfigFilePath(\n      scenarioName,\n      this._rushConfiguration\n    );\n    const scenarioConfiguration: DeployScenarioConfiguration = DeployScenarioConfiguration.loadFromFile(\n      scenarioFilePath,\n      this._rushConfiguration\n    );\n\n    if (!mainProjectName) {\n      if (scenarioConfiguration.json.deploymentProjectNames.length === 1) {\n        // If there is only one project, then \"--project\" is optional\n        mainProjectName = scenarioConfiguration.json.deploymentProjectNames[0];\n      } else {\n        throw new Error(\n          `The ${path.basename(scenarioFilePath)} configuration specifies multiple items for` +\n            ` \"deploymentProjectNames\". Use the \"--project\" parameter to indicate the project to be deployed.`\n        );\n      }\n    } else {\n      if (scenarioConfiguration.json.deploymentProjectNames.indexOf(mainProjectName) < 0) {\n        throw new Error(\n          `The project \"${mainProjectName}\" does not appear in the list of \"deploymentProjectNames\"` +\n            ` from ${path.basename(scenarioFilePath)}.`\n        );\n      }\n    }\n\n    let targetRootFolder: string;\n    if (targetFolderParameter) {\n      targetRootFolder = path.resolve(targetFolderParameter);\n      if (!FileSystem.exists(targetRootFolder)) {\n        throw new Error(\n          'The specified target folder does not exist: ' + JSON.stringify(targetFolderParameter)\n        );\n      }\n    } else {\n      targetRootFolder = path.join(this._rushConfiguration.commonFolder, 'deploy');\n    }\n    const sourceRootFolder: string = this._rushConfiguration.rushJsonFolder;\n\n    console.log(colors.cyan('Deploying to target folder:  ') + targetRootFolder);\n    console.log(colors.cyan('Main project for deployment: ') + mainProjectName + '\\n');\n\n    FileSystem.ensureFolder(targetRootFolder);\n\n    // Is the target folder empty?\n    if (FileSystem.readFolderItemNames(targetRootFolder).length > 0) {\n      if (overwriteExisting) {\n        console.log('Deleting target folder contents because \"--overwrite\" was specified...');\n        FileSystem.ensureEmptyFolder(targetRootFolder);\n        console.log();\n      } else {\n        throw new Error(\n          'The deploy target folder is not empty. You can specify \"--overwrite\"' +\n            ' to recursively delete all folder contents.'\n        );\n      }\n    }\n\n    // If create archive is set, ensure it has a legal extension\n    if (createArchiveFilePath && path.extname(createArchiveFilePath) !== '.zip') {\n      throw new Error(\n        'The \"--create-archive\" parameter currently only supports archives with the .zip file extension.'\n      );\n    }\n\n    const deployState: IDeployState = {\n      scenarioFilePath,\n      scenarioConfiguration,\n      mainProjectName,\n      sourceRootFolder,\n      targetRootFolder,\n      foldersToCopy: new Set(),\n      folderInfosByPath: new Map(),\n      symlinkAnalyzer: new SymlinkAnalyzer(),\n      pnpmfileConfiguration:\n        this._rushConfiguration.packageManager === 'pnpm'\n          ? new PnpmfileConfiguration(this._rushConfiguration)\n          : undefined,\n      createArchiveFilePath\n    };\n\n    await this._prepareDeploymentAsync(deployState);\n\n    console.log('\\n' + colors.green('The operation completed successfully.'));\n  }\n}\n"]}