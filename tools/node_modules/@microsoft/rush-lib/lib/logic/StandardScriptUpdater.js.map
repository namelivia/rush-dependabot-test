{"version":3,"file":"StandardScriptUpdater.js","sourceRoot":"","sources":["../../src/logic/StandardScriptUpdater.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;;;;;;;;;;;;;;;;;;;;;AAE3D,2CAA6B;AAC7B,oEAAgE;AAIhE;;;GAGG;AACH,MAAa,qBAAqB;IAOhC;;;OAGG;IACI,MAAM,CAAC,MAAM,CAAC,iBAAoC;QACvD,IAAI,UAAU,GAAY,KAAK,CAAC;QAChC,KAAK,MAAM,UAAU,IAAI,qBAAqB,CAAC,YAAY,EAAE;YAC3D,IAAI,qBAAqB,CAAC,oBAAoB,CAAC,UAAU,EAAE,iBAAiB,EAAE,KAAK,CAAC,EAAE;gBACpF,UAAU,GAAG,IAAI,CAAC;aACnB;SACF;QAED,IAAI,UAAU,EAAE;YACd,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC,oCAAoC;SACpD;QACD,OAAO,UAAU,CAAC;IACpB,CAAC;IAED;;;OAGG;IACI,MAAM,CAAC,QAAQ,CAAC,iBAAoC;QACzD,KAAK,MAAM,UAAU,IAAI,qBAAqB,CAAC,YAAY,EAAE;YAC3D,qBAAqB,CAAC,oBAAoB,CAAC,UAAU,EAAE,iBAAiB,EAAE,IAAI,CAAC,CAAC;SACjF;IACH,CAAC;IAED;;;;OAIG;IACK,MAAM,CAAC,oBAAoB,CACjC,UAAkB,EAClB,iBAAoC,EACpC,kBAA2B;QAE3B,MAAM,cAAc,GAAW,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,mBAAmB,EAAE,UAAU,CAAC,CAAC;QAC5F,MAAM,cAAc,GAAW,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,YAAY,EAAE,UAAU,CAAC,CAAC;QAEjF,8BAAU,CAAC,YAAY,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,CAAC;QAE/D,0BAA0B;QAC1B,IAAI,YAAY,GAAY,KAAK,CAAC;QAElC,IAAI,8BAAU,CAAC,MAAM,CAAC,cAAc,CAAC,EAAE;YACrC,MAAM,aAAa,GAAW,8BAAU,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC;YAClE,MAAM,aAAa,GAAW,8BAAU,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC;YAElE,MAAM,gBAAgB,GAAW,qBAAqB,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;YACjF,MAAM,gBAAgB,GAAW,qBAAqB,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;YAEjF,IAAI,gBAAgB,KAAK,gBAAgB,EAAE;gBACzC,YAAY,GAAG,IAAI,CAAC;aACrB;SACF;QAED,IAAI,CAAC,YAAY,EAAE;YACjB,IAAI,kBAAkB,EAAE;gBACtB,MAAM,IAAI,KAAK,CACb,uEAAuE;oBACrE,2EAA2E,CAC9E,CAAC;aACH;iBAAM;gBACL,OAAO,CAAC,GAAG,CAAC,oCAAoC,cAAc,GAAG,CAAC,CAAC;gBACnE,8BAAU,CAAC,QAAQ,CAAC;oBAClB,UAAU,EAAE,cAAc;oBAC1B,eAAe,EAAE,cAAc;iBAChC,CAAC,CAAC;aACJ;SACF;QAED,OAAO,CAAC,YAAY,CAAC;IACvB,CAAC;IAEO,MAAM,CAAC,UAAU,CAAC,OAAe;QACvC,iDAAiD;QACjD,OAAO,CACL,wBAAI,CAAC,WAAW,CAAC,OAAO,CAAC;YACvB,6BAA6B;aAC5B,KAAK,CAAC,IAAI,CAAC;aACX,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;aACzB,IAAI,CAAC,IAAI,CAAC,CACd,CAAC;IACJ,CAAC;;AA5FH,sDA6FC;AA5FyB,kCAAY,GAAa;IAC/C,gBAAgB;IAChB,qBAAqB;IACrB,sBAAsB;CACvB,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as path from 'path';\nimport { Text, FileSystem } from '@rushstack/node-core-library';\n\nimport { RushConfiguration } from '../api/RushConfiguration';\n\n/**\n * Checks whether the common/scripts files are up to date, and recopies them if needed.\n * This is used by the \"rush install\" and \"rush update\" commands.\n */\nexport class StandardScriptUpdater {\n  private static readonly _scriptNames: string[] = [\n    'install-run.js',\n    'install-run-rush.js',\n    'install-run-rushx.js'\n  ];\n\n  /**\n   * Recopy the scripts if the scripts are out of date.\n   * Used by \"rush update\".\n   */\n  public static update(rushConfiguration: RushConfiguration): boolean {\n    let anyChanges: boolean = false;\n    for (const scriptName of StandardScriptUpdater._scriptNames) {\n      if (StandardScriptUpdater._updateScriptOrThrow(scriptName, rushConfiguration, false)) {\n        anyChanges = true;\n      }\n    }\n\n    if (anyChanges) {\n      console.log(); // print a newline after the notices\n    }\n    return anyChanges;\n  }\n\n  /**\n   * Throw an exception if the scripts are out of date.\n   * Used by \"rush install\".\n   */\n  public static validate(rushConfiguration: RushConfiguration): void {\n    for (const scriptName of StandardScriptUpdater._scriptNames) {\n      StandardScriptUpdater._updateScriptOrThrow(scriptName, rushConfiguration, true);\n    }\n  }\n\n  /**\n   * Compares a single script in the common/script folder to see if it needs to be updated.\n   * If throwInsteadOfCopy=false, then an outdated or missing script will be recopied;\n   * otherwise, an exception is thrown.\n   */\n  private static _updateScriptOrThrow(\n    scriptName: string,\n    rushConfiguration: RushConfiguration,\n    throwInsteadOfCopy: boolean\n  ): boolean {\n    const targetFilePath: string = path.join(rushConfiguration.commonScriptsFolder, scriptName);\n    const sourceFilePath: string = path.resolve(__dirname, '../scripts', scriptName);\n\n    FileSystem.ensureFolder(rushConfiguration.commonScriptsFolder);\n\n    // Are the files the same?\n    let filesAreSame: boolean = false;\n\n    if (FileSystem.exists(targetFilePath)) {\n      const sourceContent: string = FileSystem.readFile(sourceFilePath);\n      const targetContent: string = FileSystem.readFile(targetFilePath);\n\n      const sourceNormalized: string = StandardScriptUpdater._normalize(sourceContent);\n      const targetNormalized: string = StandardScriptUpdater._normalize(targetContent);\n\n      if (sourceNormalized === targetNormalized) {\n        filesAreSame = true;\n      }\n    }\n\n    if (!filesAreSame) {\n      if (throwInsteadOfCopy) {\n        throw new Error(\n          'The standard files in the \"common/scripts\" folders need to be updated' +\n            ' for this Rush version.  Please run \"rush update\" and commit the changes.'\n        );\n      } else {\n        console.log(`Script is out of date; updating \"${targetFilePath}\"`);\n        FileSystem.copyFile({\n          sourcePath: sourceFilePath,\n          destinationPath: targetFilePath\n        });\n      }\n    }\n\n    return !filesAreSame;\n  }\n\n  private static _normalize(content: string): string {\n    // Ignore newline differences from .gitattributes\n    return (\n      Text.convertToLf(content)\n        // Ignore trailing whitespace\n        .split('\\n')\n        .map((x) => x.trimRight())\n        .join('\\n')\n    );\n  }\n}\n"]}