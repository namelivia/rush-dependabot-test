{"version":3,"file":"AsyncOperationQueue.js","sourceRoot":"","sources":["../../../src/logic/operations/AsyncOperationQueue.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { OperationExecutionRecord } from './OperationExecutionRecord';\nimport { OperationStatus } from './OperationStatus';\n\n/**\n * Implmentation of the async iteration protocol for a collection of IOperation objects.\n * The async iterator will wait for an operation to be ready for execution, or terminate if there are no more operations.\n *\n * @remarks\n * If the caller does not update dependencies prior to invoking `next()` on the iterator again,\n * it must manually invoke `assignOperations()` after performing the updates, otherwise iterators will\n * stall until another operations completes.\n */\nexport class AsyncOperationQueue\n  implements AsyncIterable<OperationExecutionRecord>, AsyncIterator<OperationExecutionRecord>\n{\n  private readonly _queue: OperationExecutionRecord[];\n  private readonly _pendingIterators: ((result: IteratorResult<OperationExecutionRecord>) => void)[];\n\n  /**\n   * @param operations - The set of operations to be executed\n   * @param sortFn - A function that sorts operations in reverse priority order:\n   *   - Returning a positive value indicates that `a` should execute before `b`.\n   *   - Returning a negative value indicates that `b` should execute before `a`.\n   *   - Returning 0 indicates no preference.\n   */\n  public constructor(operations: Iterable<OperationExecutionRecord>, sortFn: IOperationSortFunction) {\n    this._queue = computeTopologyAndSort(operations, sortFn);\n    this._pendingIterators = [];\n  }\n\n  /**\n   * For use with `for await (const operation of taskQueue)`\n   * @see {AsyncIterator}\n   */\n  public next(): Promise<IteratorResult<OperationExecutionRecord>> {\n    const { _pendingIterators: waitingIterators } = this;\n\n    const promise: Promise<IteratorResult<OperationExecutionRecord>> = new Promise(\n      (resolve: (result: IteratorResult<OperationExecutionRecord>) => void) => {\n        waitingIterators.push(resolve);\n      }\n    );\n\n    this.assignOperations();\n\n    return promise;\n  }\n\n  /**\n   * Routes ready operations with 0 dependencies to waiting iterators. Normally invoked as part of `next()`, but\n   * if the caller does not update operation dependencies prior to calling `next()`, may need to be invoked manually.\n   */\n  public assignOperations(): void {\n    const { _queue: queue, _pendingIterators: waitingIterators } = this;\n\n    // By iterating in reverse order we do less array shuffling when removing operations\n    for (let i: number = queue.length - 1; waitingIterators.length > 0 && i >= 0; i--) {\n      const operation: OperationExecutionRecord = queue[i];\n\n      if (operation.status === OperationStatus.Blocked) {\n        // It shouldn't be on the queue, remove it\n        queue.splice(i, 1);\n      } else if (operation.status !== OperationStatus.Ready) {\n        // Sanity check\n        throw new Error(`Unexpected status \"${operation.status}\" for queued operation: ${operation.name}`);\n      } else if (operation.dependencies.size === 0) {\n        // This task is ready to process, hand it to the iterator.\n        queue.splice(i, 1);\n        // Needs to have queue semantics, otherwise tools that iterate it get confused\n        waitingIterators.shift()!({\n          value: operation,\n          done: false\n        });\n      }\n      // Otherwise operation is still waiting\n    }\n\n    if (queue.length === 0) {\n      // Queue is empty, flush\n      for (const resolveAsyncIterator of waitingIterators.splice(0)) {\n        resolveAsyncIterator({\n          value: undefined,\n          done: true\n        });\n      }\n    }\n  }\n\n  /**\n   * Returns this queue as an async iterator, such that multiple functions iterating this object concurrently\n   * receive distinct iteration results.\n   */\n  public [Symbol.asyncIterator](): AsyncIterator<OperationExecutionRecord> {\n    return this;\n  }\n}\n\nexport interface IOperationSortFunction {\n  /**\n   * A function that sorts operations in reverse priority order:\n   * Returning a positive value indicates that `a` should execute before `b`.\n   * Returning a negative value indicates that `b` should execute before `a`.\n   * Returning 0 indicates no preference.\n   */\n  (a: OperationExecutionRecord, b: OperationExecutionRecord): number;\n}\n\n/**\n * Performs a depth-first search to topologically sort the operations, subject to override via sortFn\n */\nfunction computeTopologyAndSort(\n  operations: Iterable<OperationExecutionRecord>,\n  sortFn: IOperationSortFunction\n): OperationExecutionRecord[] {\n  // Clone the set of operations as an array, so that we can sort it.\n  const queue: OperationExecutionRecord[] = Array.from(operations);\n\n  // Create a collection for detecting visited nodes\n  const cycleDetectorStack: Set<OperationExecutionRecord> = new Set();\n  for (const operation of queue) {\n    calculateCriticalPathLength(operation, cycleDetectorStack);\n  }\n\n  return queue.sort(sortFn);\n}\n\n/**\n * Perform a depth-first search to find critical path length.\n * Cycle detection comes at minimal additional cost.\n */\nfunction calculateCriticalPathLength(\n  operation: OperationExecutionRecord,\n  dependencyChain: Set<OperationExecutionRecord>\n): number {\n  if (dependencyChain.has(operation)) {\n    throw new Error(\n      'A cyclic dependency was encountered:\\n  ' +\n        [...dependencyChain, operation]\n          .map((visitedTask) => visitedTask.name)\n          .reverse()\n          .join('\\n  -> ') +\n        '\\nConsider using the cyclicDependencyProjects option for rush.json.'\n    );\n  }\n\n  let { criticalPathLength } = operation;\n\n  if (criticalPathLength !== undefined) {\n    // This has been visited already\n    return criticalPathLength;\n  }\n\n  criticalPathLength = 0;\n  if (operation.consumers.size) {\n    dependencyChain.add(operation);\n    for (const consumer of operation.consumers) {\n      criticalPathLength = Math.max(\n        criticalPathLength,\n        calculateCriticalPathLength(consumer, dependencyChain)\n      );\n    }\n    dependencyChain.delete(operation);\n  }\n  // Include the contribution from the current operation\n  operation.criticalPathLength = criticalPathLength + operation.weight;\n\n  // Directly writing operations to an output collection here would yield a topological sorted set\n  // However, we want a bit more fine-tuning of the output than just the raw topology\n\n  return criticalPathLength;\n}\n"]}