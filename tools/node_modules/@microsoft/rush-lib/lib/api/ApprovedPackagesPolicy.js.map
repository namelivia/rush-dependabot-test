{"version":3,"file":"ApprovedPackagesPolicy.js","sourceRoot":"","sources":["../../src/api/ApprovedPackagesPolicy.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;;;;;;;;;;;;;;;;;;;;;AAE3D,2CAA6B;AAE7B,mFAAgF;AAChF,0DAAuD;AAGvD;;;;GAIG;AACH,MAAa,sBAAsB;IAOjC,gBAAgB;IAChB,YAAmB,iBAAoC,EAAE,qBAA6C;QACpG,MAAM,sBAAsB,GAC1B,qBAAqB,CAAC,sBAAsB,IAAI,EAAE,CAAC;QAErD,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,qBAAqB,CAAC,sBAAsB,CAAC;QAC/D,IAAI,CAAC,iBAAiB,GAAG,IAAI,GAAG,CAAS,sBAAsB,CAAC,gBAAgB,CAAC,CAAC;QAClF,IAAI,CAAC,iBAAiB,GAAG,IAAI,GAAG,CAAS,sBAAsB,CAAC,gBAAgB,CAAC,CAAC;QAElF,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE;gBAC/B,MAAM,IAAI,KAAK,CACb,qFAAqF;oBACnF,0BAA0B,CAC7B,CAAC;aACH;SACF;QAED,sCAAsC;QACtC,MAAM,2BAA2B,GAAW,IAAI,CAAC,IAAI,CACnD,iBAAiB,CAAC,sBAAsB,EACxC,6BAAa,CAAC,+BAA+B,CAC9C,CAAC;QACF,IAAI,CAAC,wBAAwB,GAAG,IAAI,6DAA6B,CAAC,2BAA2B,CAAC,CAAC;QAC/F,IAAI,CAAC,wBAAwB,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAE7D,yCAAyC;QACzC,MAAM,8BAA8B,GAAW,IAAI,CAAC,IAAI,CACtD,iBAAiB,CAAC,sBAAsB,EACxC,6BAAa,CAAC,kCAAkC,CACjD,CAAC;QACF,IAAI,CAAC,2BAA2B,GAAG,IAAI,6DAA6B,CAAC,8BAA8B,CAAC,CAAC;QACrG,IAAI,CAAC,2BAA2B,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAClE,CAAC;IAED;;;OAGG;IACH,IAAW,OAAO;QAChB,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IAED;;OAEG;IACH,IAAW,gBAAgB;QACzB,OAAO,IAAI,CAAC,iBAAiB,CAAC;IAChC,CAAC;IAED;;;OAGG;IACH,IAAW,gBAAgB;QACzB,OAAO,IAAI,CAAC,iBAAiB,CAAC;IAChC,CAAC;IAED;;;;;;;;;;;;;OAaG;IACH,IAAW,uBAAuB;QAChC,OAAO,IAAI,CAAC,wBAAwB,CAAC;IACvC,CAAC;IAED;;;;;;;;;;;OAWG;IACH,IAAW,0BAA0B;QACnC,OAAO,IAAI,CAAC,2BAA2B,CAAC;IAC1C,CAAC;CACF;AAlGD,wDAkGC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as path from 'path';\n\nimport { ApprovedPackagesConfiguration } from './ApprovedPackagesConfiguration';\nimport { RushConstants } from '../logic/RushConstants';\nimport { RushConfiguration, IRushConfigurationJson, IApprovedPackagesPolicyJson } from './RushConfiguration';\n\n/**\n * This is a helper object for RushConfiguration.\n * It exposes the \"approvedPackagesPolicy\" feature from rush.json.\n * @public\n */\nexport class ApprovedPackagesPolicy {\n  private _enabled: boolean;\n  private _ignoredNpmScopes: Set<string>;\n  private _reviewCategories: Set<string>;\n  private _browserApprovedPackages: ApprovedPackagesConfiguration;\n  private _nonbrowserApprovedPackages: ApprovedPackagesConfiguration;\n\n  /** @internal */\n  public constructor(rushConfiguration: RushConfiguration, rushConfigurationJson: IRushConfigurationJson) {\n    const approvedPackagesPolicy: IApprovedPackagesPolicyJson =\n      rushConfigurationJson.approvedPackagesPolicy || {};\n\n    this._enabled = !!rushConfigurationJson.approvedPackagesPolicy;\n    this._ignoredNpmScopes = new Set<string>(approvedPackagesPolicy.ignoredNpmScopes);\n    this._reviewCategories = new Set<string>(approvedPackagesPolicy.reviewCategories);\n\n    if (this._enabled) {\n      if (!this.reviewCategories.size) {\n        throw new Error(\n          `The \"approvedPackagesPolicy\" feature is enabled rush.json, but the reviewCategories` +\n            ` list is not configured.`\n        );\n      }\n    }\n\n    // Load browser-approved-packages.json\n    const browserApprovedPackagesPath: string = path.join(\n      rushConfiguration.commonRushConfigFolder,\n      RushConstants.browserApprovedPackagesFilename\n    );\n    this._browserApprovedPackages = new ApprovedPackagesConfiguration(browserApprovedPackagesPath);\n    this._browserApprovedPackages.tryLoadFromFile(this._enabled);\n\n    // Load nonbrowser-approved-packages.json\n    const nonbrowserApprovedPackagesPath: string = path.join(\n      rushConfiguration.commonRushConfigFolder,\n      RushConstants.nonbrowserApprovedPackagesFilename\n    );\n    this._nonbrowserApprovedPackages = new ApprovedPackagesConfiguration(nonbrowserApprovedPackagesPath);\n    this._nonbrowserApprovedPackages.tryLoadFromFile(this._enabled);\n  }\n\n  /**\n   * Whether the feature is enabled.  The feature is enabled if the \"approvedPackagesPolicy\"\n   * field is assigned in rush.json.\n   */\n  public get enabled(): boolean {\n    return this._enabled;\n  }\n\n  /**\n   * A list of NPM package scopes that will be excluded from review (e.g. `@types`)\n   */\n  public get ignoredNpmScopes(): Set<string> {\n    return this._ignoredNpmScopes;\n  }\n\n  /**\n   * A list of category names that are valid for usage as the RushConfigurationProject.reviewCategory field.\n   * This array will never be undefined.\n   */\n  public get reviewCategories(): Set<string> {\n    return this._reviewCategories;\n  }\n\n  /**\n   * Packages approved for usage in a web browser.  This is the stricter of the two types, so by default\n   * all new packages are added to this file.\n   *\n   * @remarks\n   *\n   * This is part of an optional approval workflow, whose purpose is to review any new dependencies\n   * that are introduced (e.g. maybe a legal review is required, or maybe we are trying to minimize bloat).\n   * When Rush discovers a new dependency has been added to package.json, it will update the file.\n   * The intent is that the file will be stored in Git and tracked by a branch policy that notifies\n   * reviewers when a PR attempts to modify the file.\n   *\n   * Example filename: `C:\\MyRepo\\common\\config\\rush\\browser-approved-packages.json`\n   */\n  public get browserApprovedPackages(): ApprovedPackagesConfiguration {\n    return this._browserApprovedPackages;\n  }\n\n  /**\n   * Packages approved for usage everywhere *except* in a web browser.\n   *\n   * @remarks\n   *\n   * This is part of an optional approval workflow, whose purpose is to review any new dependencies\n   * that are introduced (e.g. maybe a legal review is required, or maybe we are trying to minimize bloat).\n   * The intent is that the file will be stored in Git and tracked by a branch policy that notifies\n   * reviewers when a PR attempts to modify the file.\n   *\n   * Example filename: `C:\\MyRepo\\common\\config\\rush\\browser-approved-packages.json`\n   */\n  public get nonbrowserApprovedPackages(): ApprovedPackagesConfiguration {\n    return this._nonbrowserApprovedPackages;\n  }\n}\n"]}