{"version":3,"file":"AutoinstallerPluginLoader.js","sourceRoot":"","sources":["../../../src/pluginFramework/PluginLoader/AutoinstallerPluginLoader.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as path from 'path';\nimport { FileSystem, JsonFile, JsonObject, JsonSchema } from '@rushstack/node-core-library';\n\nimport { IRushPluginConfiguration } from '../../api/RushPluginsConfiguration';\nimport { Autoinstaller } from '../../logic/Autoinstaller';\nimport { RushConstants } from '../../logic/RushConstants';\nimport {\n  IPluginLoaderOptions,\n  IRushPluginManifest,\n  IRushPluginManifestJson,\n  PluginLoaderBase\n} from './PluginLoaderBase';\n\ninterface IAutoinstallerPluginLoaderOptions extends IPluginLoaderOptions<IRushPluginConfiguration> {\n  restrictConsoleOutput: boolean;\n}\n\n/**\n * @beta\n */\nexport class AutoinstallerPluginLoader extends PluginLoaderBase<IRushPluginConfiguration> {\n  private _autoinstaller: Autoinstaller;\n\n  public readonly packageFolder: string;\n\n  public constructor(options: IAutoinstallerPluginLoaderOptions) {\n    super(options);\n    this._autoinstaller = new Autoinstaller({\n      autoinstallerName: options.pluginConfiguration.autoinstallerName,\n      rushConfiguration: this._rushConfiguration,\n      restrictConsoleOutput: options.restrictConsoleOutput\n    });\n\n    this.packageFolder = path.join(this._autoinstaller.folderFullPath, 'node_modules', this.packageName);\n  }\n\n  /**\n   * The folder where rush plugins static files are stored.\n   * Example: `C:\\MyRepo\\common\\autoinstallers\\<autoinstaller_name>\\rush-plugins`\n   */\n  public static getPluginAutoinstallerStorePath(autoinstaller: Autoinstaller): string {\n    return path.join(autoinstaller.folderFullPath, 'rush-plugins');\n  }\n\n  public update(): void {\n    const packageName: string = this.packageName;\n    const pluginName: string = this.pluginName;\n    const packageFolder: string = this.packageFolder;\n    const manifestPath: string = path.join(packageFolder, RushConstants.rushPluginManifestFilename);\n\n    // validate\n    const manifest: IRushPluginManifestJson = JsonFile.loadAndValidate(\n      manifestPath,\n      AutoinstallerPluginLoader._jsonSchema\n    );\n\n    FileSystem.copyFile({\n      sourcePath: manifestPath,\n      destinationPath: this._getManifestPath()\n    });\n\n    const pluginManifest: IRushPluginManifest | undefined = manifest.plugins.find(\n      (item) => item.pluginName === pluginName\n    );\n    if (!pluginManifest) {\n      throw new Error(\n        `A plugin named \"${pluginName}\" is not provided by the Rush plugin package \"${packageName}\"`\n      );\n    }\n\n    const commandLineJsonFilePath: string | undefined = pluginManifest.commandLineJsonFilePath;\n    if (commandLineJsonFilePath) {\n      const commandLineJsonFullFilePath: string = path.join(packageFolder, commandLineJsonFilePath);\n      if (!FileSystem.exists(commandLineJsonFullFilePath)) {\n        this._terminal.writeErrorLine(\n          `The Rush plugin \"${pluginName}\" from \"${packageName}\" specifies a commandLineJsonFilePath` +\n            ` ${commandLineJsonFilePath} that does not exist.`\n        );\n      }\n      FileSystem.copyFile({\n        sourcePath: commandLineJsonFullFilePath,\n        destinationPath: this._getCommandLineJsonFilePath()\n      });\n    }\n  }\n\n  public get autoinstaller(): Autoinstaller {\n    return this._autoinstaller;\n  }\n\n  protected override _getCommandLineAdditionalPathFolders(): string[] {\n    const additionalPathFolders: string[] = super._getCommandLineAdditionalPathFolders();\n    additionalPathFolders.push(\n      // Example: `common/autoinstaller/plugins/node_modules/.bin`\n      path.join(this._autoinstaller.folderFullPath, 'node_modules', '.bin')\n    );\n    return additionalPathFolders;\n  }\n\n  protected override _getPluginOptions(): JsonObject {\n    const optionsJsonFilePath: string = this._getPluginOptionsJsonFilePath();\n    const optionsSchema: JsonSchema | undefined = this._getRushPluginOptionsSchema();\n\n    let pluginOptions: JsonObject = {};\n    try {\n      pluginOptions = JsonFile.load(optionsJsonFilePath);\n    } catch (e) {\n      if (FileSystem.isFileDoesNotExistError(e as Error)) {\n        if (optionsSchema) {\n          throw new Error(\n            `Plugin options are required by ${this.pluginName} from package ${this.packageName}, please create it at ${optionsJsonFilePath}.`\n          );\n        } else {\n          return {};\n        }\n      }\n      throw e;\n    }\n\n    if (optionsSchema) {\n      optionsSchema.validateObject(pluginOptions, optionsJsonFilePath);\n    }\n\n    return pluginOptions;\n  }\n\n  protected override _getManifestPath(): string {\n    return path.join(\n      AutoinstallerPluginLoader.getPluginAutoinstallerStorePath(this._autoinstaller),\n      this.packageName,\n      RushConstants.rushPluginManifestFilename\n    );\n  }\n\n  protected override _getCommandLineJsonFilePath(): string {\n    return path.join(\n      AutoinstallerPluginLoader.getPluginAutoinstallerStorePath(this._autoinstaller),\n      this.packageName,\n      this.pluginName,\n      RushConstants.commandLineFilename\n    );\n  }\n}\n"]}