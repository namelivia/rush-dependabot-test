{"version":3,"file":"RushPnpmCommandLine.js","sourceRoot":"","sources":["../../src/cli/RushPnpmCommandLine.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as path from 'path';\nimport {\n  FileSystem,\n  AlreadyReportedError,\n  Executable,\n  EnvironmentMap,\n  ITerminal,\n  Colors,\n  Terminal,\n  ConsoleTerminalProvider\n} from '@rushstack/node-core-library';\nimport { PrintUtilities } from '@rushstack/terminal';\n\nimport { RushConfiguration } from '../api/RushConfiguration';\nimport { NodeJsCompatibility } from '../logic/NodeJsCompatibility';\nimport { SpawnSyncReturns } from 'child_process';\nimport { ILaunchOptions } from '../api/Rush';\n\nexport interface ILaunchRushPnpmInternalOptions extends ILaunchOptions {}\n\nconst RUSH_SKIP_CHECKS_PARAMETER: string = '--rush-skip-checks';\n\nexport class RushPnpmCommandLine {\n  public static launch(launcherVersion: string, options: ILaunchRushPnpmInternalOptions): void {\n    // Node.js can sometimes accidentally terminate with a zero exit code  (e.g. for an uncaught\n    // promise exception), so we start with the assumption that the exit code is 1\n    // and set it to 0 only on success.\n    process.exitCode = 1;\n\n    const { terminalProvider } = options;\n    const terminal: ITerminal = new Terminal(terminalProvider ?? new ConsoleTerminalProvider());\n\n    try {\n      // Are we in a Rush repo?\n      let rushConfiguration: RushConfiguration | undefined = undefined;\n      if (RushConfiguration.tryFindRushJsonLocation()) {\n        // showVerbose is false because the logging message may break JSON output\n        rushConfiguration = RushConfiguration.loadFromDefaultLocation({ showVerbose: false });\n      }\n\n      NodeJsCompatibility.warnAboutCompatibilityIssues({\n        isRushLib: true,\n        alreadyReportedNodeTooNewError: !!options.alreadyReportedNodeTooNewError,\n        rushConfiguration\n      });\n\n      if (!rushConfiguration) {\n        throw new Error(\n          'The \"rush-pnpm\" command must be executed in a folder that is under a Rush workspace folder'\n        );\n      }\n\n      if (rushConfiguration.packageManager !== 'pnpm') {\n        throw new Error(\n          'The \"rush-pnpm\" command requires your rush.json to be configured to use the PNPM package manager'\n        );\n      }\n\n      if (!rushConfiguration.pnpmOptions.useWorkspaces) {\n        throw new Error(\n          'The \"rush-pnpm\" command requires the \"useWorkspaces\" setting to be enabled in rush.json'\n        );\n      }\n\n      const workspaceFolder: string = rushConfiguration.commonTempFolder;\n      const workspaceFilePath: string = path.join(workspaceFolder, 'pnpm-workspace.yaml');\n\n      if (!FileSystem.exists(workspaceFilePath)) {\n        terminal.writeErrorLine('Error: The PNPM workspace file has not been generated:');\n        terminal.writeErrorLine(`  ${workspaceFilePath}\\n`);\n        terminal.writeLine(Colors.cyan(`Do you need to run \"rush install\" or \"rush update\"?`));\n        throw new AlreadyReportedError();\n      }\n\n      if (!FileSystem.exists(rushConfiguration.packageManagerToolFilename)) {\n        terminal.writeErrorLine('Error: The PNPM local binary has not been installed yet.');\n        terminal.writeLine('\\n' + Colors.cyan(`Do you need to run \"rush install\" or \"rush update\"?`));\n        throw new AlreadyReportedError();\n      }\n\n      // 0 = node.exe\n      // 1 = rush-pnpm\n      const pnpmArgs: string[] = process.argv.slice(2);\n\n      RushPnpmCommandLine._validatePnpmUsage(pnpmArgs, terminal);\n\n      const pnpmEnvironmentMap: EnvironmentMap = new EnvironmentMap(process.env);\n      pnpmEnvironmentMap.set('NPM_CONFIG_WORKSPACE_DIR', workspaceFolder);\n\n      if (rushConfiguration.pnpmOptions.pnpmStorePath) {\n        pnpmEnvironmentMap.set('NPM_CONFIG_STORE_DIR', rushConfiguration.pnpmOptions.pnpmStorePath);\n      }\n\n      if (rushConfiguration.pnpmOptions.environmentVariables) {\n        for (const [envKey, { value: envValue, override }] of Object.entries(\n          rushConfiguration.pnpmOptions.environmentVariables\n        )) {\n          if (override) {\n            pnpmEnvironmentMap.set(envKey, envValue);\n          } else {\n            if (undefined === pnpmEnvironmentMap.get(envKey)) {\n              pnpmEnvironmentMap.set(envKey, envValue);\n            }\n          }\n        }\n      }\n\n      const result: SpawnSyncReturns<string> = Executable.spawnSync(\n        rushConfiguration.packageManagerToolFilename,\n        pnpmArgs,\n        {\n          environmentMap: pnpmEnvironmentMap,\n          stdio: 'inherit'\n        }\n      );\n      if (result.error) {\n        throw new Error('Failed to invoke PNPM: ' + result.error);\n      }\n      if (result.status === null) {\n        throw new Error('Failed to invoke PNPM: Spawn completed without an exit code');\n      }\n      process.exitCode = result.status;\n    } catch (error) {\n      if (!(error instanceof AlreadyReportedError)) {\n        const prefix: string = 'ERROR: ';\n        terminal.writeErrorLine('\\n' + PrintUtilities.wrapWords(prefix + error.message));\n      }\n    }\n  }\n\n  private static _validatePnpmUsage(pnpmArgs: string[], terminal: ITerminal): void {\n    if (pnpmArgs[0] === RUSH_SKIP_CHECKS_PARAMETER) {\n      pnpmArgs.shift();\n      // Ignore other checks\n      return;\n    }\n\n    if (pnpmArgs.length === 0) {\n      return;\n    }\n    const firstArg: string = pnpmArgs[0];\n\n    // Detect common safe invocations\n    if (pnpmArgs.includes('-h') || pnpmArgs.includes('--help') || pnpmArgs.includes('-?')) {\n      return;\n    }\n\n    if (pnpmArgs.length === 1) {\n      if (firstArg === '-v' || firstArg === '--version') {\n        return;\n      }\n    }\n\n    const BYPASS_NOTICE: string = `To bypass this check, add \"${RUSH_SKIP_CHECKS_PARAMETER}\" as the very first command line option.`;\n\n    if (!/^[a-z]+([a-z0-9\\-])*$/.test(firstArg)) {\n      // We can't parse this CLI syntax\n      terminal.writeErrorLine(\n        `Warning: The \"rush-pnpm\" wrapper expects a command verb before \"${firstArg}\"\\n`\n      );\n      terminal.writeLine(Colors.cyan(BYPASS_NOTICE));\n      throw new AlreadyReportedError();\n    } else {\n      const commandName: string = firstArg;\n\n      // Also accept SKIP_RUSH_CHECKS_PARAMETER immediately after the command verb\n      if (pnpmArgs[1] === RUSH_SKIP_CHECKS_PARAMETER) {\n        pnpmArgs.splice(1, 1);\n        return;\n      }\n\n      if (pnpmArgs.indexOf(RUSH_SKIP_CHECKS_PARAMETER) >= 0) {\n        // We do not attempt to parse PNPM's complete CLI syntax, so we cannot be sure how to interpret\n        // strings that appear outside of the specific patterns that this parser recognizes\n        terminal.writeErrorLine(\n          PrintUtilities.wrapWords(\n            `Error: The \"${RUSH_SKIP_CHECKS_PARAMETER}\" option must be the first parameter for the \"rush-pnpm\" command.`\n          )\n        );\n        throw new AlreadyReportedError();\n      }\n\n      // Warn about commands known not to work\n      /* eslint-disable no-fallthrough */\n      switch (commandName) {\n        // Blocked\n        case 'import': {\n          terminal.writeErrorLine(\n            PrintUtilities.wrapWords(\n              `Error: The \"pnpm ${commandName}\" command is known to be incompatible with Rush's environment.`\n            ) + '\\n'\n          );\n          terminal.writeLine(Colors.cyan(BYPASS_NOTICE));\n          throw new AlreadyReportedError();\n        }\n\n        // Show warning for install commands\n        case 'add':\n        case 'install':\n        /* synonym */\n        case 'i':\n        case 'install-test':\n        /* synonym */\n        case 'it': {\n          terminal.writeErrorLine(\n            PrintUtilities.wrapWords(\n              `Error: The \"pnpm ${commandName}\" command is incompatible with Rush's environment.` +\n                ` Use the \"rush install\" or \"rush update\" commands instead.`\n            ) + '\\n'\n          );\n          terminal.writeLine(Colors.cyan(BYPASS_NOTICE));\n          throw new AlreadyReportedError();\n        }\n\n        // Show warning\n        case 'link':\n        /* synonym */\n        case 'ln':\n        case 'remove':\n        /* synonym */\n        case 'rm':\n        case 'unlink':\n        case 'update':\n        /* synonym */\n        case 'up': {\n          terminal.writeWarningLine(\n            PrintUtilities.wrapWords(\n              `Warning: The \"pnpm ${commandName}\" command makes changes that may invalidate Rush's workspace state.`\n            ) + '\\n'\n          );\n          terminal.writeWarningLine(`==> Consider running \"rush install\" or \"rush update\" afterwards.\\n`);\n          break;\n        }\n\n        // Known safe\n        case 'audit':\n        case 'exec':\n        case 'list':\n        /* synonym */\n        case 'ls':\n        case 'outdated':\n        case 'pack':\n        case 'prune':\n        case 'publish':\n        case 'rebuild':\n        /* synonym */\n        case 'rb':\n        case 'root':\n        case 'run':\n        case 'start':\n        case 'store':\n        case 'test':\n        /* synonym */\n        case 't':\n        case 'why': {\n          break;\n        }\n\n        // Unknown\n        default: {\n          terminal.writeErrorLine(\n            PrintUtilities.wrapWords(\n              `Error: The \"pnpm ${commandName}\" command has not been tested with Rush's environment. It may be incompatible.`\n            ) + '\\n'\n          );\n          terminal.writeLine(Colors.cyan(BYPASS_NOTICE));\n          throw new AlreadyReportedError();\n        }\n      }\n      /* eslint-enable no-fallthrough */\n    }\n  }\n}\n"]}