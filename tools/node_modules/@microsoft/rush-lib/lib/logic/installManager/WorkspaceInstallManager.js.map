{"version":3,"file":"WorkspaceInstallManager.js","sourceRoot":"","sources":["../../../src/logic/installManager/WorkspaceInstallManager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport colors from 'colors/safe';\nimport * as os from 'os';\nimport * as path from 'path';\nimport * as semver from 'semver';\nimport { FileSystem, FileConstants, AlreadyReportedError, Async } from '@rushstack/node-core-library';\n\nimport { BaseInstallManager, IInstallManagerOptions } from '../base/BaseInstallManager';\nimport { BaseShrinkwrapFile } from '../../logic/base/BaseShrinkwrapFile';\nimport { DependencySpecifier, DependencySpecifierType } from '../DependencySpecifier';\nimport { PackageJsonEditor, DependencyType } from '../../api/PackageJsonEditor';\nimport { PnpmWorkspaceFile } from '../pnpm/PnpmWorkspaceFile';\nimport { RushConfigurationProject } from '../../api/RushConfigurationProject';\nimport { RushConstants } from '../../logic/RushConstants';\nimport { Utilities } from '../../utilities/Utilities';\nimport { InstallHelpers } from './InstallHelpers';\nimport { CommonVersionsConfiguration } from '../../api/CommonVersionsConfiguration';\nimport { RepoStateFile } from '../RepoStateFile';\nimport { LastLinkFlagFactory } from '../../api/LastLinkFlag';\nimport { EnvironmentConfiguration } from '../../api/EnvironmentConfiguration';\nimport { ShrinkwrapFileFactory } from '../ShrinkwrapFileFactory';\nimport { BaseProjectShrinkwrapFile } from '../base/BaseProjectShrinkwrapFile';\n\n/**\n * This class implements common logic between \"rush install\" and \"rush update\".\n */\nexport class WorkspaceInstallManager extends BaseInstallManager {\n  /**\n   * @override\n   */\n  public async doInstallAsync(): Promise<void> {\n    // TODO: Remove when \"rush link\" and \"rush unlink\" are deprecated\n    if (this.options.noLink) {\n      console.log(\n        colors.red(\n          'The \"--no-link\" option was provided but is not supported when using workspaces. Run the command again ' +\n            'without specifying this argument.'\n        )\n      );\n      throw new AlreadyReportedError();\n    }\n\n    await super.doInstallAsync();\n  }\n\n  /**\n   * Regenerates the common/temp/package.json and related workspace files.\n   * If shrinkwrapFile is provided, this function also validates whether it contains\n   * everything we need to install and returns true if so; in all other cases,\n   * the return value is false.\n   *\n   * @override\n   */\n  protected async prepareCommonTempAsync(\n    shrinkwrapFile: BaseShrinkwrapFile | undefined\n  ): Promise<{ shrinkwrapIsUpToDate: boolean; shrinkwrapWarnings: string[] }> {\n    // Block use of the RUSH_TEMP_FOLDER environment variable\n    if (EnvironmentConfiguration.rushTempFolderOverride !== undefined) {\n      throw new Error(\n        'The RUSH_TEMP_FOLDER environment variable is not compatible with workspace installs. If attempting ' +\n          'to move the PNPM store path, see the `RUSH_PNPM_STORE_PATH` environment variable.'\n      );\n    }\n\n    console.log(\n      os.EOL + colors.bold('Updating workspace files in ' + this.rushConfiguration.commonTempFolder)\n    );\n\n    const shrinkwrapWarnings: string[] = [];\n\n    // We will start with the assumption that it's valid, and then set it to false if\n    // any of the checks fail\n    let shrinkwrapIsUpToDate: boolean = true;\n\n    if (!shrinkwrapFile) {\n      shrinkwrapIsUpToDate = false;\n    } else {\n      if (!shrinkwrapFile.isWorkspaceCompatible && !this.options.fullUpgrade) {\n        console.log();\n        console.log(\n          colors.red(\n            'The shrinkwrap file has not been updated to support workspaces. Run \"rush update --full\" to update ' +\n              'the shrinkwrap file.'\n          )\n        );\n        throw new AlreadyReportedError();\n      }\n\n      // If there are orphaned projects, we need to update\n      const orphanedProjects: ReadonlyArray<string> = shrinkwrapFile.findOrphanedProjects(\n        this.rushConfiguration\n      );\n      if (orphanedProjects.length > 0) {\n        for (const orhpanedProject of orphanedProjects) {\n          shrinkwrapWarnings.push(\n            `Your ${this.rushConfiguration.shrinkwrapFilePhrase} references \"${orhpanedProject}\" ` +\n              'which was not found in rush.json'\n          );\n        }\n        shrinkwrapIsUpToDate = false;\n      }\n    }\n\n    // If preferred versions have been updated, or if the repo-state.json is invalid,\n    // we can't be certain of the state of the shrinkwrap\n    const repoState: RepoStateFile = this.rushConfiguration.getRepoState(this.options.variant);\n    if (!repoState.isValid) {\n      shrinkwrapWarnings.push(\n        `The ${RushConstants.repoStateFilename} file is invalid. There may be a merge conflict marker in the file.`\n      );\n      shrinkwrapIsUpToDate = false;\n    } else {\n      const commonVersions: CommonVersionsConfiguration = this.rushConfiguration.getCommonVersions(\n        this.options.variant\n      );\n      if (repoState.preferredVersionsHash !== commonVersions.getPreferredVersionsHash()) {\n        shrinkwrapWarnings.push(\n          `Preferred versions from ${RushConstants.commonVersionsFilename} have been modified.`\n        );\n        shrinkwrapIsUpToDate = false;\n      }\n    }\n\n    // To generate the workspace file, we will add each project to the file as we loop through and validate\n    const workspaceFile: PnpmWorkspaceFile = new PnpmWorkspaceFile(\n      path.join(this.rushConfiguration.commonTempFolder, 'pnpm-workspace.yaml')\n    );\n\n    // Loop through the projects and add them to the workspace file. While we're at it, also validate that\n    // referenced workspace projects are valid, and check if the shrinkwrap file is already up-to-date.\n    for (const rushProject of this.rushConfiguration.projects) {\n      const packageJson: PackageJsonEditor = rushProject.packageJsonEditor;\n      workspaceFile.addPackage(rushProject.projectFolder);\n\n      for (const { name, version, dependencyType } of [\n        ...packageJson.dependencyList,\n        ...packageJson.devDependencyList\n      ]) {\n        // Allow the package manager to handle peer dependency resolution, since this is simply a constraint\n        // enforced by the package manager. Additionally, peer dependencies are simply a version constraint\n        // and do not need to be converted to workspaces protocol.\n        if (dependencyType === DependencyType.Peer) {\n          continue;\n        }\n\n        const dependencySpecifier: DependencySpecifier = new DependencySpecifier(name, version);\n\n        // Is there a locally built Rush project that could satisfy this dependency?\n        const referencedLocalProject: RushConfigurationProject | undefined =\n          this.rushConfiguration.getProjectByName(name);\n\n        // Validate that local projects are referenced with workspace notation. If not, and it is not a\n        // cyclic dependency, then it needs to be updated to specify `workspace:*` explicitly. Currently only\n        // supporting versions and version ranges for specifying a local project.\n        if (\n          (dependencySpecifier.specifierType === DependencySpecifierType.Version ||\n            dependencySpecifier.specifierType === DependencySpecifierType.Range) &&\n          referencedLocalProject &&\n          !rushProject.cyclicDependencyProjects.has(name)\n        ) {\n          // Make sure that this version is intended to target a local package. If not, then we will fail since it\n          // is not explicitly specified as a cyclic dependency.\n          if (\n            !semver.satisfies(\n              referencedLocalProject.packageJsonEditor.version,\n              dependencySpecifier.versionSpecifier\n            )\n          ) {\n            console.log();\n            console.log(\n              colors.red(\n                `\"${rushProject.packageName}\" depends on package \"${name}\" (${version}) which exists ` +\n                  'within the workspace but cannot be fulfilled with the specified version range. Either ' +\n                  'specify a valid version range, or add the package as a cyclic dependency.'\n              )\n            );\n            throw new AlreadyReportedError();\n          }\n\n          if (!this.options.allowShrinkwrapUpdates) {\n            console.log();\n            console.log(\n              colors.red(\n                `\"${rushProject.packageName}\" depends on package \"${name}\" (${version}) which exists within ` +\n                  'the workspace. Run \"rush update\" to update workspace references for this package.'\n              )\n            );\n            throw new AlreadyReportedError();\n          }\n\n          if (this.options.fullUpgrade) {\n            // We will update to `workspace` notation. If the version specified is a range, then use the provided range.\n            // Otherwise, use `workspace:*` to ensure we're always using the workspace package.\n            const workspaceRange: string =\n              !!semver.validRange(dependencySpecifier.versionSpecifier) &&\n              !semver.valid(dependencySpecifier.versionSpecifier)\n                ? dependencySpecifier.versionSpecifier\n                : '*';\n            packageJson.addOrUpdateDependency(name, `workspace:${workspaceRange}`, dependencyType);\n            shrinkwrapIsUpToDate = false;\n            continue;\n          }\n        } else if (dependencySpecifier.specifierType === DependencySpecifierType.Workspace) {\n          // Already specified as a local project. Allow the package manager to validate this\n          continue;\n        }\n      }\n\n      // Save the package.json if we modified the version references and warn that the package.json was modified\n      if (packageJson.saveIfModified()) {\n        console.log(\n          colors.yellow(\n            `\"${rushProject.packageName}\" depends on one or more workspace packages which did not use \"workspace:\" ` +\n              'notation. The package.json has been modified and must be committed to source control.'\n          )\n        );\n      }\n\n      // Now validate that the shrinkwrap file matches what is in the package.json\n      if (shrinkwrapFile?.isWorkspaceProjectModified(rushProject, this.options.variant)) {\n        shrinkwrapWarnings.push(\n          `Dependencies of project \"${rushProject.packageName}\" do not match the current shrinkwrap.`\n        );\n        shrinkwrapIsUpToDate = false;\n      }\n    }\n\n    // Write the common package.json\n    InstallHelpers.generateCommonPackageJson(this.rushConfiguration);\n\n    // Save the generated workspace file. Don't update the file timestamp unless the content has changed,\n    // since \"rush install\" will consider this timestamp\n    workspaceFile.save(workspaceFile.workspaceFilename, { onlyIfChanged: true });\n\n    return { shrinkwrapIsUpToDate, shrinkwrapWarnings };\n  }\n\n  protected canSkipInstall(lastModifiedDate: Date): boolean {\n    if (!super.canSkipInstall(lastModifiedDate)) {\n      return false;\n    }\n\n    const potentiallyChangedFiles: string[] = [];\n\n    if (this.rushConfiguration.packageManager === 'pnpm') {\n      // Add workspace file. This file is only modified when workspace packages change.\n      const pnpmWorkspaceFilename: string = path.join(\n        this.rushConfiguration.commonTempFolder,\n        'pnpm-workspace.yaml'\n      );\n\n      if (FileSystem.exists(pnpmWorkspaceFilename)) {\n        potentiallyChangedFiles.push(pnpmWorkspaceFilename);\n      }\n    }\n\n    // Also consider timestamps for all the project node_modules folders, as well as the package.json\n    // files\n    // Example: [ \"C:\\MyRepo\\projects\\projectA\\node_modules\", \"C:\\MyRepo\\projects\\projectA\\package.json\" ]\n    potentiallyChangedFiles.push(\n      ...this.rushConfiguration.projects.map((project) => {\n        return path.join(project.projectFolder, RushConstants.nodeModulesFolderName);\n      }),\n      ...this.rushConfiguration.projects.map((project) => {\n        return path.join(project.projectFolder, FileConstants.PackageJson);\n      })\n    );\n\n    // NOTE: If any of the potentiallyChangedFiles does not exist, then isFileTimestampCurrent()\n    // returns false.\n    return Utilities.isFileTimestampCurrent(lastModifiedDate, potentiallyChangedFiles);\n  }\n\n  /**\n   * Runs \"npm install\" in the common folder.\n   */\n  protected async installAsync(cleanInstall: boolean): Promise<void> {\n    // Example: \"C:\\MyRepo\\common\\temp\\npm-local\\node_modules\\.bin\\npm\"\n    const packageManagerFilename: string = this.rushConfiguration.packageManagerToolFilename;\n\n    const packageManagerEnv: NodeJS.ProcessEnv = InstallHelpers.getPackageManagerEnvironment(\n      this.rushConfiguration,\n      this.options\n    );\n\n    const commonNodeModulesFolder: string = path.join(\n      this.rushConfiguration.commonTempFolder,\n      RushConstants.nodeModulesFolderName\n    );\n\n    // Is there an existing \"node_modules\" folder to consider?\n    if (FileSystem.exists(commonNodeModulesFolder)) {\n      // Should we delete the entire \"node_modules\" folder?\n      if (cleanInstall) {\n        // YES: Delete \"node_modules\"\n\n        // Explain to the user why we are hosing their node_modules folder\n        console.log('Deleting files from ' + commonNodeModulesFolder);\n\n        this.installRecycler.moveFolder(commonNodeModulesFolder);\n\n        Utilities.createFolderWithRetry(commonNodeModulesFolder);\n      }\n    }\n\n    // Run \"npm install\" in the common folder\n    const installArgs: string[] = ['install'];\n    this.pushConfigurationArgs(installArgs, this.options);\n\n    console.log(\n      os.EOL +\n        colors.bold(\n          `Running \"${this.rushConfiguration.packageManager} install\" in` +\n            ` ${this.rushConfiguration.commonTempFolder}`\n        ) +\n        os.EOL\n    );\n\n    // If any diagnostic options were specified, then show the full command-line\n    if (this.options.debug || this.options.collectLogFile || this.options.networkConcurrency) {\n      console.log(\n        os.EOL +\n          colors.green('Invoking package manager: ') +\n          FileSystem.getRealPath(packageManagerFilename) +\n          ' ' +\n          installArgs.join(' ') +\n          os.EOL\n      );\n    }\n\n    Utilities.executeCommandWithRetry(\n      {\n        command: packageManagerFilename,\n        args: installArgs,\n        workingDirectory: this.rushConfiguration.commonTempFolder,\n        environment: packageManagerEnv,\n        suppressOutput: false\n      },\n      this.options.maxInstallAttempts,\n      () => {\n        if (this.rushConfiguration.packageManager === 'pnpm') {\n          console.log(colors.yellow(`Deleting the \"node_modules\" folder`));\n          this.installRecycler.moveFolder(commonNodeModulesFolder);\n\n          // Leave the pnpm-store as is for the retry. This ensures that packages that have already\n          // been downloaded need not be downloaded again, thereby potentially increasing the chances\n          // of a subsequent successful install.\n\n          Utilities.createFolderWithRetry(commonNodeModulesFolder);\n        }\n      }\n    );\n\n    // If all attempts fail we just terminate. No special handling needed.\n\n    // Ensure that node_modules folders exist after install, since the timestamps on these folders are used\n    // to determine if the install can be skipped\n    const projectNodeModulesFolders: string[] = [\n      path.join(this.rushConfiguration.commonTempFolder, RushConstants.nodeModulesFolderName),\n      ...this.rushConfiguration.projects.map((project) => {\n        return path.join(project.projectFolder, RushConstants.nodeModulesFolderName);\n      })\n    ];\n\n    for (const nodeModulesFolder of projectNodeModulesFolders) {\n      FileSystem.ensureFolder(nodeModulesFolder);\n    }\n\n    console.log('');\n  }\n\n  protected async postInstallAsync(): Promise<void> {\n    // Grab the temp shrinkwrap, as this was the most recently completed install. It may also be\n    // more up-to-date than the checked-in shrinkwrap since filtered installs are not written back.\n    // Note that if there are no projects, or if we're in PNPM workspace mode and there are no\n    // projects with dependencies, a lockfile won't be generated.\n    const tempShrinkwrapFile: BaseShrinkwrapFile | undefined = ShrinkwrapFileFactory.getShrinkwrapFile(\n      this.rushConfiguration.packageManager,\n      this.rushConfiguration.pnpmOptions,\n      this.rushConfiguration.tempShrinkwrapFilename\n    );\n\n    if (tempShrinkwrapFile) {\n      // Write or delete all project shrinkwraps related to the install\n      await Async.forEachAsync(\n        this.rushConfiguration.projects,\n        async (project) => {\n          await tempShrinkwrapFile.getProjectShrinkwrap(project)?.updateProjectShrinkwrapAsync();\n        },\n        { concurrency: 10 }\n      );\n    } else if (\n      this.rushConfiguration.packageManager === 'pnpm' &&\n      this.rushConfiguration.pnpmOptions?.useWorkspaces\n    ) {\n      // If we're in PNPM workspace mode and PNPM didn't create a shrinkwrap file,\n      // there are no dependencies. Generate empty shrinkwrap files for all projects.\n      await Async.forEachAsync(\n        this.rushConfiguration.projects,\n        async (project) => {\n          await BaseProjectShrinkwrapFile.saveEmptyProjectShrinkwrapFileAsync(project);\n        },\n        { concurrency: 10 }\n      );\n    } else {\n      // This is an unexpected case\n      throw new Error(\n        'A shrinkwrap file does not exist after after successful installation. This probably indicates a ' +\n          'bug in the package manager.'\n      );\n    }\n\n    // TODO: Remove when \"rush link\" and \"rush unlink\" are deprecated\n    LastLinkFlagFactory.getCommonTempFlag(this.rushConfiguration).create();\n  }\n\n  /**\n   * Used when invoking the NPM tool.  Appends the common configuration options\n   * to the command-line.\n   */\n  protected pushConfigurationArgs(args: string[], options: IInstallManagerOptions): void {\n    super.pushConfigurationArgs(args, options);\n\n    // Add workspace-specific args\n    if (this.rushConfiguration.packageManager === 'pnpm') {\n      args.push('--recursive');\n      args.push('--link-workspace-packages', 'false');\n\n      for (const arg of this.options.pnpmFilterArguments) {\n        args.push(arg);\n      }\n    }\n  }\n}\n"]}