{"version":3,"file":"Utilities.js","sourceRoot":"","sources":["../../src/utilities/Utilities.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as child_process from 'child_process';\nimport * as os from 'os';\nimport * as path from 'path';\nimport {\n  JsonFile,\n  IPackageJson,\n  FileSystem,\n  FileConstants,\n  FileSystemStats\n} from '@rushstack/node-core-library';\nimport type * as stream from 'stream';\n\nimport { RushConfiguration } from '../api/RushConfiguration';\n\nexport type UNINITIALIZED = 'UNINITIALIZED';\nexport const UNINITIALIZED: UNINITIALIZED = 'UNINITIALIZED';\n\nexport interface IEnvironment {\n  // NOTE: the process.env doesn't actually support \"undefined\" as a value.\n  // If you try to assign it, it will be converted to the text string \"undefined\".\n  // But this typing is needed for reading values from the dictionary, and for\n  // subsets that get combined.\n  [environmentVariableName: string]: string | undefined;\n}\n\n/**\n * Options for Utilities.executeCommand().\n */\nexport interface IExecuteCommandOptions {\n  command: string;\n  args: string[];\n  workingDirectory: string;\n  environment?: IEnvironment;\n  suppressOutput?: boolean;\n  keepEnvironment?: boolean;\n}\n\n/**\n * Options for Utilities.installPackageInDirectory().\n */\nexport interface IInstallPackageInDirectoryOptions {\n  directory: string;\n  packageName: string;\n  version: string;\n  tempPackageTitle: string;\n  maxInstallAttempts: number;\n  commonRushConfigFolder: string | undefined;\n  suppressOutput?: boolean;\n}\n\nexport interface ILifecycleCommandOptions {\n  /**\n   * The rush configuration, if the command is running in a rush repo.\n   */\n  rushConfiguration: RushConfiguration | undefined;\n\n  /**\n   * Working directory for running the command\n   */\n  workingDirectory: string;\n\n  /**\n   * The folder containing a local .npmrc, which will be used for the INIT_CWD environment variable\n   */\n  initCwd: string;\n\n  /**\n   * If true, suppress the process's output, but if there is a nonzero exit code then print stderr\n   */\n  handleOutput: boolean;\n\n  /**\n   * Options for what should be added to the PATH variable\n   */\n  environmentPathOptions: IEnvironmentPathOptions;\n}\n\nexport interface IEnvironmentPathOptions {\n  /**\n   * If true, include <project root>/node_modules/.bin in the PATH. If both this and\n   * {@link IEnvironmentPathOptions.includeRepoBin} are set, this path will take precedence.\n   */\n  includeProjectBin?: boolean;\n\n  /**\n   * If true, include <repo root>/common/temp/node_modules/.bin in the PATH.\n   */\n  includeRepoBin?: boolean;\n\n  /**\n   * Additional folders to be prepended to the search PATH.\n   */\n  additionalPathFolders?: string[] | undefined;\n}\n\nexport interface IDisposable {\n  dispose(): void;\n}\n\ninterface ICreateEnvironmentForRushCommandPathOptions extends IEnvironmentPathOptions {\n  rushJsonFolder: string | undefined;\n  projectRoot: string | undefined;\n  commonTempFolder: string | undefined;\n}\n\ninterface ICreateEnvironmentForRushCommandOptions {\n  /**\n   * The INIT_CWD environment variable\n   */\n  initCwd?: string;\n\n  /**\n   * an existing environment to copy instead of process.env\n   */\n  initialEnvironment?: IEnvironment;\n\n  /**\n   * Options for what should be added to the PATH variable\n   */\n  pathOptions?: ICreateEnvironmentForRushCommandPathOptions;\n}\n\nexport class Utilities {\n  /**\n   * Get the user's home directory. On windows this looks something like \"C:\\users\\username\\\" and on UNIX\n   * this looks something like \"/home/username/\"\n   */\n  public static getHomeFolder(): string {\n    const unresolvedUserFolder: string | undefined =\n      process.env[process.platform === 'win32' ? 'USERPROFILE' : 'HOME'];\n    const dirError: string = \"Unable to determine the current user's home directory\";\n    if (unresolvedUserFolder === undefined) {\n      throw new Error(dirError);\n    }\n    const homeFolder: string = path.resolve(unresolvedUserFolder);\n    if (!FileSystem.exists(homeFolder)) {\n      throw new Error(dirError);\n    }\n\n    return homeFolder;\n  }\n\n  /**\n   * Node.js equivalent of performance.now().\n   */\n  public static getTimeInMs(): number {\n    const [seconds, nanoseconds] = process.hrtime();\n    return seconds * 1000 + nanoseconds / 1000000;\n  }\n\n  /**\n   * Returns the values from a Set<T>\n   */\n  public static getSetAsArray<T>(set: Set<T>): T[] {\n    // When ES6 is supported, we can use Array.from() instead.\n    const result: T[] = [];\n    set.forEach((value: T) => {\n      result.push(value);\n    });\n    return result;\n  }\n\n  /**\n   * Retries a function until a timeout is reached. The function is expected to throw if it failed and\n   *  should be retried.\n   */\n  public static retryUntilTimeout<TResult>(\n    fn: () => TResult,\n    maxWaitTimeMs: number,\n    getTimeoutError: (innerError: Error) => Error,\n    fnName: string\n  ): TResult {\n    const startTime: number = Utilities.getTimeInMs();\n    let looped: boolean = false;\n\n    let result: TResult;\n    for (;;) {\n      try {\n        result = fn();\n        break;\n      } catch (e) {\n        looped = true;\n        const currentTime: number = Utilities.getTimeInMs();\n        if (currentTime - startTime > maxWaitTimeMs) {\n          throw getTimeoutError(e as Error);\n        }\n      }\n    }\n\n    if (looped) {\n      const currentTime: number = Utilities.getTimeInMs();\n      const totalSeconds: string = ((currentTime - startTime) / 1000.0).toFixed(2);\n      // This logging statement isn't meaningful to the end-user. `fnName` should be updated\n      // to something like `operationDescription`\n      console.log(`${fnName}() stalled for ${totalSeconds} seconds`);\n    }\n\n    return result;\n  }\n\n  /**\n   * Creates the specified folder by calling FileSystem.ensureFolder(), but using a\n   * retry loop to recover from temporary locks that may be held by other processes.\n   * If the folder already exists, no error occurs.\n   */\n  public static createFolderWithRetry(folderName: string): void {\n    // Note: If a file exists with the same name, then we fall through and report\n    // an error.\n    if (Utilities.directoryExists(folderName)) {\n      return;\n    }\n\n    // We need to do a simple \"FileSystem.ensureFolder(localModulesFolder)\" here,\n    // however if the folder we deleted above happened to contain any files,\n    // then there seems to be some OS process (virus scanner?) that holds\n    // a lock on the folder for a split second, which causes mkdirSync to\n    // fail.  To workaround that, retry for up to 7 seconds before giving up.\n    const maxWaitTimeMs: number = 7 * 1000;\n\n    return Utilities.retryUntilTimeout(\n      () => FileSystem.ensureFolder(folderName),\n      maxWaitTimeMs,\n      (e) =>\n        new Error(\n          `Error: ${e}${os.EOL}Often this is caused by a file lock ` +\n            'from a process such as your text editor, command prompt, ' +\n            'or a filesystem watcher.'\n        ),\n      'createFolderWithRetry'\n    );\n  }\n\n  /**\n   * Determines if the path points to a file and that it exists.\n   */\n  public static fileExists(filePath: string): boolean {\n    let exists: boolean = false;\n\n    try {\n      const lstat: FileSystemStats = FileSystem.getLinkStatistics(filePath);\n      exists = lstat.isFile();\n    } catch (e) {\n      /* no-op */\n    }\n\n    return exists;\n  }\n\n  /**\n   * Determines if a path points to a directory and that it exists.\n   */\n  public static directoryExists(directoryPath: string): boolean {\n    let exists: boolean = false;\n\n    try {\n      const lstat: FileSystemStats = FileSystem.getLinkStatistics(directoryPath);\n      exists = lstat.isDirectory();\n    } catch (e) {\n      /* no-op */\n    }\n\n    return exists;\n  }\n\n  /**\n   * BE VERY CAREFUL CALLING THIS FUNCTION!\n   * If you specify the wrong folderPath (e.g. \"/\"), it could potentially delete your entire\n   * hard disk.\n   */\n  public static dangerouslyDeletePath(folderPath: string): void {\n    try {\n      FileSystem.deleteFolder(folderPath);\n    } catch (e) {\n      throw new Error(\n        `${(e as Error).message}${os.EOL}Often this is caused by a file lock from a process ` +\n          'such as your text editor, command prompt, or a filesystem watcher'\n      );\n    }\n  }\n\n  /**\n   * Attempts to delete a file. If it does not exist, or the path is not a file, it no-ops.\n   */\n  public static deleteFile(filePath: string): void {\n    if (Utilities.fileExists(filePath)) {\n      console.log(`Deleting: ${filePath}`);\n      FileSystem.deleteFile(filePath);\n    }\n  }\n\n  /*\n   * Returns true if dateToCompare is more recent than all of the inputFilenames, which\n   * would imply that we don't need to rebuild it. Returns false if any of the files\n   * does not exist.\n   * NOTE: The filenames can also be paths for directories, in which case the directory\n   * timestamp is compared.\n   */\n  public static isFileTimestampCurrent(dateToCompare: Date, inputFilenames: string[]): boolean {\n    for (const inputFilename of inputFilenames) {\n      if (!FileSystem.exists(inputFilename)) {\n        return false;\n      }\n\n      const inputStats: FileSystemStats = FileSystem.getStatistics(inputFilename);\n      if (dateToCompare < inputStats.mtime) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Executes the command with the specified command-line parameters, and waits for it to complete.\n   * The current directory will be set to the specified workingDirectory.\n   */\n  public static executeCommand(options: IExecuteCommandOptions): void {\n    Utilities._executeCommandInternal(\n      options.command,\n      options.args,\n      options.workingDirectory,\n      options.suppressOutput ? undefined : [0, 1, 2],\n      options.environment,\n      options.keepEnvironment\n    );\n  }\n\n  /**\n   * Executes the command with the specified command-line parameters, and waits for it to complete.\n   * The current directory will be set to the specified workingDirectory.\n   */\n  public static executeCommandAndCaptureOutput(\n    command: string,\n    args: string[],\n    workingDirectory: string,\n    environment?: IEnvironment,\n    keepEnvironment: boolean = false\n  ): string {\n    const result: child_process.SpawnSyncReturns<Buffer> = Utilities._executeCommandInternal(\n      command,\n      args,\n      workingDirectory,\n      ['pipe', 'pipe', 'pipe'],\n      environment,\n      keepEnvironment\n    );\n\n    return result.stdout.toString();\n  }\n\n  /**\n   * Attempts to run Utilities.executeCommand() up to maxAttempts times before giving up.\n   */\n  public static executeCommandWithRetry(\n    options: IExecuteCommandOptions,\n    maxAttempts: number,\n    retryCallback?: () => void\n  ): void {\n    if (maxAttempts < 1) {\n      throw new Error('The maxAttempts parameter cannot be less than 1');\n    }\n\n    let attemptNumber: number = 1;\n\n    for (;;) {\n      try {\n        Utilities.executeCommand(options);\n      } catch (error) {\n        console.log(os.EOL + 'The command failed:');\n        console.log(` ${options.command} ` + options.args.join(' '));\n        console.log(`ERROR: ${(error as Error).toString()}`);\n\n        if (attemptNumber < maxAttempts) {\n          ++attemptNumber;\n          console.log(`Trying again (attempt #${attemptNumber})...` + os.EOL);\n          if (retryCallback) {\n            retryCallback();\n          }\n\n          continue;\n        } else {\n          console.error(`Giving up after ${attemptNumber} attempts` + os.EOL);\n          throw error;\n        }\n      }\n\n      break;\n    }\n  }\n\n  /**\n   * Executes the command using cmd if running on windows, or using sh if running on a non-windows OS.\n   * @param command - the command to run on shell\n   * @param options - options for how the command should be run\n   */\n  public static executeLifecycleCommand(command: string, options: ILifecycleCommandOptions): number {\n    const result: child_process.SpawnSyncReturns<Buffer> = Utilities._executeLifecycleCommandInternal(\n      command,\n      child_process.spawnSync,\n      options\n    );\n\n    if (options.handleOutput) {\n      Utilities._processResult(result);\n    }\n\n    if (result.status !== null) {\n      return result.status;\n    } else {\n      throw result.error || new Error('An unknown error occurred.');\n    }\n  }\n\n  /**\n   * Executes the command using cmd if running on windows, or using sh if running on a non-windows OS.\n   * @param command - the command to run on shell\n   * @param options - options for how the command should be run\n   */\n  public static executeLifecycleCommandAsync(\n    command: string,\n    options: ILifecycleCommandOptions\n  ): child_process.ChildProcess {\n    return Utilities._executeLifecycleCommandInternal(command, child_process.spawn, options);\n  }\n\n  /**\n   * For strings passed to a shell command, this adds appropriate escaping\n   * to avoid misinterpretation of spaces or special characters.\n   *\n   * Example: 'hello there' --> '\"hello there\"'\n   */\n  public static escapeShellParameter(parameter: string): string {\n    // This approach is based on what NPM 7 now does:\n    // https://github.com/npm/run-script/blob/47a4d539fb07220e7215cc0e482683b76407ef9b/lib/run-script-pkg.js#L34\n    return JSON.stringify(parameter);\n  }\n\n  /**\n   * Installs a package by name and version in the specified directory.\n   */\n  public static installPackageInDirectory(options: IInstallPackageInDirectoryOptions): void {\n    const directory: string = path.resolve(options.directory);\n    if (FileSystem.exists(directory)) {\n      console.log('Deleting old files from ' + directory);\n    }\n\n    FileSystem.ensureEmptyFolder(directory);\n\n    const npmPackageJson: IPackageJson = {\n      dependencies: {\n        [options.packageName]: options.version\n      },\n      description: 'Temporary file generated by the Rush tool',\n      name: options.tempPackageTitle,\n      private: true,\n      version: '0.0.0'\n    };\n    JsonFile.save(npmPackageJson, path.join(directory, FileConstants.PackageJson));\n\n    if (options.commonRushConfigFolder) {\n      Utilities.syncNpmrc(options.commonRushConfigFolder, directory);\n    }\n\n    console.log(os.EOL + 'Running \"npm install\" in ' + directory);\n\n    // NOTE: Here we use whatever version of NPM we happen to find in the PATH\n    Utilities.executeCommandWithRetry(\n      {\n        command: 'npm',\n        args: ['install'],\n        workingDirectory: directory,\n        environment: Utilities._createEnvironmentForRushCommand({}),\n        suppressOutput: options.suppressOutput\n      },\n      options.maxInstallAttempts\n    );\n  }\n\n  /**\n   * As a workaround, copyAndTrimNpmrcFile() copies the .npmrc file to the target folder, and also trims\n   * unusable lines from the .npmrc file.\n   *\n   * Why are we trimming the .npmrc lines?  NPM allows environment variables to be specified in\n   * the .npmrc file to provide different authentication tokens for different registry.\n   * However, if the environment variable is undefined, it expands to an empty string, which\n   * produces a valid-looking mapping with an invalid URL that causes an error.  Instead,\n   * we'd prefer to skip that line and continue looking in other places such as the user's\n   * home directory.\n   *\n   * IMPORTANT: THIS CODE SHOULD BE KEPT UP TO DATE WITH _copyAndTrimNpmrcFile() FROM scripts/install-run.ts\n   */\n  public static copyAndTrimNpmrcFile(sourceNpmrcPath: string, targetNpmrcPath: string): void {\n    console.log(`Transforming ${sourceNpmrcPath}`); // Verbose\n    console.log(`  --> \"${targetNpmrcPath}\"`);\n    let npmrcFileLines: string[] = FileSystem.readFile(sourceNpmrcPath).split('\\n');\n    npmrcFileLines = npmrcFileLines.map((line) => (line || '').trim());\n    const resultLines: string[] = [];\n\n    // This finds environment variable tokens that look like \"${VAR_NAME}\"\n    const expansionRegExp: RegExp = /\\$\\{([^\\}]+)\\}/g;\n\n    // Comment lines start with \"#\" or \";\"\n    const commentRegExp: RegExp = /^\\s*[#;]/;\n\n    // Trim out lines that reference environment variables that aren't defined\n    for (const line of npmrcFileLines) {\n      let lineShouldBeTrimmed: boolean = false;\n\n      // Ignore comment lines\n      if (!commentRegExp.test(line)) {\n        const environmentVariables: string[] | null = line.match(expansionRegExp);\n        if (environmentVariables) {\n          for (const token of environmentVariables) {\n            // Remove the leading \"${\" and the trailing \"}\" from the token\n            const environmentVariableName: string = token.substring(2, token.length - 1);\n\n            // Is the environment variable defined?\n            if (!process.env[environmentVariableName]) {\n              // No, so trim this line\n              lineShouldBeTrimmed = true;\n              break;\n            }\n          }\n        }\n      }\n\n      if (lineShouldBeTrimmed) {\n        // Example output:\n        // \"; MISSING ENVIRONMENT VARIABLE: //my-registry.com/npm/:_authToken=${MY_AUTH_TOKEN}\"\n        resultLines.push('; MISSING ENVIRONMENT VARIABLE: ' + line);\n      } else {\n        resultLines.push(line);\n      }\n    }\n\n    FileSystem.writeFile(targetNpmrcPath, resultLines.join(os.EOL));\n  }\n\n  /**\n   * Copies the file \"sourcePath\" to \"destinationPath\", overwriting the target file location.\n   * If the source file does not exist, then the target file is deleted.\n   */\n  public static syncFile(sourcePath: string, destinationPath: string): void {\n    if (FileSystem.exists(sourcePath)) {\n      console.log(`Copying \"${sourcePath}\"`);\n      console.log(`  --> \"${destinationPath}\"`);\n      FileSystem.copyFile({ sourcePath, destinationPath });\n    } else {\n      if (FileSystem.exists(destinationPath)) {\n        // If the source file doesn't exist and there is one in the target, delete the one in the target\n        console.log(`Deleting ${destinationPath}`);\n        FileSystem.deleteFile(destinationPath);\n      }\n    }\n  }\n\n  /**\n   * syncNpmrc() copies the .npmrc file to the target folder, and also trims unusable lines from the .npmrc file.\n   * If the source .npmrc file not exist, then syncNpmrc() will delete an .npmrc that is found in the target folder.\n   *\n   * IMPORTANT: THIS CODE SHOULD BE KEPT UP TO DATE WITH _syncNpmrc() FROM scripts/install-run.ts\n   */\n  public static syncNpmrc(\n    sourceNpmrcFolder: string,\n    targetNpmrcFolder: string,\n    useNpmrcPublish?: boolean\n  ): void {\n    const sourceNpmrcPath: string = path.join(\n      sourceNpmrcFolder,\n      !useNpmrcPublish ? '.npmrc' : '.npmrc-publish'\n    );\n    const targetNpmrcPath: string = path.join(targetNpmrcFolder, '.npmrc');\n    try {\n      if (FileSystem.exists(sourceNpmrcPath)) {\n        Utilities.copyAndTrimNpmrcFile(sourceNpmrcPath, targetNpmrcPath);\n      } else if (FileSystem.exists(targetNpmrcPath)) {\n        // If the source .npmrc doesn't exist and there is one in the target, delete the one in the target\n        console.log(`Deleting ${targetNpmrcPath}`); // Verbose\n        FileSystem.deleteFile(targetNpmrcPath);\n      }\n    } catch (e) {\n      throw new Error(`Error syncing .npmrc file: ${e}`);\n    }\n  }\n\n  public static getRushConfigNotFoundError(): Error {\n    return new Error('Unable to find rush.json configuration file');\n  }\n\n  public static async usingAsync<TDisposable extends IDisposable>(\n    getDisposableAsync: () => Promise<TDisposable> | IDisposable,\n    doActionAsync: (disposable: TDisposable) => Promise<void> | void\n  ): Promise<void> {\n    let disposable: TDisposable | undefined;\n    try {\n      disposable = (await getDisposableAsync()) as TDisposable;\n      await doActionAsync(disposable);\n    } finally {\n      disposable?.dispose();\n    }\n  }\n\n  public static async readStreamToBufferAsync(stream: stream.Readable): Promise<Buffer> {\n    return await new Promise((resolve: (result: Buffer) => void, reject: (error: Error) => void) => {\n      const parts: Uint8Array[] = [];\n      stream.on('data', (chunk) => parts.push(chunk));\n      stream.on('error', (error) => reject(error));\n      stream.on('end', () => {\n        const result: Buffer = Buffer.concat(parts);\n        resolve(result);\n      });\n    });\n  }\n\n  private static _executeLifecycleCommandInternal<TCommandResult>(\n    command: string,\n    spawnFunction: (\n      command: string,\n      args: string[],\n      spawnOptions: child_process.SpawnOptions\n    ) => TCommandResult,\n    options: ILifecycleCommandOptions\n  ): TCommandResult {\n    let shellCommand: string = process.env.comspec || 'cmd';\n    let commandFlags: string = '/d /s /c';\n    let useShell: boolean = true;\n    if (process.platform !== 'win32') {\n      shellCommand = 'sh';\n      commandFlags = '-c';\n      useShell = false;\n    }\n\n    const environment: IEnvironment = Utilities._createEnvironmentForRushCommand({\n      initCwd: options.initCwd,\n      pathOptions: {\n        ...options.environmentPathOptions,\n        rushJsonFolder: options.rushConfiguration?.rushJsonFolder,\n        projectRoot: options.workingDirectory,\n        commonTempFolder: options.rushConfiguration ? options.rushConfiguration.commonTempFolder : undefined\n      }\n    });\n\n    return spawnFunction(shellCommand, [commandFlags, command], {\n      cwd: options.workingDirectory,\n      shell: useShell,\n      env: environment,\n      stdio: options.handleOutput ? ['pipe', 'pipe', 'pipe'] : [0, 1, 2]\n    });\n  }\n\n  /**\n   * Returns a process.env environment suitable for executing lifecycle scripts.\n   * @param initialEnvironment - an existing environment to copy instead of process.env\n   *\n   * @remarks\n   * Rush._assignRushInvokedFolder() assigns the `RUSH_INVOKED_FOLDER` variable globally\n   * via the parent process's environment.\n   */\n  private static _createEnvironmentForRushCommand(\n    options: ICreateEnvironmentForRushCommandOptions\n  ): IEnvironment {\n    if (options.initialEnvironment === undefined) {\n      options.initialEnvironment = process.env;\n    }\n\n    // Set some defaults for the environment\n    const environment: IEnvironment = {};\n    if (options.pathOptions?.rushJsonFolder) {\n      environment.RUSHSTACK_FILE_ERROR_BASE_FOLDER = options.pathOptions.rushJsonFolder;\n    }\n\n    for (const key of Object.getOwnPropertyNames(options.initialEnvironment)) {\n      const normalizedKey: string = os.platform() === 'win32' ? key.toUpperCase() : key;\n\n      // If Rush itself was invoked inside a lifecycle script, this may be set and would interfere\n      // with Rush's installations.  If we actually want it, we will set it explicitly below.\n      if (normalizedKey === 'INIT_CWD') {\n        continue;\n      }\n\n      // When NPM invokes a lifecycle event, it copies its entire configuration into environment\n      // variables.  Rush is supposed to be a deterministic controlled environment, so don't bring\n      // this along.\n      //\n      // NOTE: Longer term we should clean out the entire environment and use rush.json to bring\n      // back specific environment variables that the repo maintainer has determined to be safe.\n      if (normalizedKey.match(/^NPM_CONFIG_/)) {\n        continue;\n      }\n\n      // Use the uppercased environment variable name on Windows because environment variable names\n      // are case-insensitive on Windows\n      environment[normalizedKey] = options.initialEnvironment[key];\n    }\n\n    // When NPM invokes a lifecycle script, it sets an environment variable INIT_CWD that remembers\n    // the directory that NPM started in.  This allows naive scripts to change their current working directory\n    // and invoke NPM operations, while still be able to find a local .npmrc file.  Although Rush recommends\n    // for toolchain scripts to be professionally written (versus brittle stuff like\n    // \"cd ./lib && npm run tsc && cd ..\"), we support INIT_CWD for compatibility.\n    //\n    // More about this feature: https://github.com/npm/npm/pull/12356\n    if (options.initCwd) {\n      environment['INIT_CWD'] = options.initCwd; // eslint-disable-line dot-notation\n    }\n\n    if (options.pathOptions) {\n      if (options.pathOptions.includeRepoBin && options.pathOptions.commonTempFolder) {\n        environment.PATH = Utilities._prependNodeModulesBinToPath(\n          environment.PATH,\n          options.pathOptions.commonTempFolder\n        );\n      }\n\n      if (options.pathOptions.includeProjectBin && options.pathOptions.projectRoot) {\n        environment.PATH = Utilities._prependNodeModulesBinToPath(\n          environment.PATH,\n          options.pathOptions.projectRoot\n        );\n      }\n\n      if (options.pathOptions.additionalPathFolders) {\n        environment.PATH = [...options.pathOptions.additionalPathFolders, environment.PATH].join(\n          path.delimiter\n        );\n      }\n    }\n\n    return environment;\n  }\n\n  /**\n   * Prepend the node_modules/.bin folder under the specified folder to the specified PATH variable. For example,\n   * if `rootDirectory` is \"/foobar\" and `existingPath` is \"/bin\", this function will return\n   * \"/foobar/node_modules/.bin:/bin\"\n   */\n  private static _prependNodeModulesBinToPath(\n    existingPath: string | undefined,\n    rootDirectory: string\n  ): string {\n    const binPath: string = path.resolve(rootDirectory, 'node_modules', '.bin');\n    if (existingPath) {\n      return `${binPath}${path.delimiter}${existingPath}`;\n    } else {\n      return binPath;\n    }\n  }\n\n  /**\n   * Executes the command with the specified command-line parameters, and waits for it to complete.\n   * The current directory will be set to the specified workingDirectory.\n   */\n  private static _executeCommandInternal(\n    command: string,\n    args: string[],\n    workingDirectory: string,\n    stdio:\n      | 'pipe'\n      | 'ignore'\n      | 'inherit'\n      | (number | 'pipe' | 'ignore' | 'inherit' | 'ipc' | stream.Stream | null | undefined)[]\n      | undefined,\n    environment?: IEnvironment,\n    keepEnvironment: boolean = false\n  ): child_process.SpawnSyncReturns<Buffer> {\n    const options: child_process.SpawnSyncOptions = {\n      cwd: workingDirectory,\n      shell: true,\n      stdio: stdio,\n      env: keepEnvironment\n        ? environment\n        : Utilities._createEnvironmentForRushCommand({ initialEnvironment: environment }),\n      maxBuffer: 10 * 1024 * 1024 // Set default max buffer size to 10MB\n    };\n\n    // This is needed since we specify shell=true below.\n    // NOTE: On Windows if we escape \"NPM\", the spawnSync() function runs something like this:\n    //   [ 'C:\\\\Windows\\\\system32\\\\cmd.exe', '/s', '/c', '\"\"NPM\" \"install\"\"' ]\n    //\n    // Due to a bug with Windows cmd.exe, the npm.cmd batch file's \"%~dp0\" variable will\n    // return the current working directory instead of the batch file's directory.\n    // The workaround is to not escape, npm, i.e. do this instead:\n    //   [ 'C:\\\\Windows\\\\system32\\\\cmd.exe', '/s', '/c', '\"npm \"install\"\"' ]\n    //\n    // We will come up with a better solution for this when we promote executeCommand()\n    // into node-core-library, but for now this hack will unblock people:\n\n    // Only escape the command if it actually contains spaces:\n    const escapedCommand: string =\n      command.indexOf(' ') < 0 ? command : Utilities.escapeShellParameter(command);\n\n    const escapedArgs: string[] = args.map((x) => Utilities.escapeShellParameter(x));\n\n    let result: child_process.SpawnSyncReturns<Buffer> = child_process.spawnSync(\n      escapedCommand,\n      escapedArgs,\n      options\n    );\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    if (result.error && (result.error as any).errno === 'ENOENT') {\n      // This is a workaround for GitHub issue #25330\n      // https://github.com/nodejs/node-v0.x-archive/issues/25330\n      //\n      // TODO: The fully worked out solution for this problem is now provided by the \"Executable\" API\n      // from @rushstack/node-core-library\n      result = child_process.spawnSync(command + '.cmd', args, options);\n    }\n\n    Utilities._processResult(result);\n    return result;\n  }\n\n  private static _processResult(result: child_process.SpawnSyncReturns<Buffer>): void {\n    if (result.error) {\n      result.error.message += os.EOL + (result.stderr ? result.stderr.toString() + os.EOL : '');\n      throw result.error;\n    }\n\n    if (result.status) {\n      throw new Error(\n        'The command failed with exit code ' +\n          result.status +\n          os.EOL +\n          (result.stderr ? result.stderr.toString() : '')\n      );\n    }\n  }\n}\n"]}