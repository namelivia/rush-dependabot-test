{"version":3,"file":"ChangeFiles.js","sourceRoot":"","sources":["../../src/logic/ChangeFiles.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as path from 'path';\nimport { EOL } from 'os';\nimport { JsonFile, JsonSchema, Import } from '@rushstack/node-core-library';\n\nimport { Utilities } from '../utilities/Utilities';\nimport { IChangeInfo } from '../api/ChangeManagement';\nimport { IChangelog } from '../api/Changelog';\nimport { RushConfiguration } from '../api/RushConfiguration';\n\nconst glob: typeof import('glob') = Import.lazy('glob', require);\n\n/**\n * This class represents the collection of change files existing in the repo and provides operations\n * for those change files.\n */\nexport class ChangeFiles {\n  /**\n   * Change file path relative to changes folder.\n   */\n  private _files: string[] | undefined;\n  private _changesPath: string;\n\n  public constructor(changesPath: string) {\n    this._changesPath = changesPath;\n  }\n\n  /**\n   * Validate if the newly added change files match the changed packages.\n   */\n  public static validate(\n    newChangeFilePaths: string[],\n    changedPackages: string[],\n    rushConfiguration: RushConfiguration\n  ): void {\n    const schema: JsonSchema = JsonSchema.fromFile(\n      path.resolve(__dirname, '..', 'schemas', 'change-file.schema.json')\n    );\n\n    const projectsWithChangeDescriptions: Set<string> = new Set<string>();\n    newChangeFilePaths.forEach((filePath) => {\n      console.log(`Found change file: ${filePath}`);\n\n      const changeFile: IChangeInfo = JsonFile.loadAndValidate(filePath, schema);\n\n      if (rushConfiguration.hotfixChangeEnabled) {\n        if (changeFile && changeFile.changes) {\n          for (const change of changeFile.changes) {\n            if (change.type !== 'none' && change.type !== 'hotfix') {\n              throw new Error(\n                `Change file ${filePath} specifies a type of '${change.type}' ` +\n                  `but only 'hotfix' and 'none' change types may be used in a branch with 'hotfixChangeEnabled'.`\n              );\n            }\n          }\n        }\n      }\n\n      if (changeFile && changeFile.changes) {\n        changeFile.changes.forEach((change) => projectsWithChangeDescriptions.add(change.packageName));\n      } else {\n        throw new Error(`Invalid change file: ${filePath}`);\n      }\n    });\n\n    const projectsMissingChangeDescriptions: Set<string> = new Set(changedPackages);\n    projectsWithChangeDescriptions.forEach((name) => projectsMissingChangeDescriptions.delete(name));\n    if (projectsMissingChangeDescriptions.size > 0) {\n      const projectsMissingChangeDescriptionsArray: string[] = [];\n      projectsMissingChangeDescriptions.forEach((name) => projectsMissingChangeDescriptionsArray.push(name));\n      throw new Error(\n        [\n          'The following projects have been changed and require change descriptions, but change descriptions were not ' +\n            'detected for them:',\n          ...projectsMissingChangeDescriptionsArray.map((projectName) => `- ${projectName}`),\n          'To resolve this error, run \"rush change\". This will generate change description files that must be ' +\n            'committed to source control.'\n        ].join(EOL)\n      );\n    }\n  }\n\n  public static getChangeComments(newChangeFilePaths: string[]): Map<string, string[]> {\n    const changes: Map<string, string[]> = new Map<string, string[]>();\n\n    newChangeFilePaths.forEach((filePath) => {\n      console.log(`Found change file: ${filePath}`);\n      const changeRequest: IChangeInfo = JsonFile.load(filePath);\n      if (changeRequest && changeRequest.changes) {\n        changeRequest.changes!.forEach((change) => {\n          if (!changes.get(change.packageName)) {\n            changes.set(change.packageName, []);\n          }\n          if (change.comment && change.comment.length) {\n            changes.get(change.packageName)!.push(change.comment);\n          }\n        });\n      } else {\n        throw new Error(`Invalid change file: ${filePath}`);\n      }\n    });\n    return changes;\n  }\n\n  /**\n   * Get the array of absolute paths of change files.\n   */\n  public getFiles(): string[] {\n    if (!this._files) {\n      this._files = glob.sync(`${this._changesPath}/**/*.json`) || [];\n    }\n\n    return this._files;\n  }\n\n  /**\n   * Get the path of changes folder.\n   */\n  public getChangesPath(): string {\n    return this._changesPath;\n  }\n\n  /**\n   * Delete all change files\n   */\n  public deleteAll(shouldDelete: boolean, updatedChangelogs?: IChangelog[]): number {\n    if (updatedChangelogs) {\n      // Skip changes files if the package's change log is not updated.\n      const packagesToInclude: Set<string> = new Set<string>();\n      updatedChangelogs.forEach((changelog) => {\n        packagesToInclude.add(changelog.name);\n      });\n\n      const filesToDelete: string[] = this.getFiles().filter((filePath) => {\n        const changeRequest: IChangeInfo = JsonFile.load(filePath);\n        for (const changeInfo of changeRequest.changes!) {\n          if (!packagesToInclude.has(changeInfo.packageName)) {\n            return false;\n          }\n        }\n        return true;\n      });\n\n      return this._deleteFiles(filesToDelete, shouldDelete);\n    } else {\n      // Delete all change files.\n      return this._deleteFiles(this.getFiles(), shouldDelete);\n    }\n  }\n\n  private _deleteFiles(files: string[], shouldDelete: boolean): number {\n    if (files.length) {\n      console.log(\n        `${EOL}* ${shouldDelete ? 'DELETING:' : 'DRYRUN: Deleting'} ${files.length} change file(s).`\n      );\n\n      for (const filePath of files) {\n        console.log(` - ${filePath}`);\n\n        if (shouldDelete) {\n          Utilities.deleteFile(filePath);\n        }\n      }\n    }\n    return files.length;\n  }\n}\n"]}