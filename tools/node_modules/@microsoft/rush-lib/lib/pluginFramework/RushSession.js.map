{"version":3,"file":"RushSession.js","sourceRoot":"","sources":["../../src/pluginFramework/RushSession.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,oEAAgF;AAGhF,6CAAmE;AACnE,mDAAqD;AAerD;;GAEG;AACH,MAAa,WAAW;IAMtB,YAAmB,OAA4B;QAJ9B,sCAAiC,GAAgD,IAAI,GAAG,EAAE,CAAC;QAK1G,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QAExB,IAAI,CAAC,KAAK,GAAG,IAAI,kCAAkB,EAAE,CAAC;IACxC,CAAC;IAEM,SAAS,CAAC,IAAY;QAC3B,IAAI,CAAC,IAAI,EAAE;YACT,MAAM,IAAI,iCAAa,CAAC,mDAAmD,CAAC,CAAC;SAC9E;QAED,MAAM,gBAAgB,GAAsB,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC;QAC3E,MAAM,aAAa,GAAmB;YACpC,UAAU,EAAE,IAAI;YAChB,oBAAoB,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,cAAc,EAAE;YAC1D,gBAAgB;SACjB,CAAC;QACF,OAAO,IAAI,eAAM,CAAC,aAAa,CAAC,CAAC;IACnC,CAAC;IAED,IAAW,gBAAgB;QACzB,OAAO,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC;IACxC,CAAC;IAEM,sCAAsC,CAC3C,iBAAyB,EACzB,OAAuC;QAEvC,IAAI,IAAI,CAAC,iCAAiC,CAAC,GAAG,CAAC,iBAAiB,CAAC,EAAE;YACjE,MAAM,IAAI,KAAK,CAAC,sCAAsC,iBAAiB,8BAA8B,CAAC,CAAC;SACxG;QACD,IAAI,CAAC,iCAAiC,CAAC,GAAG,CAAC,iBAAiB,EAAE,OAAO,CAAC,CAAC;IACzE,CAAC;IAEM,iCAAiC,CACtC,iBAAyB;QAEzB,OAAO,IAAI,CAAC,iCAAiC,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;IACvE,CAAC;CACF;AA7CD,kCA6CC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { InternalError, ITerminalProvider } from '@rushstack/node-core-library';\nimport { IBuildCacheJson } from '../api/BuildCacheConfiguration';\nimport { ICloudBuildCacheProvider } from '../logic/buildCache/ICloudBuildCacheProvider';\nimport { ILogger, ILoggerOptions, Logger } from './logging/Logger';\nimport { RushLifecycleHooks } from './RushLifeCycle';\n\n/**\n * @beta\n */\nexport interface IRushSessionOptions {\n  terminalProvider: ITerminalProvider;\n  getIsDebugMode: () => boolean;\n}\n\n/**\n * @beta\n */\nexport type CloudBuildCacheProviderFactory = (buildCacheJson: IBuildCacheJson) => ICloudBuildCacheProvider;\n\n/**\n * @beta\n */\nexport class RushSession {\n  private readonly _options: IRushSessionOptions;\n  private readonly _cloudBuildCacheProviderFactories: Map<string, CloudBuildCacheProviderFactory> = new Map();\n\n  public readonly hooks: RushLifecycleHooks;\n\n  public constructor(options: IRushSessionOptions) {\n    this._options = options;\n\n    this.hooks = new RushLifecycleHooks();\n  }\n\n  public getLogger(name: string): ILogger {\n    if (!name) {\n      throw new InternalError('RushSession.getLogger(name) called without a name');\n    }\n\n    const terminalProvider: ITerminalProvider = this._options.terminalProvider;\n    const loggerOptions: ILoggerOptions = {\n      loggerName: name,\n      getShouldPrintStacks: () => this._options.getIsDebugMode(),\n      terminalProvider\n    };\n    return new Logger(loggerOptions);\n  }\n\n  public get terminalProvider(): ITerminalProvider {\n    return this._options.terminalProvider;\n  }\n\n  public registerCloudBuildCacheProviderFactory(\n    cacheProviderName: string,\n    factory: CloudBuildCacheProviderFactory\n  ): void {\n    if (this._cloudBuildCacheProviderFactories.has(cacheProviderName)) {\n      throw new Error(`A build cache provider factory for ${cacheProviderName} has already been registered`);\n    }\n    this._cloudBuildCacheProviderFactories.set(cacheProviderName, factory);\n  }\n\n  public getCloudBuildCacheProviderFactory(\n    cacheProviderName: string\n  ): CloudBuildCacheProviderFactory | undefined {\n    return this._cloudBuildCacheProviderFactories.get(cacheProviderName);\n  }\n}\n"]}