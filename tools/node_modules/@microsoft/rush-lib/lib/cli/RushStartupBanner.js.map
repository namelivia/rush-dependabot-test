{"version":3,"file":"RushStartupBanner.js","sourceRoot":"","sources":["../../src/cli/RushStartupBanner.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;AAE3D,2BAAyB;AACzB,uDAAiC;AAEjC,0DAAuD;AACvD,sEAAmE;AAEnE,MAAa,iBAAiB;IACrB,MAAM,CAAC,SAAS,CAAC,WAAmB,EAAE,SAAkB;QAC7D,MAAM,WAAW,GAAW,IAAI,CAAC,kBAAkB,EAAE,CAAC;QACtD,MAAM,aAAa,GAAW,WAAW,CAAC,CAAC,CAAC,GAAG,GAAG,IAAI,CAAC,kBAAkB,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QAEvG,OAAO,CAAC,GAAG,CACT,QAAG;YACD,cAAM,CAAC,IAAI,CAAC,gCAAgC,aAAa,EAAE,CAAC;YAC5D,cAAM,CAAC,IAAI,CAAC,MAAM,6BAAa,CAAC,cAAc,EAAE,CAAC;YACjD,QAAG;YACH,sBAAsB,WAAW,EAAE;YACnC,QAAG,CACN,CAAC;IACJ,CAAC;IAEM,MAAM,CAAC,oBAAoB,CAAC,WAAmB,EAAE,SAAkB;QACxE,MAAM,WAAW,GAAW,IAAI,CAAC,kBAAkB,EAAE,CAAC;QACtD,MAAM,aAAa,GAAW,WAAW,CAAC,CAAC,CAAC,GAAG,GAAG,IAAI,CAAC,kBAAkB,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QAEvG,OAAO,CAAC,GAAG,CAAC,cAAM,CAAC,IAAI,CAAC,gCAAgC,aAAa,EAAE,CAAC,GAAG,cAAc,WAAW,EAAE,CAAC,CAAC;IAC1G,CAAC;IAEO,MAAM,CAAC,kBAAkB;QAC/B,MAAM,WAAW,GAAW,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC;QAClD,MAAM,gBAAgB,GAAW,yCAAmB,CAAC,oBAAoB;YACvE,CAAC,CAAC,UAAU;YACZ,CAAC,CAAC,yCAAmB,CAAC,YAAY;gBAClC,CAAC,CAAC,KAAK;gBACP,CAAC,CAAC,SAAS,CAAC;QACd,OAAO,GAAG,WAAW,KAAK,gBAAgB,GAAG,CAAC;IAChD,CAAC;IAEO,MAAM,CAAC,kBAAkB,CAAC,WAAmB,EAAE,SAAkB;QACvE,OAAO,WAAW,GAAG,cAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC;IACtE,CAAC;CACF;AAnCD,8CAmCC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { EOL } from 'os';\nimport colors from 'colors/safe';\n\nimport { RushConstants } from '../logic/RushConstants';\nimport { NodeJsCompatibility } from '../logic/NodeJsCompatibility';\n\nexport class RushStartupBanner {\n  public static logBanner(rushVersion: string, isManaged: boolean): void {\n    const nodeVersion: string = this._formatNodeVersion();\n    const versionSuffix: string = rushVersion ? ' ' + this._formatRushVersion(rushVersion, isManaged) : '';\n\n    console.log(\n      EOL +\n        colors.bold(`Rush Multi-Project Build Tool${versionSuffix}`) +\n        colors.cyan(` - ${RushConstants.rushWebSiteUrl}`) +\n        EOL +\n        `Node.js version is ${nodeVersion}` +\n        EOL\n    );\n  }\n\n  public static logStreamlinedBanner(rushVersion: string, isManaged: boolean): void {\n    const nodeVersion: string = this._formatNodeVersion();\n    const versionSuffix: string = rushVersion ? ' ' + this._formatRushVersion(rushVersion, isManaged) : '';\n\n    console.log(colors.bold(`Rush Multi-Project Build Tool${versionSuffix}`) + ` - Node.js ${nodeVersion}`);\n  }\n\n  private static _formatNodeVersion(): string {\n    const nodeVersion: string = process.versions.node;\n    const nodeReleaseLabel: string = NodeJsCompatibility.isOddNumberedVersion\n      ? 'unstable'\n      : NodeJsCompatibility.isLtsVersion\n      ? 'LTS'\n      : 'pre-LTS';\n    return `${nodeVersion} (${nodeReleaseLabel})`;\n  }\n\n  private static _formatRushVersion(rushVersion: string, isManaged: boolean): string {\n    return rushVersion + colors.yellow(isManaged ? '' : ' (unmanaged)');\n  }\n}\n"]}