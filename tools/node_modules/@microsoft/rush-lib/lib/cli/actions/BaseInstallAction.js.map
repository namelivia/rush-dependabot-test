{"version":3,"file":"BaseInstallAction.js","sourceRoot":"","sources":["../../../src/cli/actions/BaseInstallAction.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport colors from 'colors/safe';\nimport * as os from 'os';\n\nimport { Import } from '@rushstack/node-core-library';\nimport {\n  CommandLineFlagParameter,\n  CommandLineIntegerParameter,\n  CommandLineStringParameter\n} from '@rushstack/ts-command-line';\n\nimport { BaseRushAction } from './BaseRushAction';\nimport { Event } from '../../api/EventHooks';\nimport { BaseInstallManager, IInstallManagerOptions } from '../../logic/base/BaseInstallManager';\nimport { PurgeManager } from '../../logic/PurgeManager';\nimport { SetupChecks } from '../../logic/SetupChecks';\nimport { StandardScriptUpdater } from '../../logic/StandardScriptUpdater';\nimport { Stopwatch } from '../../utilities/Stopwatch';\nimport { VersionMismatchFinder } from '../../logic/versionMismatch/VersionMismatchFinder';\nimport { Variants } from '../../api/Variants';\nimport { RushConstants } from '../../logic/RushConstants';\nimport { SelectionParameterSet } from '../SelectionParameterSet';\n\nconst installManagerFactoryModule: typeof import('../../logic/InstallManagerFactory') = Import.lazy(\n  '../../logic/InstallManagerFactory',\n  require\n);\n\n/**\n * This is the common base class for InstallAction and UpdateAction.\n */\nexport abstract class BaseInstallAction extends BaseRushAction {\n  protected _variant!: CommandLineStringParameter;\n  protected _purgeParameter!: CommandLineFlagParameter;\n  protected _bypassPolicyParameter!: CommandLineFlagParameter;\n  protected _noLinkParameter!: CommandLineFlagParameter;\n  protected _networkConcurrencyParameter!: CommandLineIntegerParameter;\n  protected _debugPackageManagerParameter!: CommandLineFlagParameter;\n  protected _maxInstallAttempts!: CommandLineIntegerParameter;\n  protected _ignoreHooksParameter!: CommandLineFlagParameter;\n  /*\n   * Subclasses can initialize the _selectionParameters property in order for\n   * the parameters to be written to the telemetry file\n   */\n  protected _selectionParameters?: SelectionParameterSet;\n\n  protected onDefineParameters(): void {\n    this._purgeParameter = this.defineFlagParameter({\n      parameterLongName: '--purge',\n      parameterShortName: '-p',\n      description: 'Perform \"rush purge\" before starting the installation'\n    });\n    this._bypassPolicyParameter = this.defineFlagParameter({\n      parameterLongName: '--bypass-policy',\n      description: 'Overrides enforcement of the \"gitPolicy\" rules from rush.json (use honorably!)'\n    });\n    this._noLinkParameter = this.defineFlagParameter({\n      parameterLongName: '--no-link',\n      description:\n        'If \"--no-link\" is specified, then project symlinks will NOT be created' +\n        ' after the installation completes.  You will need to run \"rush link\" manually.' +\n        ' This flag is useful for automated builds that want to report stages individually' +\n        ' or perform extra operations in between the two stages. This flag is not supported' +\n        ' when using workspaces.'\n    });\n    this._networkConcurrencyParameter = this.defineIntegerParameter({\n      parameterLongName: '--network-concurrency',\n      argumentName: 'COUNT',\n      description:\n        'If specified, limits the maximum number of concurrent network requests.' +\n        '  This is useful when troubleshooting network failures.'\n    });\n    this._debugPackageManagerParameter = this.defineFlagParameter({\n      parameterLongName: '--debug-package-manager',\n      description:\n        'Activates verbose logging for the package manager. You will probably want to pipe' +\n        ' the output of Rush to a file when using this command.'\n    });\n    this._maxInstallAttempts = this.defineIntegerParameter({\n      parameterLongName: '--max-install-attempts',\n      argumentName: 'NUMBER',\n      description: `Overrides the default maximum number of install attempts.`,\n      defaultValue: RushConstants.defaultMaxInstallAttempts\n    });\n    this._ignoreHooksParameter = this.defineFlagParameter({\n      parameterLongName: '--ignore-hooks',\n      description: `Skips execution of the \"eventHooks\" scripts defined in rush.json. Make sure you know what you are skipping.`\n    });\n    this._variant = this.defineStringParameter(Variants.VARIANT_PARAMETER);\n  }\n\n  protected abstract buildInstallOptionsAsync(): Promise<IInstallManagerOptions>;\n\n  protected async runAsync(): Promise<void> {\n    VersionMismatchFinder.ensureConsistentVersions(this.rushConfiguration, {\n      variant: this._variant.value\n    });\n\n    const stopwatch: Stopwatch = Stopwatch.start();\n\n    SetupChecks.validate(this.rushConfiguration);\n    let warnAboutScriptUpdate: boolean = false;\n    if (this.actionName === 'update') {\n      warnAboutScriptUpdate = StandardScriptUpdater.update(this.rushConfiguration);\n    } else {\n      StandardScriptUpdater.validate(this.rushConfiguration);\n    }\n\n    this.eventHooksManager.handle(\n      Event.preRushInstall,\n      this.parser.isDebug,\n      this._ignoreHooksParameter.value\n    );\n\n    const purgeManager: PurgeManager = new PurgeManager(this.rushConfiguration, this.rushGlobalFolder);\n\n    if (this._purgeParameter.value!) {\n      console.log('The --purge flag was specified, so performing \"rush purge\"');\n      purgeManager.purgeNormal();\n      console.log('');\n    }\n\n    if (this._networkConcurrencyParameter.value) {\n      if (this.rushConfiguration.packageManager !== 'pnpm') {\n        throw new Error(\n          `The \"${this._networkConcurrencyParameter.longName}\" parameter is` +\n            ` only supported when using the PNPM package manager.`\n        );\n      }\n    }\n\n    // Because the 'defaultValue' option on the _maxInstallAttempts parameter is set,\n    // it is safe to assume that the value is not null\n    if (this._maxInstallAttempts.value! < 1) {\n      throw new Error(`The value of \"${this._maxInstallAttempts.longName}\" must be positive and nonzero.`);\n    }\n\n    const installManagerOptions: IInstallManagerOptions = await this.buildInstallOptionsAsync();\n\n    const installManager: BaseInstallManager =\n      installManagerFactoryModule.InstallManagerFactory.getInstallManager(\n        this.rushConfiguration,\n        this.rushGlobalFolder,\n        purgeManager,\n        installManagerOptions\n      );\n\n    let installSuccessful: boolean = true;\n    try {\n      await installManager.doInstallAsync();\n\n      if (warnAboutScriptUpdate) {\n        console.log(\n          os.EOL +\n            colors.yellow(\n              'Rush refreshed some files in the \"common/scripts\" folder.' +\n                '  Please commit this change to Git.'\n            )\n        );\n      }\n\n      console.log(\n        os.EOL + colors.green(`Rush ${this.actionName} finished successfully. (${stopwatch.toString()})`)\n      );\n    } catch (error) {\n      installSuccessful = false;\n      throw error;\n    } finally {\n      purgeManager.deleteAll();\n      stopwatch.stop();\n\n      this._collectTelemetry(stopwatch, installManagerOptions, installSuccessful);\n      this.parser.flushTelemetry();\n      this.eventHooksManager.handle(\n        Event.postRushInstall,\n        this.parser.isDebug,\n        this._ignoreHooksParameter.value\n      );\n    }\n  }\n\n  private _collectTelemetry(\n    stopwatch: Stopwatch,\n    installManagerOptions: IInstallManagerOptions,\n    success: boolean\n  ): void {\n    if (this.parser.telemetry) {\n      const extraData: Record<string, string> = {\n        mode: this.actionName,\n        clean: (!!this._purgeParameter.value).toString(),\n        debug: installManagerOptions.debug.toString(),\n        full: installManagerOptions.fullUpgrade.toString(),\n        ...this.getParameterStringMap(),\n        ...this._selectionParameters?.getTelemetry()\n      };\n      this.parser.telemetry.log({\n        name: 'install',\n        durationInSeconds: stopwatch.duration,\n        result: success ? 'Succeeded' : 'Failed',\n        extraData\n      });\n    }\n  }\n}\n"]}