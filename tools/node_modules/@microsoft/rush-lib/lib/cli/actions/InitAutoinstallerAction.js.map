{"version":3,"file":"InitAutoinstallerAction.js","sourceRoot":"","sources":["../../../src/cli/actions/InitAutoinstallerAction.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;AAE3D,uDAAiC;AAGjC,oEAA+F;AAE/F,qDAAkD;AAElD,6DAA0D;AAE1D,MAAa,uBAAwB,SAAQ,+BAAc;IAGzD,YAAmB,MAA6B;QAC9C,KAAK,CAAC;YACJ,UAAU,EAAE,oBAAoB;YAChC,OAAO,EAAE,iCAAiC;YAC1C,aAAa,EACX,6FAA6F;gBAC7F,kGAAkG;gBAClG,mFAAmF;YACrF,MAAM;SACP,CAAC,CAAC;IACL,CAAC;IAES,kBAAkB;QAC1B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,qBAAqB,CAAC;YACtC,iBAAiB,EAAE,QAAQ;YAC3B,YAAY,EAAE,oBAAoB;YAClC,QAAQ,EAAE,IAAI;YACd,WAAW,EACT,0GAA0G;SAC7G,CAAC,CAAC;IACL,CAAC;IAES,KAAK,CAAC,QAAQ;QACtB,MAAM,iBAAiB,GAAW,IAAI,CAAC,KAAK,CAAC,KAAM,CAAC;QAEpD,MAAM,aAAa,GAAkB,IAAI,6BAAa,CAAC;YACrD,iBAAiB;YACjB,iBAAiB,EAAE,IAAI,CAAC,iBAAiB;SAC1C,CAAC,CAAC;QAEH,IAAI,8BAAU,CAAC,MAAM,CAAC,aAAa,CAAC,cAAc,CAAC,EAAE;YACnD,mCAAmC;YACnC,IAAI,8BAAU,CAAC,mBAAmB,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC3E,MAAM,IAAI,KAAK,CAAC,oCAAoC,GAAG,aAAa,CAAC,cAAc,CAAC,CAAC;aACtF;SACF;QAED,MAAM,WAAW,GAAiB;YAChC,IAAI,EAAE,iBAAiB;YACvB,OAAO,EAAE,OAAO;YAChB,OAAO,EAAE,IAAI;YACb,YAAY,EAAE,EAAE;SACjB,CAAC;QAEF,OAAO,CAAC,GAAG,CAAC,cAAM,CAAC,KAAK,CAAC,oBAAoB,CAAC,GAAG,aAAa,CAAC,eAAe,CAAC,CAAC;QAEhF,4BAAQ,CAAC,IAAI,CAAC,WAAW,EAAE,aAAa,CAAC,eAAe,EAAE;YACxD,kBAAkB,EAAE,IAAI;YACxB,iBAAiB,EAAE,+BAAW,CAAC,SAAS;SACzC,CAAC,CAAC;QAEH,OAAO,CAAC,GAAG,CAAC,uEAAuE,CAAC,CAAC;IACvF,CAAC;CACF;AAxDD,0DAwDC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport colors from 'colors/safe';\n\nimport { CommandLineStringParameter } from '@rushstack/ts-command-line';\nimport { FileSystem, NewlineKind, IPackageJson, JsonFile } from '@rushstack/node-core-library';\n\nimport { BaseRushAction } from './BaseRushAction';\nimport { RushCommandLineParser } from '../RushCommandLineParser';\nimport { Autoinstaller } from '../../logic/Autoinstaller';\n\nexport class InitAutoinstallerAction extends BaseRushAction {\n  private _name!: CommandLineStringParameter;\n\n  public constructor(parser: RushCommandLineParser) {\n    super({\n      actionName: 'init-autoinstaller',\n      summary: 'Initializes a new autoinstaller',\n      documentation:\n        'Use this command to initialize a new autoinstaller folder.  Autoinstallers provide a way to' +\n        ' manage a set of related dependencies that are used for scripting scenarios outside of the usual' +\n        ' \"rush install\" context.  See the command-line.json documentation for an example.',\n      parser\n    });\n  }\n\n  protected onDefineParameters(): void {\n    this._name = this.defineStringParameter({\n      parameterLongName: '--name',\n      argumentName: 'AUTOINSTALLER_NAME',\n      required: true,\n      description:\n        'Specifies the name of the autoinstaller folder, which must conform to the naming rules for NPM packages.'\n    });\n  }\n\n  protected async runAsync(): Promise<void> {\n    const autoinstallerName: string = this._name.value!;\n\n    const autoinstaller: Autoinstaller = new Autoinstaller({\n      autoinstallerName,\n      rushConfiguration: this.rushConfiguration\n    });\n\n    if (FileSystem.exists(autoinstaller.folderFullPath)) {\n      // It's okay if the folder is empty\n      if (FileSystem.readFolderItemNames(autoinstaller.folderFullPath).length > 0) {\n        throw new Error('The target folder already exists: ' + autoinstaller.folderFullPath);\n      }\n    }\n\n    const packageJson: IPackageJson = {\n      name: autoinstallerName,\n      version: '1.0.0',\n      private: true,\n      dependencies: {}\n    };\n\n    console.log(colors.green('Creating package: ') + autoinstaller.packageJsonPath);\n\n    JsonFile.save(packageJson, autoinstaller.packageJsonPath, {\n      ensureFolderExists: true,\n      newlineConversion: NewlineKind.OsDefault\n    });\n\n    console.log('\\nFile successfully written. Add your dependencies before committing.');\n  }\n}\n"]}