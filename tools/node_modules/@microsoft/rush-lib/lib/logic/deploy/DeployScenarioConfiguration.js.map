{"version":3,"file":"DeployScenarioConfiguration.js","sourceRoot":"","sources":["../../../src/logic/deploy/DeployScenarioConfiguration.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport colors from 'colors/safe';\nimport * as path from 'path';\nimport { FileSystem, JsonFile, JsonSchema } from '@rushstack/node-core-library';\nimport { RushConfiguration } from '../../api/RushConfiguration';\n\n// Describes IDeployScenarioJson.projectSettings\nexport interface IDeployScenarioProjectJson {\n  projectName: string;\n  additionalProjectsToInclude?: string[];\n  additionalDependenciesToInclude?: string[];\n  dependenciesToExclude?: string[];\n}\n\n// The parsed JSON file structure, as defined by the \"deploy-scenario.schema.json\" JSON schema\nexport interface IDeployScenarioJson {\n  deploymentProjectNames: string[];\n  includeDevDependencies?: boolean;\n  includeNpmIgnoreFiles?: boolean;\n  omitPnpmWorkaroundLinks?: boolean;\n  linkCreation?: 'default' | 'script' | 'none';\n  folderToCopy?: string;\n  projectSettings?: IDeployScenarioProjectJson[];\n}\n\nexport class DeployScenarioConfiguration {\n  // Used by validateScenarioName()\n  // Matches lowercase words separated by dashes.\n  // Example: \"deploy-the-thing123\"\n  private static _scenarioNameRegExp: RegExp = /^[a-z0-9]+(-[a-z0-9]+)*$/;\n\n  private static _jsonSchema: JsonSchema = JsonSchema.fromFile(\n    path.join(__dirname, '../../schemas/deploy-scenario.schema.json')\n  );\n\n  public readonly json: IDeployScenarioJson;\n\n  /**\n   * Used to lookup items in IDeployScenarioJson.projectSettings based on their IDeployScenarioProjectJson.projectName\n   */\n  public readonly projectJsonsByName: Map<string, IDeployScenarioProjectJson>;\n\n  private constructor(\n    json: IDeployScenarioJson,\n    projectJsonsByName: Map<string, IDeployScenarioProjectJson>\n  ) {\n    this.json = json;\n    this.projectJsonsByName = projectJsonsByName;\n  }\n\n  /**\n   * Validates that the input string conforms to the naming rules for a \"rush deploy\" scenario name.\n   */\n  public static validateScenarioName(scenarioName: string): void {\n    if (!scenarioName) {\n      throw new Error('The scenario name cannot be an empty string');\n    }\n    if (!this._scenarioNameRegExp.test(scenarioName)) {\n      throw new Error(\n        `\"${scenarioName}\" is not a valid scenario name. The name must be comprised of` +\n          ' lowercase letters and numbers, separated by single hyphens. Example: \"my-scenario\"'\n      );\n    }\n  }\n\n  /**\n   * Given the --scenarioName value, return the full path of the filename.\n   *\n   * Example: \"ftp-site\" --> \"...common/config/rush/deploy-ftp-site.json\"\n   * Example: undefined --> \"...common/config/rush/deploy.json\"\n   */\n  public static getConfigFilePath(\n    scenarioName: string | undefined,\n    rushConfiguration: RushConfiguration\n  ): string {\n    let scenarioFileName: string;\n\n    if (scenarioName) {\n      DeployScenarioConfiguration.validateScenarioName(scenarioName);\n      scenarioFileName = `deploy-${scenarioName}.json`;\n    } else {\n      scenarioFileName = `deploy.json`;\n    }\n\n    return path.join(rushConfiguration.commonRushConfigFolder, scenarioFileName);\n  }\n\n  public static loadFromFile(\n    scenarioFilePath: string,\n    rushConfiguration: RushConfiguration\n  ): DeployScenarioConfiguration {\n    if (!FileSystem.exists(scenarioFilePath)) {\n      throw new Error('The scenario config file was not found: ' + scenarioFilePath);\n    }\n\n    console.log(colors.cyan('Loading deployment scenario: ') + scenarioFilePath);\n\n    const deployScenarioJson: IDeployScenarioJson = JsonFile.loadAndValidate(\n      scenarioFilePath,\n      DeployScenarioConfiguration._jsonSchema\n    );\n\n    // Apply the defaults\n    if (!deployScenarioJson.linkCreation) {\n      deployScenarioJson.linkCreation = 'default';\n    }\n\n    const deployScenarioProjectJsonsByName: Map<string, IDeployScenarioProjectJson> = new Map();\n\n    for (const projectSetting of deployScenarioJson.projectSettings || []) {\n      // Validate projectSetting.projectName\n      if (!rushConfiguration.getProjectByName(projectSetting.projectName)) {\n        throw new Error(\n          `The \"projectSettings\" section refers to the project name \"${projectSetting.projectName}\"` +\n            ` which was not found in rush.json`\n        );\n      }\n      for (const additionalProjectsToInclude of projectSetting.additionalProjectsToInclude || []) {\n        if (!rushConfiguration.getProjectByName(projectSetting.projectName)) {\n          throw new Error(\n            `The \"additionalProjectsToInclude\" setting refers to the` +\n              ` project name \"${additionalProjectsToInclude}\" which was not found in rush.json`\n          );\n        }\n      }\n      deployScenarioProjectJsonsByName.set(projectSetting.projectName, projectSetting);\n    }\n    return new DeployScenarioConfiguration(deployScenarioJson, deployScenarioProjectJsonsByName);\n  }\n}\n"]}