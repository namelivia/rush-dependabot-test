{"version":3,"file":"RushCommandLineParser.js","sourceRoot":"","sources":["../../src/cli/RushCommandLineParser.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport colors from 'colors/safe';\nimport * as os from 'os';\nimport * as path from 'path';\n\nimport { CommandLineParser, CommandLineFlagParameter, CommandLineHelper } from '@rushstack/ts-command-line';\nimport {\n  InternalError,\n  AlreadyReportedError,\n  ConsoleTerminalProvider,\n  Terminal\n} from '@rushstack/node-core-library';\nimport { PrintUtilities } from '@rushstack/terminal';\n\nimport { RushConfiguration } from '../api/RushConfiguration';\nimport { RushConstants } from '../logic/RushConstants';\nimport {\n  Command,\n  CommandLineConfiguration,\n  IGlobalCommandConfig,\n  IPhasedCommandConfig\n} from '../api/CommandLineConfiguration';\n\nimport { AddAction } from './actions/AddAction';\nimport { ChangeAction } from './actions/ChangeAction';\nimport { CheckAction } from './actions/CheckAction';\nimport { DeployAction } from './actions/DeployAction';\nimport { InitAction } from './actions/InitAction';\nimport { InitAutoinstallerAction } from './actions/InitAutoinstallerAction';\nimport { InitDeployAction } from './actions/InitDeployAction';\nimport { InstallAction } from './actions/InstallAction';\nimport { LinkAction } from './actions/LinkAction';\nimport { ListAction } from './actions/ListAction';\nimport { PublishAction } from './actions/PublishAction';\nimport { PurgeAction } from './actions/PurgeAction';\nimport { ScanAction } from './actions/ScanAction';\nimport { UnlinkAction } from './actions/UnlinkAction';\nimport { UpdateAction } from './actions/UpdateAction';\nimport { UpdateAutoinstallerAction } from './actions/UpdateAutoinstallerAction';\nimport { VersionAction } from './actions/VersionAction';\nimport { UpdateCloudCredentialsAction } from './actions/UpdateCloudCredentialsAction';\n\nimport { GlobalScriptAction } from './scriptActions/GlobalScriptAction';\nimport { IBaseScriptActionOptions } from './scriptActions/BaseScriptAction';\n\nimport { Telemetry } from '../logic/Telemetry';\nimport { RushGlobalFolder } from '../api/RushGlobalFolder';\nimport { NodeJsCompatibility } from '../logic/NodeJsCompatibility';\nimport { SetupAction } from './actions/SetupAction';\nimport { ICustomCommandLineConfigurationInfo, PluginManager } from '../pluginFramework/PluginManager';\nimport { RushSession } from '../pluginFramework/RushSession';\nimport { PhasedScriptAction } from './scriptActions/PhasedScriptAction';\nimport { IBuiltInPluginConfiguration } from '../pluginFramework/PluginLoader/BuiltInPluginLoader';\n\n/**\n * Options for `RushCommandLineParser`.\n */\nexport interface IRushCommandLineParserOptions {\n  cwd: string; // Defaults to `cwd`\n  alreadyReportedNodeTooNewError: boolean;\n  builtInPluginConfigurations: IBuiltInPluginConfiguration[];\n}\n\nexport class RushCommandLineParser extends CommandLineParser {\n  public telemetry: Telemetry | undefined;\n  public rushGlobalFolder!: RushGlobalFolder;\n  public readonly rushConfiguration!: RushConfiguration;\n  public readonly rushSession: RushSession;\n  public readonly pluginManager: PluginManager;\n\n  private _debugParameter!: CommandLineFlagParameter;\n  private _quietParameter!: CommandLineFlagParameter;\n  private _restrictConsoleOutput: boolean = RushCommandLineParser.shouldRestrictConsoleOutput();\n  private readonly _rushOptions: IRushCommandLineParserOptions;\n  private readonly _terminalProvider: ConsoleTerminalProvider;\n  private readonly _terminal: Terminal;\n\n  public constructor(options?: Partial<IRushCommandLineParserOptions>) {\n    super({\n      toolFilename: 'rush',\n      toolDescription:\n        'Rush makes life easier for JavaScript developers who develop, build, and publish' +\n        ' many packages from a central Git repo.  It is designed to handle very large repositories' +\n        ' supporting many projects and people.  Rush provides policies, protections, and customizations' +\n        ' that help coordinate teams and safely onboard new contributors.  Rush also generates change logs' +\n        ' and automates package publishing.  It can manage decoupled subsets of projects with different' +\n        ' release and versioning strategies.  A full API is included to facilitate integration with other' +\n        ' automation tools.  If you are looking for a proven turnkey solution for monorepo management,' +\n        ' Rush is for you.',\n      enableTabCompletionAction: true\n    });\n\n    this._terminalProvider = new ConsoleTerminalProvider();\n    this._terminal = new Terminal(this._terminalProvider);\n    this._rushOptions = this._normalizeOptions(options || {});\n\n    try {\n      const rushJsonFilename: string | undefined = RushConfiguration.tryFindRushJsonLocation({\n        startingFolder: this._rushOptions.cwd,\n        showVerbose: !this._restrictConsoleOutput\n      });\n      if (rushJsonFilename) {\n        this.rushConfiguration = RushConfiguration.loadFromConfigurationFile(rushJsonFilename);\n      }\n    } catch (error) {\n      this._reportErrorAndSetExitCode(error as Error);\n    }\n\n    NodeJsCompatibility.warnAboutCompatibilityIssues({\n      isRushLib: true,\n      alreadyReportedNodeTooNewError: this._rushOptions.alreadyReportedNodeTooNewError,\n      rushConfiguration: this.rushConfiguration\n    });\n\n    this.rushSession = new RushSession({\n      getIsDebugMode: () => this.isDebug,\n      terminalProvider: this._terminalProvider\n    });\n    this.pluginManager = new PluginManager({\n      rushSession: this.rushSession,\n      rushConfiguration: this.rushConfiguration,\n      terminal: this._terminal,\n      builtInPluginConfigurations: this._rushOptions.builtInPluginConfigurations,\n      restrictConsoleOutput: this._restrictConsoleOutput\n    });\n\n    this._populateActions();\n\n    const pluginCommandLineConfigurations: ICustomCommandLineConfigurationInfo[] =\n      this.pluginManager.tryGetCustomCommandLineConfigurationInfos();\n    for (const { commandLineConfiguration, pluginLoader } of pluginCommandLineConfigurations) {\n      try {\n        this._addCommandLineConfigActions(commandLineConfiguration);\n      } catch (e) {\n        this._terminal.writeErrorLine(\n          `Error from plugin ${pluginLoader.pluginName} by ${pluginLoader.packageName}: ${(\n            e as Error\n          ).toString()}`\n        );\n      }\n    }\n  }\n\n  public get isDebug(): boolean {\n    return this._debugParameter.value;\n  }\n\n  public get isQuiet(): boolean {\n    return this._quietParameter.value;\n  }\n\n  /**\n   * Utility to determine if the app should restrict writing to the console.\n   */\n  public static shouldRestrictConsoleOutput(): boolean {\n    if (CommandLineHelper.isTabCompletionActionRequest(process.argv)) {\n      return true;\n    }\n\n    for (let i: number = 2; i < process.argv.length; i++) {\n      const arg: string = process.argv[i];\n      if (arg === '-q' || arg === '--quiet' || arg === '--json') {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public flushTelemetry(): void {\n    this.telemetry?.flush();\n  }\n\n  public async execute(args?: string[]): Promise<boolean> {\n    this._terminalProvider.verboseEnabled = this.isDebug;\n\n    await this.pluginManager.tryInitializeUnassociatedPluginsAsync();\n\n    return await super.execute(args);\n  }\n\n  protected onDefineParameters(): void {\n    this._debugParameter = this.defineFlagParameter({\n      parameterLongName: '--debug',\n      parameterShortName: '-d',\n      description: 'Show the full call stack if an error occurs while executing the tool'\n    });\n\n    this._quietParameter = this.defineFlagParameter({\n      parameterLongName: '--quiet',\n      parameterShortName: '-q',\n      description: 'Hide rush startup information'\n    });\n  }\n\n  protected async onExecute(): Promise<void> {\n    // Defensively set the exit code to 1 so if Rush crashes for whatever reason, we'll have a nonzero exit code.\n    // For example, Node.js currently has the inexcusable design of terminating with zero exit code when\n    // there is an uncaught promise exception.  This will supposedly be fixed in Node.js 9.\n    // Ideally we should do this for all the Rush actions, but \"rush build\" is the most critical one\n    // -- if it falsely appears to succeed, we could merge bad PRs, publish empty packages, etc.\n    process.exitCode = 1;\n\n    if (this._debugParameter.value) {\n      InternalError.breakInDebugger = true;\n    }\n\n    try {\n      await this._wrapOnExecuteAsync();\n      // If we make it here, everything went fine, so reset the exit code back to 0\n      process.exitCode = 0;\n    } catch (error) {\n      this._reportErrorAndSetExitCode(error as Error);\n    }\n\n    await this.telemetry?.ensureFlushedAsync();\n  }\n\n  private _normalizeOptions(options: Partial<IRushCommandLineParserOptions>): IRushCommandLineParserOptions {\n    return {\n      cwd: options.cwd || process.cwd(),\n      alreadyReportedNodeTooNewError: options.alreadyReportedNodeTooNewError || false,\n      builtInPluginConfigurations: options.builtInPluginConfigurations || []\n    };\n  }\n\n  private async _wrapOnExecuteAsync(): Promise<void> {\n    if (this.rushConfiguration) {\n      this.telemetry = new Telemetry(this.rushConfiguration, this.rushSession);\n    }\n\n    await super.onExecute();\n    if (this.telemetry) {\n      this.flushTelemetry();\n    }\n  }\n\n  private _populateActions(): void {\n    try {\n      this.rushGlobalFolder = new RushGlobalFolder();\n\n      // Alphabetical order\n      this.addAction(new AddAction(this));\n      this.addAction(new ChangeAction(this));\n      this.addAction(new CheckAction(this));\n      this.addAction(new DeployAction(this));\n      this.addAction(new InitAction(this));\n      this.addAction(new InitAutoinstallerAction(this));\n      this.addAction(new InitDeployAction(this));\n      this.addAction(new InstallAction(this));\n      this.addAction(new LinkAction(this));\n      this.addAction(new ListAction(this));\n      this.addAction(new PublishAction(this));\n      this.addAction(new PurgeAction(this));\n      this.addAction(new ScanAction(this));\n      this.addAction(new SetupAction(this));\n      this.addAction(new UnlinkAction(this));\n      this.addAction(new UpdateAction(this));\n      this.addAction(new UpdateAutoinstallerAction(this));\n      this.addAction(new UpdateCloudCredentialsAction(this));\n      this.addAction(new VersionAction(this));\n\n      this._populateScriptActions();\n    } catch (error) {\n      this._reportErrorAndSetExitCode(error as Error);\n    }\n  }\n\n  private _populateScriptActions(): void {\n    // If there is not a rush.json file, we still want \"build\" and \"rebuild\" to appear in the\n    // command-line help\n    let commandLineConfigFilePath: string | undefined;\n    if (this.rushConfiguration) {\n      commandLineConfigFilePath = path.join(\n        this.rushConfiguration.commonRushConfigFolder,\n        RushConstants.commandLineFilename\n      );\n    }\n\n    const commandLineConfiguration: CommandLineConfiguration =\n      CommandLineConfiguration.loadFromFileOrDefault(commandLineConfigFilePath);\n    this._addCommandLineConfigActions(commandLineConfiguration);\n  }\n\n  private _addCommandLineConfigActions(commandLineConfiguration: CommandLineConfiguration): void {\n    // Register each custom command\n    for (const command of commandLineConfiguration.commands.values()) {\n      this._addCommandLineConfigAction(commandLineConfiguration, command);\n    }\n  }\n\n  private _addCommandLineConfigAction(\n    commandLineConfiguration: CommandLineConfiguration,\n    command: Command\n  ): void {\n    if (this.tryGetAction(command.name)) {\n      throw new Error(\n        `${RushConstants.commandLineFilename} defines a command \"${command.name}\"` +\n          ` using a name that already exists`\n      );\n    }\n\n    switch (command.commandKind) {\n      case RushConstants.globalCommandKind: {\n        this._addGlobalScriptAction(commandLineConfiguration, command);\n        break;\n      }\n\n      case RushConstants.phasedCommandKind: {\n        if (\n          !command.isSynthetic && // synthetic commands come from bulk commands\n          !this.rushConfiguration.experimentsConfiguration.configuration.phasedCommands\n        ) {\n          throw new Error(\n            `${RushConstants.commandLineFilename} defines a command \"${command.name}\" ` +\n              `that uses the \"${RushConstants.phasedCommandKind}\" command kind. To use this command kind, ` +\n              'the \"phasedCommands\" experiment must be enabled. Note that this feature is not complete ' +\n              'and will not work as expected.'\n          );\n        }\n\n        this._addPhasedCommandLineConfigAction(commandLineConfiguration, command);\n        break;\n      }\n\n      default:\n        throw new Error(\n          `${RushConstants.commandLineFilename} defines a command \"${(command as Command).name}\"` +\n            ` using an unsupported command kind \"${(command as Command).commandKind}\"`\n        );\n    }\n  }\n\n  private _getSharedCommandActionOptions<TCommand extends Command>(\n    commandLineConfiguration: CommandLineConfiguration,\n    command: TCommand\n  ): IBaseScriptActionOptions<TCommand> {\n    return {\n      actionName: command.name,\n      summary: command.summary,\n      documentation: command.description || command.summary,\n      safeForSimultaneousRushProcesses: command.safeForSimultaneousRushProcesses,\n\n      command,\n      parser: this,\n      commandLineConfiguration: commandLineConfiguration\n    };\n  }\n\n  private _addGlobalScriptAction(\n    commandLineConfiguration: CommandLineConfiguration,\n    command: IGlobalCommandConfig\n  ): void {\n    if (\n      command.name === RushConstants.buildCommandName ||\n      command.name === RushConstants.rebuildCommandName\n    ) {\n      throw new Error(\n        `${RushConstants.commandLineFilename} defines a command \"${command.name}\" using ` +\n          `the command kind \"${RushConstants.globalCommandKind}\". This command can only be designated as a command ` +\n          `kind \"${RushConstants.bulkCommandKind}\" or \"${RushConstants.phasedCommandKind}\".`\n      );\n    }\n\n    const sharedCommandOptions: IBaseScriptActionOptions<IGlobalCommandConfig> =\n      this._getSharedCommandActionOptions(commandLineConfiguration, command);\n\n    this.addAction(\n      new GlobalScriptAction({\n        ...sharedCommandOptions,\n\n        shellCommand: command.shellCommand,\n        autoinstallerName: command.autoinstallerName\n      })\n    );\n  }\n\n  private _addPhasedCommandLineConfigAction(\n    commandLineConfiguration: CommandLineConfiguration,\n    command: IPhasedCommandConfig\n  ): void {\n    const baseCommandOptions: IBaseScriptActionOptions<IPhasedCommandConfig> =\n      this._getSharedCommandActionOptions(commandLineConfiguration, command);\n\n    this.addAction(\n      new PhasedScriptAction({\n        ...baseCommandOptions,\n\n        enableParallelism: command.enableParallelism,\n        incremental: command.incremental || false,\n        disableBuildCache: command.disableBuildCache || false,\n\n        initialPhases: command.phases,\n        watchPhases: command.watchPhases,\n        phases: commandLineConfiguration.phases,\n\n        alwaysWatch: command.alwaysWatch,\n        alwaysInstall: command.alwaysInstall\n      })\n    );\n  }\n\n  private _reportErrorAndSetExitCode(error: Error): void {\n    if (!(error instanceof AlreadyReportedError)) {\n      const prefix: string = 'ERROR: ';\n      console.error(os.EOL + colors.red(PrintUtilities.wrapWords(prefix + error.message)));\n    }\n\n    if (this._debugParameter.value) {\n      // If catchSyncErrors() called this, then show a call stack similar to what Node.js\n      // would show for an uncaught error\n      console.error(os.EOL + error.stack);\n    }\n\n    this.flushTelemetry();\n\n    // Ideally we want to eliminate all calls to process.exit() from our code, and replace them\n    // with normal control flow that properly cleans up its data structures.\n    // For this particular call, we have a problem that the RushCommandLineParser constructor\n    // performs nontrivial work that can throw an exception.  Either the Rush class would need\n    // to handle reporting for those exceptions, or else _populateActions() should be moved\n    // to a RushCommandLineParser lifecycle stage that can handle it.\n    if (process.exitCode !== undefined) {\n      process.exit(process.exitCode);\n    } else {\n      process.exit(1);\n    }\n  }\n}\n"]}