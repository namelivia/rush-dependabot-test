{"version":3,"file":"ConsoleTimelinePlugin.js","sourceRoot":"","sources":["../../../src/logic/operations/ConsoleTimelinePlugin.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;AAG3D,uDAAiC;AAQjC,uDAAoD;AAEpD,MAAM,WAAW,GAA4B,uBAAuB,CAAC;AAErE;;;;;;;;;;;;;;;;;;;;;;;;EAwBE;AAEF;;GAEG;AACH,MAAa,qBAAqB;IAGhC,YAAmB,QAAmB;QACpC,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;IAC5B,CAAC;IAEM,KAAK,CAAC,KAAyB;QACpC,KAAK,CAAC,sBAAsB,CAAC,GAAG,CAC9B,WAAW,EACX,CAAC,MAAwB,EAAE,OAAiC,EAAQ,EAAE;YACpE,cAAc,CAAC,IAAI,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;QACzC,CAAC,CACF,CAAC;IACJ,CAAC;CACF;AAfD,sDAeC;AAED;;GAEG;AACH,MAAM,cAAc,GAAW,GAAG,CAAC;AAEnC;;GAEG;AACH,MAAM,sBAAsB,GAAoC;IAC9D,CAAC,iCAAe,CAAC,KAAK,CAAC,EAAE,GAAG;IAC5B,CAAC,iCAAe,CAAC,SAAS,CAAC,EAAE,GAAG;IAChC,CAAC,iCAAe,CAAC,OAAO,CAAC,EAAE,GAAG;IAC9B,CAAC,iCAAe,CAAC,kBAAkB,CAAC,EAAE,GAAG;IACzC,CAAC,iCAAe,CAAC,OAAO,CAAC,EAAE,GAAG;IAC9B,CAAC,iCAAe,CAAC,OAAO,CAAC,EAAE,GAAG;IAC9B,CAAC,iCAAe,CAAC,OAAO,CAAC,EAAE,GAAG;IAC9B,CAAC,iCAAe,CAAC,SAAS,CAAC,EAAE,GAAG;IAChC,CAAC,iCAAe,CAAC,IAAI,CAAC,EAAE,GAAG;CAC5B,CAAC;AAEF;;GAEG;AACH,MAAM,wBAAwB,GAAwD;IACpF,CAAC,iCAAe,CAAC,KAAK,CAAC,EAAE,cAAM,CAAC,MAAM;IACtC,CAAC,iCAAe,CAAC,SAAS,CAAC,EAAE,cAAM,CAAC,MAAM;IAC1C,CAAC,iCAAe,CAAC,OAAO,CAAC,EAAE,cAAM,CAAC,KAAK;IACvC,CAAC,iCAAe,CAAC,kBAAkB,CAAC,EAAE,cAAM,CAAC,MAAM;IACnD,CAAC,iCAAe,CAAC,OAAO,CAAC,EAAE,cAAM,CAAC,GAAG;IACrC,CAAC,iCAAe,CAAC,OAAO,CAAC,EAAE,cAAM,CAAC,GAAG;IACrC,CAAC,iCAAe,CAAC,OAAO,CAAC,EAAE,cAAM,CAAC,KAAK;IACvC,CAAC,iCAAe,CAAC,SAAS,CAAC,EAAE,cAAM,CAAC,KAAK;IACzC,CAAC,iCAAe,CAAC,IAAI,CAAC,EAAE,cAAM,CAAC,IAAI;CACpC,CAAC;AASF;;;GAGG;AACH,SAAgB,cAAc,CAAC,QAAmB,EAAE,MAAwB;IAC1E,EAAE;IACF,yEAAyE;IACzE,4EAA4E;IAC5E,EAAE;;IAEF,MAAM,eAAe,GAAwB,IAAI,GAAG,EAAE,CAAC;IAEvD,MAAM,IAAI,GAAsB,EAAE,CAAC;IACnC,IAAI,iBAAiB,GAAW,CAAC,CAAC;IAClC,IAAI,qBAAqB,GAAW,CAAC,CAAC;IACtC,IAAI,QAAQ,GAAW,QAAQ,CAAC;IAChC,IAAI,MAAM,GAAW,CAAC,QAAQ,CAAC;IAC/B,IAAI,YAAY,GAAW,CAAC,CAAC;IAE7B,KAAK,MAAM,CAAC,SAAS,EAAE,eAAe,CAAC,IAAI,MAAM,CAAC,gBAAgB,EAAE;QAClE,IAAI,MAAA,SAAS,CAAC,MAAM,0CAAE,MAAM,EAAE;YAC5B,SAAS;SACV;QAED,MAAM,EAAE,SAAS,EAAE,GAAG,eAAe,CAAC;QAEtC,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,SAAS,CAAC;QAEzC,IAAI,SAAS,IAAI,OAAO,EAAE;YACxB,MAAM,UAAU,GAAW,CAAA,MAAA,SAAS,CAAC,IAAI,0CAAE,MAAM,KAAI,CAAC,CAAC;YACvD,IAAI,UAAU,GAAG,iBAAiB,EAAE;gBAClC,iBAAiB,GAAG,UAAU,CAAC;aAChC;YAED,MAAM,EAAE,QAAQ,EAAE,GAAG,SAAS,CAAC;YAC/B,MAAM,cAAc,GAAW,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YACnD,MAAM,cAAc,GAAW,cAAc,CAAC,MAAM,CAAC;YACrD,IAAI,cAAc,GAAG,qBAAqB,EAAE;gBAC1C,qBAAqB,GAAG,cAAc,CAAC;aACxC;YAED,IAAI,OAAO,GAAG,MAAM,EAAE;gBACpB,MAAM,GAAG,OAAO,CAAC;aAClB;YACD,IAAI,SAAS,GAAG,QAAQ,EAAE;gBACxB,QAAQ,GAAG,SAAS,CAAC;aACtB;YACD,YAAY,IAAI,QAAQ,CAAC;YAEzB,MAAM,EAAE,eAAe,EAAE,GAAG,SAAS,CAAC;YAEtC,IAAI,eAAe,EAAE;gBACnB,eAAe,CAAC,GAAG,CAAC,eAAe,EAAE,CAAC,eAAe,CAAC,GAAG,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC;aAC9F;YAED,IAAI,CAAC,IAAI,CAAC;gBACR,SAAS;gBACT,OAAO;gBACP,cAAc;gBACd,IAAI,EAAE,SAAS,CAAC,IAAK;gBACrB,MAAM,EAAE,eAAe,CAAC,MAAM;aAC/B,CAAC,CAAC;SACJ;KACF;IAED,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC;IAE/C,EAAE;IACF,kEAAkE;IAClE,EAAE;IAEF,MAAM,WAAW,GAAW,MAAM,GAAG,QAAQ,CAAC;IAC9C,MAAM,kBAAkB,GAAW,WAAW,GAAG,IAAI,CAAC;IAEtD,EAAE;IACF,sEAAsE;IACtE,EAAE;IAEF,MAAM,QAAQ,GAAW,OAAO,CAAC,MAAM,CAAC,OAAO,IAAI,cAAc,CAAC;IAClE,MAAM,UAAU,GAAW,QAAQ,GAAG,iBAAiB,GAAG,qBAAqB,GAAG,CAAC,CAAC;IACpF,EAAE;IACF,+EAA+E;IAC/E,yBAAyB;IACzB,EAAE;IAEF,MAAM,QAAQ,GAAa,EAAE,CAAC;IAC9B,SAAS,UAAU,CAAC,IAAY;QAC9B,MAAM,GAAG,GAAW,QAAQ,CAAC,MAAM,CAAC;QACpC,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;YACpC,IAAI,QAAQ,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE;gBACvB,OAAO,CAAC,CAAC;aACV;SACF;QACD,OAAO,GAAG,CAAC;IACb,CAAC;IAED,uBAAuB;IACvB,QAAQ,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;IACvB,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;IAEzC,KAAK,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,cAAc,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,IAAI,EAAE;QACvE,kBAAkB;QAClB,MAAM,OAAO,GAAW,UAAU,CAAC,SAAS,CAAC,CAAC;QAC9C,QAAQ,CAAC,OAAO,CAAC,GAAG,OAAO,CAAC;QAE5B,uBAAuB;QACvB,MAAM,QAAQ,GAAW,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS,GAAG,QAAQ,CAAC,GAAG,UAAU,CAAC,GAAG,WAAW,CAAC,CAAC;QACzF,MAAM,MAAM,GAAW,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,GAAG,QAAQ,CAAC,GAAG,UAAU,CAAC,GAAG,WAAW,CAAC,CAAC;QACrF,MAAM,MAAM,GAAW,MAAM,GAAG,QAAQ,GAAG,CAAC,CAAC;QAE7C,MAAM,KAAK,GACT,cAAM,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;YACjC,wBAAwB,CAAC,MAAM,CAAC,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YAC/E,cAAM,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,UAAU,GAAG,MAAM,CAAC,CAAC,CAAC;QAC/C,QAAQ,CAAC,SAAS,CAChB,GAAG,cAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC,IAAI,KAAK,IAAI,cAAM,CAAC,KAAK,CACvE,cAAc,CAAC,QAAQ,CAAC,qBAAqB,CAAC,GAAG,GAAG,CACrD,EAAE,CACJ,CAAC;KACH;IAED,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;IAEzC,EAAE;IACF,kCAAkC;IAClC,EAAE;IAEF,MAAM,QAAQ,GAAW,QAAQ,CAAC,MAAM,CAAC;IAEzC,MAAM,MAAM,GAAa,CAAC,SAAS,EAAE,8DAA8D,CAAC,CAAC;IAErG,MAAM,OAAO,GAAa;QACxB,eAAe,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG;QACzC,eAAe,kBAAkB,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG;KAChD,CAAC;IAEF,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;IACjF,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;IACjF,QAAQ,CAAC,SAAS,CAAC,yBAAyB,QAAQ,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC3E,QAAQ,CAAC,SAAS,CAChB,yBAAyB,CAAC,YAAY,GAAG,kBAAkB,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAC7F,CAAC;IAEF,EAAE;IACF,+CAA+C;IAC/C,EAAE;IAEF,IAAI,eAAe,CAAC,IAAI,GAAG,CAAC,EAAE;QAC5B,QAAQ,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;QAEhC,IAAI,YAAY,GAAW,EAAE,CAAC;QAC9B,KAAK,MAAM,KAAK,IAAI,eAAe,CAAC,IAAI,EAAE,EAAE;YAC1C,MAAM,GAAG,GAAW,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC;YACtC,IAAI,GAAG,GAAG,YAAY,EAAE;gBACtB,YAAY,GAAG,GAAG,CAAC;aACpB;SACF;QAED,KAAK,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,IAAI,eAAe,CAAC,OAAO,EAAE,EAAE;YACzD,QAAQ,CAAC,SAAS,CAAC,KAAK,cAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,IAAI,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;SACnG;KACF;IAED,QAAQ,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;AACzB,CAAC;AAhKD,wCAgKC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { ITerminal } from '@rushstack/node-core-library';\nimport colors from 'colors/safe';\nimport { IPhase } from '../../api/CommandLineConfiguration';\nimport {\n  ICreateOperationsContext,\n  IPhasedCommandPlugin,\n  PhasedCommandHooks\n} from '../../pluginFramework/PhasedCommandHooks';\nimport { IExecutionResult } from './IOperationExecutionResult';\nimport { OperationStatus } from './OperationStatus';\n\nconst PLUGIN_NAME: 'ConsoleTimelinePlugin' = 'ConsoleTimelinePlugin';\n\n/* Sample output:\n==============================================================================================================================\n          @rushstack/tree-pattern (build) ###########-------------------------------------------------------------------- 3.3s\n          @rushstack/eslint-patch (build) ########----------------------------------------------------------------------- 2.2s\n           @rushstack/eslint-patch (test) -------%----------------------------------------------------------------------- 0.0s\n@rushstack/eslint-plugin-security (build) ----------########################--------------------------------------------- 6.8s\n@rushstack/eslint-plugin-packlets (build) ----------############################----------------------------------------- 8.1s\n         @rushstack/eslint-plugin (build) ----------##############################--------------------------------------- 8.7s\n           @rushstack/tree-pattern (test) ----------#####---------------------------------------------------------------- 1.2s\n @rushstack/eslint-plugin-security (test) ---------------------------------############---------------------------------- 3.3s\n @rushstack/eslint-plugin-packlets (test) -------------------------------------#####------------------------------------- 1.1s\n         @rushstack/eslint-config (build) ---------------------------------------%--------------------------------------- 0.0s\n          @rushstack/eslint-plugin (test) ---------------------------------------#############--------------------------- 3.8s\n          @rushstack/eslint-config (test) ---------------------------------------%--------------------------------------- 0.0s\n     @rushstack/node-core-library (build) ---------------------------------------################################-------- 9.5s\n      @rushstack/node-core-library (test) ----------------------------------------------------------------------######### 2.2s\n==============================================================================================================================\nLEGEND:                                                                                                      Total Work: 50.3s\n  [#] Success  [!] Failed/warnings  [%] Skipped/cached/no-op                                                 Wall Clock: 23.7s\n                                                                                                       Max Parallelism Used: 5\n                                                                                                     Avg Parallelism Used: 2.1\nBY PHASE:\n      _phase:build 38.6s\n       _phase:test 11.7s\n*/\n\n/**\n * Phased command plugin that emits a timeline to the console.\n */\nexport class ConsoleTimelinePlugin implements IPhasedCommandPlugin {\n  private readonly _terminal: ITerminal;\n\n  public constructor(terminal: ITerminal) {\n    this._terminal = terminal;\n  }\n\n  public apply(hooks: PhasedCommandHooks): void {\n    hooks.afterExecuteOperations.tap(\n      PLUGIN_NAME,\n      (result: IExecutionResult, context: ICreateOperationsContext): void => {\n        _printTimeline(this._terminal, result);\n      }\n    );\n  }\n}\n\n/**\n * Timeline - a wider column width for printing the timeline summary\n */\nconst TIMELINE_WIDTH: number = 109;\n\n/**\n * Timeline - symbols representing each operation status\n */\nconst TIMELINE_CHART_SYMBOLS: Record<OperationStatus, string> = {\n  [OperationStatus.Ready]: '?',\n  [OperationStatus.Executing]: '?',\n  [OperationStatus.Success]: '#',\n  [OperationStatus.SuccessWithWarning]: '!',\n  [OperationStatus.Failure]: '!',\n  [OperationStatus.Blocked]: '.',\n  [OperationStatus.Skipped]: '%',\n  [OperationStatus.FromCache]: '%',\n  [OperationStatus.NoOp]: '%'\n};\n\n/**\n * Timeline - colorizer for each operation status\n */\nconst TIMELINE_CHART_COLORIZER: Record<OperationStatus, (string: string) => string> = {\n  [OperationStatus.Ready]: colors.yellow,\n  [OperationStatus.Executing]: colors.yellow,\n  [OperationStatus.Success]: colors.green,\n  [OperationStatus.SuccessWithWarning]: colors.yellow,\n  [OperationStatus.Failure]: colors.red,\n  [OperationStatus.Blocked]: colors.red,\n  [OperationStatus.Skipped]: colors.green,\n  [OperationStatus.FromCache]: colors.green,\n  [OperationStatus.NoOp]: colors.gray\n};\n\ninterface ITimelineRecord {\n  startTime: number;\n  endTime: number;\n  durationString: string;\n  name: string;\n  status: OperationStatus;\n}\n/**\n * Print a more detailed timeline and analysis of CPU usage for the build.\n * @internal\n */\nexport function _printTimeline(terminal: ITerminal, result: IExecutionResult): void {\n  //\n  // Gather the operation records we'll be displaying. Do some inline max()\n  // finding to reduce the number of times we need to loop through operations.\n  //\n\n  const durationByPhase: Map<IPhase, number> = new Map();\n\n  const data: ITimelineRecord[] = [];\n  let longestNameLength: number = 0;\n  let longestDurationLength: number = 0;\n  let allStart: number = Infinity;\n  let allEnd: number = -Infinity;\n  let workDuration: number = 0;\n\n  for (const [operation, operationResult] of result.operationResults) {\n    if (operation.runner?.silent) {\n      continue;\n    }\n\n    const { stopwatch } = operationResult;\n\n    const { startTime, endTime } = stopwatch;\n\n    if (startTime && endTime) {\n      const nameLength: number = operation.name?.length || 0;\n      if (nameLength > longestNameLength) {\n        longestNameLength = nameLength;\n      }\n\n      const { duration } = stopwatch;\n      const durationString: string = duration.toFixed(1);\n      const durationLength: number = durationString.length;\n      if (durationLength > longestDurationLength) {\n        longestDurationLength = durationLength;\n      }\n\n      if (endTime > allEnd) {\n        allEnd = endTime;\n      }\n      if (startTime < allStart) {\n        allStart = startTime;\n      }\n      workDuration += duration;\n\n      const { associatedPhase } = operation;\n\n      if (associatedPhase) {\n        durationByPhase.set(associatedPhase, (durationByPhase.get(associatedPhase) || 0) + duration);\n      }\n\n      data.push({\n        startTime,\n        endTime,\n        durationString,\n        name: operation.name!,\n        status: operationResult.status\n      });\n    }\n  }\n\n  data.sort((a, b) => a.startTime - b.startTime);\n\n  //\n  // Determine timing for all tasks (wall clock and execution times)\n  //\n\n  const allDuration: number = allEnd - allStart;\n  const allDurationSeconds: number = allDuration / 1000;\n\n  //\n  // Do some calculations to determine what size timeline chart we need.\n  //\n\n  const maxWidth: number = process.stdout.columns || TIMELINE_WIDTH;\n  const chartWidth: number = maxWidth - longestNameLength - longestDurationLength - 4;\n  //\n  // Loop through all operations, assembling some statistics about operations and\n  // phases, if applicable.\n  //\n\n  const busyCpus: number[] = [];\n  function getOpenCPU(time: number): number {\n    const len: number = busyCpus.length;\n    for (let i: number = 0; i < len; i++) {\n      if (busyCpus[i] <= time) {\n        return i;\n      }\n    }\n    return len;\n  }\n\n  // Start with a newline\n  terminal.writeLine('');\n  terminal.writeLine('='.repeat(maxWidth));\n\n  for (const { startTime, endTime, durationString, name, status } of data) {\n    // Track busy CPUs\n    const openCpu: number = getOpenCPU(startTime);\n    busyCpus[openCpu] = endTime;\n\n    // Build timeline chart\n    const startIdx: number = Math.floor(((startTime - allStart) * chartWidth) / allDuration);\n    const endIdx: number = Math.floor(((endTime - allStart) * chartWidth) / allDuration);\n    const length: number = endIdx - startIdx + 1;\n\n    const chart: string =\n      colors.gray('-'.repeat(startIdx)) +\n      TIMELINE_CHART_COLORIZER[status](TIMELINE_CHART_SYMBOLS[status].repeat(length)) +\n      colors.gray('-'.repeat(chartWidth - endIdx));\n    terminal.writeLine(\n      `${colors.cyan(name.padStart(longestNameLength))} ${chart} ${colors.white(\n        durationString.padStart(longestDurationLength) + 's'\n      )}`\n    );\n  }\n\n  terminal.writeLine('='.repeat(maxWidth));\n\n  //\n  // Format legend and summary areas\n  //\n\n  const usedCpus: number = busyCpus.length;\n\n  const legend: string[] = ['LEGEND:', '  [#] Success  [!] Failed/warnings  [%] Skipped/cached/no-op'];\n\n  const summary: string[] = [\n    `Total Work: ${workDuration.toFixed(1)}s`,\n    `Wall Clock: ${allDurationSeconds.toFixed(1)}s`\n  ];\n\n  terminal.writeLine(legend[0] + summary[0].padStart(maxWidth - legend[0].length));\n  terminal.writeLine(legend[1] + summary[1].padStart(maxWidth - legend[1].length));\n  terminal.writeLine(`Max Parallelism Used: ${usedCpus}`.padStart(maxWidth));\n  terminal.writeLine(\n    `Avg Parallelism Used: ${(workDuration / allDurationSeconds).toFixed(1)}`.padStart(maxWidth)\n  );\n\n  //\n  // Include time-by-phase, if phases are enabled\n  //\n\n  if (durationByPhase.size > 0) {\n    terminal.writeLine('BY PHASE:');\n\n    let maxPhaseName: number = 16;\n    for (const phase of durationByPhase.keys()) {\n      const len: number = phase.name.length;\n      if (len > maxPhaseName) {\n        maxPhaseName = len;\n      }\n    }\n\n    for (const [phase, duration] of durationByPhase.entries()) {\n      terminal.writeLine(`  ${colors.cyan(phase.name.padStart(maxPhaseName))} ${duration.toFixed(1)}s`);\n    }\n  }\n\n  terminal.writeLine('');\n}\n"]}