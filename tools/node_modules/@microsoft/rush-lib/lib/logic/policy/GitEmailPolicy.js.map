{"version":3,"file":"GitEmailPolicy.js","sourceRoot":"","sources":["../../../src/logic/policy/GitEmailPolicy.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport colors from 'colors/safe';\nimport * as os from 'os';\nimport { AlreadyReportedError } from '@rushstack/node-core-library';\n\nimport { RushConfiguration } from '../../api/RushConfiguration';\nimport { Utilities } from '../../utilities/Utilities';\nimport { Git } from '../Git';\n\nexport class GitEmailPolicy {\n  public static validate(rushConfiguration: RushConfiguration): void {\n    const git: Git = new Git(rushConfiguration);\n\n    if (!git.isGitPresent()) {\n      // If Git isn't installed, or this Rush project is not under a Git working folder,\n      // then we don't care about the Git email\n      console.log(\n        colors.cyan('Ignoring Git validation because the Git binary was not found in the shell path.') +\n          os.EOL\n      );\n      return;\n    }\n\n    if (!git.isPathUnderGitWorkingTree()) {\n      // If Git isn't installed, or this Rush project is not under a Git working folder,\n      // then we don't care about the Git email\n      console.log(colors.cyan('Ignoring Git validation because this is not a Git working folder.' + os.EOL));\n      return;\n    }\n\n    // If there isn't a Git policy, then we don't care whether the person configured\n    // a Git email address at all.  This helps people who don't\n    if (rushConfiguration.gitAllowedEmailRegExps.length === 0) {\n      if (git.tryGetGitEmail() === undefined) {\n        return;\n      }\n\n      // Otherwise, if an email *is* configured at all, then we still perform the basic\n      // sanity checks (e.g. no spaces in the address).\n    }\n\n    let userEmail: string;\n    try {\n      userEmail = git.getGitEmail();\n\n      // sanity check; a valid email should not contain any whitespace\n      // if this fails, then we have another issue to report\n      if (!userEmail.match(/^\\S+$/g)) {\n        console.log(\n          [\n            colors.red('Your Git email address is invalid: ' + JSON.stringify(userEmail)),\n            '',\n            `To configure your Git email address, try something like this:`,\n            '',\n            ...GitEmailPolicy.getEmailExampleLines(rushConfiguration),\n            ''\n          ].join(os.EOL)\n        );\n        throw new AlreadyReportedError();\n      }\n    } catch (e) {\n      if (e instanceof AlreadyReportedError) {\n        console.log(\n          colors.red('Aborting, so you can go fix your settings.  (Or use --bypass-policy to skip.)')\n        );\n        throw e;\n      } else {\n        throw e;\n      }\n    }\n\n    if (rushConfiguration.gitAllowedEmailRegExps.length === 0) {\n      // If there is no policy, then we're good\n      return;\n    }\n\n    console.log('Checking Git policy for this repository.' + os.EOL);\n\n    // If there is a policy, at least one of the RegExp's must match\n    for (const pattern of rushConfiguration.gitAllowedEmailRegExps) {\n      const regex: RegExp = new RegExp(`^${pattern}$`, 'i');\n      if (userEmail.match(regex)) {\n        return;\n      }\n    }\n\n    // Show the user's name as well.\n    // Ex. \"Mr. Example <mr@example.com>\"\n    let fancyEmail: string = colors.cyan(userEmail);\n    try {\n      const userName: string = Utilities.executeCommandAndCaptureOutput(\n        git.gitPath!,\n        ['config', 'user.name'],\n        '.'\n      ).trim();\n      if (userName) {\n        fancyEmail = `${userName} <${fancyEmail}>`;\n      }\n    } catch (e) {\n      // but if it fails, this isn't critical, so don't bother them about it\n    }\n\n    console.log(\n      [\n        'Hey there!  To keep things tidy, this repo asks you to submit your Git commits using an email like ' +\n          (rushConfiguration.gitAllowedEmailRegExps.length > 1 ? 'one of these patterns:' : 'this pattern:'),\n        '',\n        ...rushConfiguration.gitAllowedEmailRegExps.map((pattern) => '    ' + colors.cyan(pattern)),\n        '',\n        '...but yours is configured like this:',\n        '',\n        `    ${fancyEmail}`,\n        '',\n        'To fix it, you can use commands like this:',\n        '',\n        ...GitEmailPolicy.getEmailExampleLines(rushConfiguration),\n        ''\n      ].join(os.EOL)\n    );\n\n    console.log(colors.red('Aborting, so you can go fix your settings.  (Or use --bypass-policy to skip.)'));\n    throw new AlreadyReportedError();\n  }\n\n  public static getEmailExampleLines(rushConfiguration: RushConfiguration): string[] {\n    return [\n      colors.cyan('    git config --local user.name \"Mr. Example\"'),\n      colors.cyan(\n        `    git config --local user.email \"${rushConfiguration.gitSampleEmail || 'example@contoso.com'}\"`\n      )\n    ];\n  }\n}\n"]}