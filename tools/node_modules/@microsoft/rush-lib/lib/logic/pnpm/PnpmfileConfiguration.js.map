{"version":3,"file":"PnpmfileConfiguration.js","sourceRoot":"","sources":["../../../src/logic/pnpm/PnpmfileConfiguration.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as path from 'path';\nimport { FileSystem, IPackageJson, JsonFile, MapExtensions } from '@rushstack/node-core-library';\n\nimport { PnpmPackageManager } from '../../api/packageManager/PnpmPackageManager';\nimport { PnpmOptionsConfiguration, RushConfiguration } from '../../api/RushConfiguration';\nimport { CommonVersionsConfiguration } from '../../api/CommonVersionsConfiguration';\nimport * as pnpmfile from './PnpmfileShim';\n\nimport type { IPnpmfileContext, IPnpmfileShimSettings } from './IPnpmfile';\n\n/**\n * Options used when generating the pnpmfile shim settings file.\n */\nexport interface IPnpmfileShimOptions {\n  /**\n   * The variant that the client pnpmfile will be sourced from.\n   */\n  variant?: string;\n}\n\n/**\n * Loads PNPM's pnpmfile.js configuration, and invokes it to preprocess package.json files,\n * optionally utilizing a pnpmfile shim to inject preferred versions.\n */\nexport class PnpmfileConfiguration {\n  private _context: IPnpmfileContext | undefined;\n\n  public constructor(rushConfiguration: RushConfiguration, pnpmfileShimOptions?: IPnpmfileShimOptions) {\n    if (rushConfiguration.packageManager !== 'pnpm') {\n      throw new Error(\n        `PnpmfileConfiguration cannot be used with package manager \"${rushConfiguration.packageManager}\"`\n      );\n    }\n\n    // Set the context to swallow log output and store our settings\n    this._context = {\n      log: (message: string) => {},\n      pnpmfileShimSettings: PnpmfileConfiguration._getPnpmfileShimSettings(\n        rushConfiguration,\n        pnpmfileShimOptions\n      )\n    };\n  }\n\n  public static async writeCommonTempPnpmfileShimAsync(\n    rushConfiguration: RushConfiguration,\n    options?: IPnpmfileShimOptions\n  ): Promise<void> {\n    if (rushConfiguration.packageManager !== 'pnpm') {\n      throw new Error(\n        `PnpmfileConfiguration cannot be used with package manager \"${rushConfiguration.packageManager}\"`\n      );\n    }\n\n    const targetDir: string = rushConfiguration.commonTempFolder;\n    const pnpmfilePath: string = path.join(\n      targetDir,\n      (rushConfiguration.packageManagerWrapper as PnpmPackageManager).pnpmfileFilename\n    );\n\n    // Write the shim itself\n    await FileSystem.copyFileAsync({\n      sourcePath: path.join(__dirname, 'PnpmfileShim.js'),\n      destinationPath: pnpmfilePath\n    });\n\n    const pnpmfileShimSettings: IPnpmfileShimSettings = PnpmfileConfiguration._getPnpmfileShimSettings(\n      rushConfiguration,\n      options\n    );\n\n    // Write the settings file used by the shim\n    await JsonFile.saveAsync(pnpmfileShimSettings, path.join(targetDir, 'pnpmfileSettings.json'), {\n      ensureFolderExists: true\n    });\n  }\n\n  private static _getPnpmfileShimSettings(\n    rushConfiguration: RushConfiguration,\n    options?: IPnpmfileShimOptions\n  ): IPnpmfileShimSettings {\n    let allPreferredVersions: { [dependencyName: string]: string } = {};\n    let allowedAlternativeVersions: { [dependencyName: string]: readonly string[] } = {};\n    const workspaceVersions: Record<string, string> = {};\n\n    // Only workspaces shims in the common versions using pnpmfile\n    if ((rushConfiguration.packageManagerOptions as PnpmOptionsConfiguration).useWorkspaces) {\n      const commonVersionsConfiguration: CommonVersionsConfiguration = rushConfiguration.getCommonVersions();\n      const preferredVersions: Map<string, string> = new Map();\n      MapExtensions.mergeFromMap(preferredVersions, commonVersionsConfiguration.getAllPreferredVersions());\n      MapExtensions.mergeFromMap(preferredVersions, rushConfiguration.getImplicitlyPreferredVersions());\n      allPreferredVersions = MapExtensions.toObject(preferredVersions);\n      allowedAlternativeVersions = MapExtensions.toObject(\n        commonVersionsConfiguration.allowedAlternativeVersions\n      );\n\n      for (const project of rushConfiguration.projects) {\n        workspaceVersions[project.packageName] = project.packageJson.version;\n      }\n    }\n\n    const settings: IPnpmfileShimSettings = {\n      allPreferredVersions,\n      allowedAlternativeVersions,\n      workspaceVersions,\n      semverPath: require.resolve('semver')\n    };\n\n    // Use the provided path if available. Otherwise, use the default path.\n    const userPnpmfilePath: string | undefined = rushConfiguration.getPnpmfilePath(options?.variant);\n    if (userPnpmfilePath && FileSystem.exists(userPnpmfilePath)) {\n      settings.userPnpmfilePath = userPnpmfilePath;\n    }\n\n    return settings;\n  }\n\n  /**\n   * Transform a package.json file using the pnpmfile.js hook.\n   * @returns the tranformed object, or the original input if pnpmfile.js was not found.\n   */\n  public transform(packageJson: IPackageJson): IPackageJson {\n    if (!pnpmfile.hooks?.readPackage || !this._context) {\n      return packageJson;\n    } else {\n      return pnpmfile.hooks.readPackage(packageJson, this._context);\n    }\n  }\n}\n"]}