{"version":3,"file":"AddAction.js","sourceRoot":"","sources":["../../../src/cli/actions/AddAction.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as os from 'os';\nimport * as semver from 'semver';\nimport { CommandLineFlagParameter, CommandLineStringListParameter } from '@rushstack/ts-command-line';\n\nimport { RushConfigurationProject } from '../../api/RushConfigurationProject';\nimport { BaseRushAction } from './BaseRushAction';\nimport { RushCommandLineParser } from '../RushCommandLineParser';\nimport { DependencySpecifier } from '../../logic/DependencySpecifier';\n\nimport type * as PackageJsonUpdaterType from '../../logic/PackageJsonUpdater';\n\nexport class AddAction extends BaseRushAction {\n  private _allFlag!: CommandLineFlagParameter;\n  private _exactFlag!: CommandLineFlagParameter;\n  private _caretFlag!: CommandLineFlagParameter;\n  private _devDependencyFlag!: CommandLineFlagParameter;\n  private _makeConsistentFlag!: CommandLineFlagParameter;\n  private _skipUpdateFlag!: CommandLineFlagParameter;\n  private _packageNameList!: CommandLineStringListParameter;\n\n  public constructor(parser: RushCommandLineParser) {\n    const documentation: string[] = [\n      'Adds specified package(s) to the dependencies of the current project (as determined by the current working directory)' +\n        ' and then runs \"rush update\". If no version is specified, a version will be automatically detected (typically' +\n        ' either the latest version or a version that won\\'t break the \"ensureConsistentVersions\" policy). If a version' +\n        ' range (or a workspace range) is specified, the latest version in the range will be used. The version will be' +\n        ' automatically prepended with a tilde, unless the \"--exact\" or \"--caret\" flags are used. The \"--make-consistent\"' +\n        ' flag can be used to update all packages with the dependency.'\n    ];\n    super({\n      actionName: 'add',\n      summary: 'Adds one or more dependencies to the package.json and runs rush update.',\n      documentation: documentation.join(os.EOL),\n      safeForSimultaneousRushProcesses: false,\n      parser\n    });\n  }\n\n  public onDefineParameters(): void {\n    this._packageNameList = this.defineStringListParameter({\n      parameterLongName: '--package',\n      parameterShortName: '-p',\n      required: true,\n      argumentName: 'PACKAGE',\n      description:\n        '(Required) The name of the package which should be added as a dependency.' +\n        ' A SemVer version specifier can be appended after an \"@\" sign.  WARNING: Symbol characters' +\n        \" are usually interpreted by your shell, so it's recommended to use quotes.\" +\n        ' For example, write \"rush add --package \"example@^1.2.3\"\" instead of \"rush add --package example@^1.2.3\".' +\n        ' To add multiple packages, write \"rush add --package foo --package bar\".'\n    });\n    this._exactFlag = this.defineFlagParameter({\n      parameterLongName: '--exact',\n      description:\n        'If specified, the SemVer specifier added to the' +\n        ' package.json will be an exact version (e.g. without tilde or caret).'\n    });\n    this._caretFlag = this.defineFlagParameter({\n      parameterLongName: '--caret',\n      description:\n        'If specified, the SemVer specifier added to the' +\n        ' package.json will be a prepended with a \"caret\" specifier (\"^\").'\n    });\n    this._devDependencyFlag = this.defineFlagParameter({\n      parameterLongName: '--dev',\n      description:\n        'If specified, the package will be added to the \"devDependencies\" section of the package.json'\n    });\n    this._makeConsistentFlag = this.defineFlagParameter({\n      parameterLongName: '--make-consistent',\n      parameterShortName: '-m',\n      description:\n        'If specified, other packages with this dependency will have their package.json' +\n        ' files updated to use the same version of the dependency.'\n    });\n    this._skipUpdateFlag = this.defineFlagParameter({\n      parameterLongName: '--skip-update',\n      parameterShortName: '-s',\n      description:\n        'If specified, the \"rush update\" command will not be run after updating the package.json files.'\n    });\n    this._allFlag = this.defineFlagParameter({\n      parameterLongName: '--all',\n      description: 'If specified, the dependency will be added to all projects.'\n    });\n  }\n\n  public async runAsync(): Promise<void> {\n    let projects: RushConfigurationProject[];\n    if (this._allFlag.value) {\n      projects = this.rushConfiguration.projects;\n    } else {\n      const currentProject: RushConfigurationProject | undefined =\n        this.rushConfiguration.tryGetProjectForPath(process.cwd());\n\n      if (!currentProject) {\n        throw new Error(\n          'The \"rush add\" command must be invoked under a project' +\n            ` folder that is registered in rush.json unless the ${this._allFlag.longName} is used.`\n        );\n      }\n\n      projects = [currentProject];\n    }\n\n    if (this._caretFlag.value && this._exactFlag.value) {\n      throw new Error(\n        `Only one of \"${this._caretFlag.longName}\" and \"${this._exactFlag.longName}\" should be specified`\n      );\n    }\n\n    const packageJsonUpdater: typeof PackageJsonUpdaterType = await import('../../logic/PackageJsonUpdater');\n\n    const specifiedPackageNameList: ReadonlyArray<string> = this._packageNameList.values!;\n    const packagesToAdd: PackageJsonUpdaterType.IPackageForRushAdd[] = [];\n\n    for (const specifiedPackageName of specifiedPackageNameList) {\n      /**\n       * Name & Version\n       */\n      let packageName: string = specifiedPackageName;\n      let version: string | undefined = undefined;\n      const parts: string[] = packageName.split('@');\n\n      if (parts[0] === '') {\n        // this is a scoped package\n        packageName = '@' + parts[1];\n        version = parts[2];\n      } else {\n        packageName = parts[0];\n        version = parts[1];\n      }\n\n      if (!this.rushConfiguration.packageNameParser.isValidName(packageName)) {\n        throw new Error(`The package name \"${packageName}\" is not valid.`);\n      }\n\n      if (version && version !== 'latest') {\n        const specifier: DependencySpecifier = new DependencySpecifier(packageName, version);\n        if (!semver.validRange(specifier.versionSpecifier) && !semver.valid(specifier.versionSpecifier)) {\n          throw new Error(`The SemVer specifier \"${version}\" is not valid.`);\n        }\n      }\n\n      /**\n       * RangeStyle\n       */\n      let rangeStyle: PackageJsonUpdaterType.SemVerStyle;\n      if (version && version !== 'latest') {\n        if (this._exactFlag.value || this._caretFlag.value) {\n          throw new Error(\n            `The \"${this._caretFlag.longName}\" and \"${this._exactFlag.longName}\" flags may not be specified if a ` +\n              `version is provided in the ${this._packageNameList.longName} specifier. In this case \"${version}\" was provided.`\n          );\n        }\n\n        rangeStyle = packageJsonUpdater.SemVerStyle.Passthrough;\n      } else {\n        rangeStyle = this._caretFlag.value\n          ? packageJsonUpdater.SemVerStyle.Caret\n          : this._exactFlag.value\n          ? packageJsonUpdater.SemVerStyle.Exact\n          : packageJsonUpdater.SemVerStyle.Tilde;\n      }\n\n      packagesToAdd.push({ packageName, version, rangeStyle });\n    }\n\n    const updater: PackageJsonUpdaterType.PackageJsonUpdater = new packageJsonUpdater.PackageJsonUpdater(\n      this.rushConfiguration,\n      this.rushGlobalFolder\n    );\n\n    await updater.doRushAddAsync({\n      projects: projects,\n      packagesToAdd,\n      devDependency: this._devDependencyFlag.value,\n      updateOtherPackages: this._makeConsistentFlag.value,\n      skipUpdate: this._skipUpdateFlag.value,\n      debugInstall: this.parser.isDebug\n    });\n  }\n}\n"]}