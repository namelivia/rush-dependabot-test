{"version":3,"file":"NpmShrinkwrapFile.js","sourceRoot":"","sources":["../../../src/logic/npm/NpmShrinkwrapFile.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as os from 'os';\n\nimport { JsonFile, FileSystem, InternalError } from '@rushstack/node-core-library';\n\nimport { BaseShrinkwrapFile } from '../base/BaseShrinkwrapFile';\nimport { DependencySpecifier } from '../DependencySpecifier';\nimport { RushConfigurationProject } from '../../api/RushConfigurationProject';\nimport { BaseProjectShrinkwrapFile } from '../base/BaseProjectShrinkwrapFile';\n\ninterface INpmShrinkwrapDependencyJson {\n  version: string;\n  from: string;\n  resolved: string;\n  dependencies: { [dependency: string]: INpmShrinkwrapDependencyJson };\n}\n\ninterface INpmShrinkwrapJson {\n  name: string;\n  version: string;\n  dependencies: { [dependency: string]: INpmShrinkwrapDependencyJson };\n}\n\nexport class NpmShrinkwrapFile extends BaseShrinkwrapFile {\n  public readonly isWorkspaceCompatible: boolean;\n  private _shrinkwrapJson: INpmShrinkwrapJson;\n\n  private constructor(shrinkwrapJson: INpmShrinkwrapJson) {\n    super();\n    this._shrinkwrapJson = shrinkwrapJson;\n\n    // Normalize the data\n    if (!this._shrinkwrapJson.version) {\n      this._shrinkwrapJson.version = '';\n    }\n    if (!this._shrinkwrapJson.name) {\n      this._shrinkwrapJson.name = '';\n    }\n    if (!this._shrinkwrapJson.dependencies) {\n      this._shrinkwrapJson.dependencies = {};\n    }\n\n    // Workspaces not supported in NPM\n    this.isWorkspaceCompatible = false;\n  }\n\n  public static loadFromFile(shrinkwrapJsonFilename: string): NpmShrinkwrapFile | undefined {\n    try {\n      const shrinkwrapContent: string = FileSystem.readFile(shrinkwrapJsonFilename);\n      return NpmShrinkwrapFile.loadFromString(shrinkwrapContent);\n    } catch (error) {\n      if (FileSystem.isNotExistError(error as Error)) {\n        return undefined; // file does not exist\n      }\n      throw new Error(\n        `Error reading \"${shrinkwrapJsonFilename}\":` + os.EOL + `  ${(error as Error).message}`\n      );\n    }\n  }\n\n  public static loadFromString(shrinkwrapContent: string): NpmShrinkwrapFile {\n    // strip BOM\n    const data: string =\n      shrinkwrapContent.charCodeAt(0) === 0xfeff ? shrinkwrapContent.slice(1) : shrinkwrapContent;\n\n    // We don't use JsonFile/jju here because shrinkwrap.json is a special NPM file format\n    // and typically very large, so we want to load it the same way that NPM does.\n    return new NpmShrinkwrapFile(JSON.parse(data));\n  }\n\n  /** @override */\n  public getTempProjectNames(): ReadonlyArray<string> {\n    return this._getTempProjectNames(this._shrinkwrapJson.dependencies);\n  }\n\n  /** @override */\n  protected serialize(): string {\n    return JsonFile.stringify(this._shrinkwrapJson);\n  }\n\n  /** @override */\n  protected getTopLevelDependencyVersion(dependencyName: string): DependencySpecifier | undefined {\n    // First, check under tempProjectName, as this is the first place we look during linking.\n    const dependencyJson: INpmShrinkwrapDependencyJson | undefined = NpmShrinkwrapFile.tryGetValue(\n      this._shrinkwrapJson.dependencies,\n      dependencyName\n    );\n\n    if (!dependencyJson) {\n      return undefined;\n    }\n\n    return new DependencySpecifier(dependencyName, dependencyJson.version);\n  }\n\n  /**\n   * @param dependencyName the name of the dependency to get a version for\n   * @param tempProjectName the name of the temp project to check for this dependency\n   * @param versionRange Not used, just exists to satisfy abstract API contract\n   * @override\n   */\n  protected tryEnsureDependencyVersion(\n    dependencySpecifier: DependencySpecifier,\n    tempProjectName: string\n  ): DependencySpecifier | undefined {\n    // First, check under tempProjectName, as this is the first place we look during linking.\n    let dependencyJson: INpmShrinkwrapDependencyJson | undefined = undefined;\n\n    const tempDependency: INpmShrinkwrapDependencyJson | undefined = NpmShrinkwrapFile.tryGetValue(\n      this._shrinkwrapJson.dependencies,\n      tempProjectName\n    );\n    if (tempDependency && tempDependency.dependencies) {\n      dependencyJson = NpmShrinkwrapFile.tryGetValue(\n        tempDependency.dependencies,\n        dependencySpecifier.packageName\n      );\n    }\n\n    // Otherwise look at the root of the shrinkwrap file\n    if (!dependencyJson) {\n      return this.getTopLevelDependencyVersion(dependencySpecifier.packageName);\n    }\n\n    return new DependencySpecifier(dependencySpecifier.packageName, dependencyJson.version);\n  }\n\n  /** @override */\n  public getProjectShrinkwrap(project: RushConfigurationProject): BaseProjectShrinkwrapFile | undefined {\n    return undefined;\n  }\n\n  /** @override */\n  public isWorkspaceProjectModified(project: RushConfigurationProject, variant?: string): boolean {\n    throw new InternalError('Not implemented');\n  }\n}\n"]}