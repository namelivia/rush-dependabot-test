{"version":3,"file":"CheckAction.js","sourceRoot":"","sources":["../../../src/cli/actions/CheckAction.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;AAE3D,uDAAiC;AAIjC,qDAAkD;AAClD,6FAA0F;AAC1F,iDAA8C;AAE9C,MAAa,WAAY,SAAQ,+BAAc;IAK7C,YAAmB,MAA6B;QAC9C,KAAK,CAAC;YACJ,UAAU,EAAE,OAAO;YACnB,OAAO,EACL,6FAA6F;gBAC7F,oCAAoC;YACtC,aAAa,EACX,wFAAwF;gBACxF,yCAAyC;YAC3C,gCAAgC,EAAE,IAAI;YACtC,MAAM;SACP,CAAC,CAAC;IACL,CAAC;IAES,kBAAkB;QAC1B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,qBAAqB,CAAC,mBAAQ,CAAC,iBAAiB,CAAC,CAAC;QACvE,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,mBAAmB,CAAC;YACxC,iBAAiB,EAAE,QAAQ;YAC3B,WAAW,EAAE,2DAA2D;SACzE,CAAC,CAAC;QACH,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,mBAAmB,CAAC;YAC3C,iBAAiB,EAAE,WAAW;YAC9B,WAAW,EACT,gFAAgF;gBAChF,6BAA6B,IAAI,CAAC,SAAS,CAAC,QAAQ,0BAA0B;SACjF,CAAC,CAAC;IACL,CAAC;IAES,KAAK,CAAC,QAAQ;QACtB,MAAM,OAAO,GAAuB,IAAI,CAAC,iBAAiB,CAAC,uBAAuB,CAAC;QAEnF,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,IAAI,OAAO,EAAE;YACnC,OAAO,CAAC,GAAG,CACT,cAAM,CAAC,MAAM,CACX,YAAY,OAAO,oFAAoF;gBACrG,8BAA8B,OAAO,sCAAsC,CAC9E,CACF,CAAC;SACH;QAED,6CAAqB,CAAC,SAAS,CAAC,IAAI,CAAC,iBAAiB,EAAE;YACtD,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,KAAK;YAC5B,WAAW,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK;YACjC,4BAA4B,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK;SACvD,CAAC,CAAC;IACL,CAAC;CACF;AAnDD,kCAmDC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport colors from 'colors/safe';\nimport { CommandLineStringParameter, CommandLineFlagParameter } from '@rushstack/ts-command-line';\n\nimport { RushCommandLineParser } from '../RushCommandLineParser';\nimport { BaseRushAction } from './BaseRushAction';\nimport { VersionMismatchFinder } from '../../logic/versionMismatch/VersionMismatchFinder';\nimport { Variants } from '../../api/Variants';\n\nexport class CheckAction extends BaseRushAction {\n  private _variant!: CommandLineStringParameter;\n  private _jsonFlag!: CommandLineFlagParameter;\n  private _verboseFlag!: CommandLineFlagParameter;\n\n  public constructor(parser: RushCommandLineParser) {\n    super({\n      actionName: 'check',\n      summary:\n        \"Checks each project's package.json files and ensures that all dependencies are of the same \" +\n        'version throughout the repository.',\n      documentation:\n        \"Checks each project's package.json files and ensures that all dependencies are of the \" +\n        'same version throughout the repository.',\n      safeForSimultaneousRushProcesses: true,\n      parser\n    });\n  }\n\n  protected onDefineParameters(): void {\n    this._variant = this.defineStringParameter(Variants.VARIANT_PARAMETER);\n    this._jsonFlag = this.defineFlagParameter({\n      parameterLongName: '--json',\n      description: 'If this flag is specified, output will be in JSON format.'\n    });\n    this._verboseFlag = this.defineFlagParameter({\n      parameterLongName: '--verbose',\n      description:\n        'If this flag is specified, long lists of package names will not be truncated. ' +\n        `This has no effect if the ${this._jsonFlag.longName} flag is also specified.`\n    });\n  }\n\n  protected async runAsync(): Promise<void> {\n    const variant: string | undefined = this.rushConfiguration.currentInstalledVariant;\n\n    if (!this._variant.value && variant) {\n      console.log(\n        colors.yellow(\n          `Variant '${variant}' has been installed, but 'rush check' is currently checking the default variant. ` +\n            `Use 'rush check --variant '${variant}' to check the current installation.`\n        )\n      );\n    }\n\n    VersionMismatchFinder.rushCheck(this.rushConfiguration, {\n      variant: this._variant.value,\n      printAsJson: this._jsonFlag.value,\n      truncateLongPackageNameLists: !this._verboseFlag.value\n    });\n  }\n}\n"]}