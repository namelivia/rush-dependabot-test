{"version":3,"file":"DependencySpecifier.js","sourceRoot":"","sources":["../../src/logic/DependencySpecifier.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,iDAAkD;AAClD,oEAA6D;AAE7D;;GAEG;AACH,IAAY,uBA6CX;AA7CD,WAAY,uBAAuB;IACjC;;OAEG;IACH,sCAAW,CAAA;IAEX;;OAEG;IACH,sCAAW,CAAA;IAEX;;OAEG;IACH,8CAAmB,CAAA;IAEnB;;OAEG;IACH,0CAAe,CAAA;IAEf;;OAEG;IACH,wCAAa,CAAA;IAEb;;OAEG;IACH,kDAAuB,CAAA;IAEvB;;OAEG;IACH,4CAAiB,CAAA;IAEjB;;OAEG;IACH,0CAAe,CAAA;IAEf;;OAEG;IACH,kDAAuB,CAAA;AACzB,CAAC,EA7CW,uBAAuB,GAAvB,+BAAuB,KAAvB,+BAAuB,QA6ClC;AAED;;;;GAIG;AACH,MAAa,mBAAmB;IAwB9B,YAAmB,WAAmB,EAAE,gBAAwB;QAC9D,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;QAEzC,+EAA+E;QAC/E,gCAAgC;QAChC,IAAI,gBAAgB,CAAC,UAAU,CAAC,YAAY,CAAC,EAAE;YAC7C,IAAI,CAAC,aAAa,GAAG,uBAAuB,CAAC,SAAS,CAAC;YACvD,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;YACrF,IAAI,CAAC,WAAW,GAAG,SAAS,CAAC;YAC7B,OAAO;SACR;QAED,MAAM,MAAM,GAAyB,aAAa,CAAC,OAAO,CAAC,WAAW,EAAE,gBAAgB,CAAC,CAAC;QAC1F,IAAI,CAAC,aAAa,GAAG,mBAAmB,CAAC,0BAA0B,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAEjF,IAAI,IAAI,CAAC,aAAa,KAAK,uBAAuB,CAAC,KAAK,EAAE;YACxD,MAAM,WAAW,GAA8B,MAAmC,CAAC;YACnF,IAAI,CAAC,WAAW,CAAC,OAAO,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,EAAE;gBACrD,MAAM,IAAI,iCAAa,CAAC,wCAAwC,CAAC,CAAC;aACnE;YACD,IAAI,CAAC,WAAW,GAAG,IAAI,mBAAmB,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,EAAE,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;SACnG;aAAM;YACL,IAAI,CAAC,WAAW,GAAG,SAAS,CAAC;SAC9B;IACH,CAAC;IAEM,MAAM,CAAC,0BAA0B,CAAC,aAAqB;QAC5D,QAAQ,aAAa,EAAE;YACrB,KAAK,KAAK;gBACR,OAAO,uBAAuB,CAAC,GAAG,CAAC;YACrC,KAAK,KAAK;gBACR,OAAO,uBAAuB,CAAC,GAAG,CAAC;YACrC,KAAK,SAAS;gBACZ,OAAO,uBAAuB,CAAC,OAAO,CAAC;YACzC,KAAK,OAAO;gBACV,OAAO,uBAAuB,CAAC,KAAK,CAAC;YACvC,KAAK,MAAM;gBACT,OAAO,uBAAuB,CAAC,IAAI,CAAC;YACtC,KAAK,WAAW;gBACd,OAAO,uBAAuB,CAAC,SAAS,CAAC;YAC3C,KAAK,QAAQ;gBACX,OAAO,uBAAuB,CAAC,MAAM,CAAC;YACxC,KAAK,OAAO;gBACV,OAAO,uBAAuB,CAAC,KAAK,CAAC;YACvC;gBACE,MAAM,IAAI,iCAAa,CAAC,2CAA2C,aAAa,GAAG,CAAC,CAAC;SACxF;IACH,CAAC;CACF;AAzED,kDAyEC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport npmPackageArg = require('npm-package-arg');\nimport { InternalError } from '@rushstack/node-core-library';\n\n/**\n * The parsed format of a provided version specifier.\n */\nexport enum DependencySpecifierType {\n  /**\n   * A git repository\n   */\n  Git = 'Git',\n\n  /**\n   * A tagged version, e.g. \"example@latest\"\n   */\n  Tag = 'Tag',\n\n  /**\n   * A specific version number, e.g. \"example@1.2.3\"\n   */\n  Version = 'Version',\n\n  /**\n   * A version range, e.g. \"example@2.x\"\n   */\n  Range = 'Range',\n\n  /**\n   * A local .tar.gz, .tar or .tgz file\n   */\n  File = 'File',\n\n  /**\n   * A local directory\n   */\n  Directory = 'Directory',\n\n  /**\n   * An HTTP url to a .tar.gz, .tar or .tgz file\n   */\n  Remote = 'Remote',\n\n  /**\n   * A package alias, e.g. \"npm:other-package@^1.2.3\"\n   */\n  Alias = 'Alias',\n\n  /**\n   * A package specified using workspace protocol, e.g. \"workspace:^1.2.3\"\n   */\n  Workspace = 'Workspace'\n}\n\n/**\n * An NPM \"version specifier\" is a string that can appear as a package.json \"dependencies\" value.\n * Example version specifiers: `^1.2.3`, `file:./blah.tgz`, `npm:other-package@~1.2.3`, and so forth.\n * A \"dependency specifier\" is the version specifier information, combined with the dependency package name.\n */\nexport class DependencySpecifier {\n  /**\n   * The dependency package name, i.e. the key from a \"dependencies\" key/value table.\n   */\n  public readonly packageName: string;\n\n  /**\n   * The dependency version specifier, i.e. the value from a \"dependencies\" key/value table.\n   * Example values: `^1.2.3`, `file:./blah.tgz`, `npm:other-package@~1.2.3`\n   */\n  public readonly versionSpecifier: string;\n\n  /**\n   * The type of the `versionSpecifier`.\n   */\n  public readonly specifierType: DependencySpecifierType;\n\n  /**\n   * If `specifierType` is `alias`, then this is the parsed target dependency.\n   * For example, if version specifier i `\"npm:other-package@^1.2.3\"` then this is the parsed object for\n   * `other-package@^1.2.3`.\n   */\n  public readonly aliasTarget: DependencySpecifier | undefined;\n\n  public constructor(packageName: string, versionSpecifier: string) {\n    this.packageName = packageName;\n    this.versionSpecifier = versionSpecifier;\n\n    // Workspace ranges are a feature from PNPM and Yarn. Set the version specifier\n    // to the trimmed version range.\n    if (versionSpecifier.startsWith('workspace:')) {\n      this.specifierType = DependencySpecifierType.Workspace;\n      this.versionSpecifier = versionSpecifier.slice(this.specifierType.length + 1).trim();\n      this.aliasTarget = undefined;\n      return;\n    }\n\n    const result: npmPackageArg.Result = npmPackageArg.resolve(packageName, versionSpecifier);\n    this.specifierType = DependencySpecifier.getDependencySpecifierType(result.type);\n\n    if (this.specifierType === DependencySpecifierType.Alias) {\n      const aliasResult: npmPackageArg.AliasResult = result as npmPackageArg.AliasResult;\n      if (!aliasResult.subSpec || !aliasResult.subSpec.name) {\n        throw new InternalError('Unexpected result from npm-package-arg');\n      }\n      this.aliasTarget = new DependencySpecifier(aliasResult.subSpec.name, aliasResult.subSpec.rawSpec);\n    } else {\n      this.aliasTarget = undefined;\n    }\n  }\n\n  public static getDependencySpecifierType(specifierType: string): DependencySpecifierType {\n    switch (specifierType) {\n      case 'git':\n        return DependencySpecifierType.Git;\n      case 'tag':\n        return DependencySpecifierType.Tag;\n      case 'version':\n        return DependencySpecifierType.Version;\n      case 'range':\n        return DependencySpecifierType.Range;\n      case 'file':\n        return DependencySpecifierType.File;\n      case 'directory':\n        return DependencySpecifierType.Directory;\n      case 'remote':\n        return DependencySpecifierType.Remote;\n      case 'alias':\n        return DependencySpecifierType.Alias;\n      default:\n        throw new InternalError(`Unexpected npm-package-arg result type \"${specifierType}\"`);\n    }\n  }\n}\n"]}