{"version":3,"file":"VersionAction.js","sourceRoot":"","sources":["../../../src/cli/actions/VersionAction.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as semver from 'semver';\nimport { IPackageJson, FileConstants, Import, Enum } from '@rushstack/node-core-library';\nimport { CommandLineFlagParameter, CommandLineStringParameter } from '@rushstack/ts-command-line';\n\nimport { BumpType, LockStepVersionPolicy } from '../../api/VersionPolicy';\nimport { VersionPolicyConfiguration } from '../../api/VersionPolicyConfiguration';\nimport { RushConfiguration } from '../../api/RushConfiguration';\nimport { VersionMismatchFinder } from '../../logic/versionMismatch/VersionMismatchFinder';\nimport { RushCommandLineParser } from '../RushCommandLineParser';\nimport { PolicyValidator } from '../../logic/policy/PolicyValidator';\nimport { BaseRushAction } from './BaseRushAction';\nimport { PublishGit } from '../../logic/PublishGit';\nimport { Git } from '../../logic/Git';\n\nimport type * as VersionManagerTypes from '../../logic/VersionManager';\nconst versionManagerModule: typeof VersionManagerTypes = Import.lazy('../../logic/VersionManager', require);\n\nexport const DEFAULT_PACKAGE_UPDATE_MESSAGE: string = 'Bump versions [skip ci]';\nexport const DEFAULT_CHANGELOG_UPDATE_MESSAGE: string = 'Update changelogs [skip ci]';\n\nexport class VersionAction extends BaseRushAction {\n  private _ensureVersionPolicy!: CommandLineFlagParameter;\n  private _overrideVersion!: CommandLineStringParameter;\n  private _bumpVersion!: CommandLineFlagParameter;\n  private _versionPolicy!: CommandLineStringParameter;\n  private _bypassPolicy!: CommandLineFlagParameter;\n  private _targetBranch!: CommandLineStringParameter;\n  private _overwriteBump!: CommandLineStringParameter;\n  private _prereleaseIdentifier!: CommandLineStringParameter;\n  private _ignoreGitHooksParameter!: CommandLineFlagParameter;\n\n  public constructor(parser: RushCommandLineParser) {\n    super({\n      actionName: 'version',\n      summary: 'Manage package versions in the repo.',\n      documentation: 'use this \"rush version\" command to ensure version policies and bump versions.',\n      parser\n    });\n  }\n\n  protected onDefineParameters(): void {\n    this._targetBranch = this.defineStringParameter({\n      parameterLongName: '--target-branch',\n      parameterShortName: '-b',\n      argumentName: 'BRANCH',\n      description: 'If this flag is specified, changes will be committed and merged into the target branch.'\n    });\n    this._ensureVersionPolicy = this.defineFlagParameter({\n      parameterLongName: '--ensure-version-policy',\n      description: 'Updates package versions if needed to satisfy version policies.'\n    });\n    this._overrideVersion = this.defineStringParameter({\n      parameterLongName: '--override-version',\n      argumentName: 'NEW_VERSION',\n      description:\n        'Override the version in the specified --version-policy. ' +\n        'This setting only works for lock-step version policy and when --ensure-version-policy is specified.'\n    });\n    this._bumpVersion = this.defineFlagParameter({\n      parameterLongName: '--bump',\n      description: 'Bumps package version based on version policies.'\n    });\n    this._bypassPolicy = this.defineFlagParameter({\n      parameterLongName: '--bypass-policy',\n      description: 'Overrides \"gitPolicy\" enforcement (use honorably!)'\n    });\n    this._versionPolicy = this.defineStringParameter({\n      parameterLongName: '--version-policy',\n      argumentName: 'POLICY',\n      description: 'The name of the version policy'\n    });\n    this._overwriteBump = this.defineStringParameter({\n      parameterLongName: '--override-bump',\n      argumentName: 'BUMPTYPE',\n      description:\n        'Overrides the bump type in the version-policy.json for the specified version policy. ' +\n        'Valid BUMPTYPE values include: prerelease, patch, preminor, minor, major. ' +\n        'This setting only works for lock-step version policy in bump action.'\n    });\n    this._prereleaseIdentifier = this.defineStringParameter({\n      parameterLongName: '--override-prerelease-id',\n      argumentName: 'ID',\n      description:\n        'Overrides the prerelease identifier in the version value of version-policy.json ' +\n        'for the specified version policy. ' +\n        'This setting only works for lock-step version policy. ' +\n        'This setting increases to new prerelease id when \"--bump\" is provided but only replaces the ' +\n        'prerelease name when \"--ensure-version-policy\" is provided.'\n    });\n    this._ignoreGitHooksParameter = this.defineFlagParameter({\n      parameterLongName: '--ignore-git-hooks',\n      description: `Skips execution of all git hooks. Make sure you know what you are skipping.`\n    });\n  }\n\n  protected async runAsync(): Promise<void> {\n    PolicyValidator.validatePolicy(this.rushConfiguration, { bypassPolicy: this._bypassPolicy.value });\n    const git: Git = new Git(this.rushConfiguration);\n    const userEmail: string = git.getGitEmail();\n\n    this._validateInput();\n    const versionManager: VersionManagerTypes.VersionManager = new versionManagerModule.VersionManager(\n      this.rushConfiguration,\n      userEmail,\n      this.rushConfiguration.versionPolicyConfiguration\n    );\n\n    if (this._ensureVersionPolicy.value) {\n      this._overwritePolicyVersionIfNeeded();\n      const tempBranch: string = 'version/ensure-' + new Date().getTime();\n      versionManager.ensure(\n        this._versionPolicy.value,\n        true,\n        !!this._overrideVersion.value || !!this._prereleaseIdentifier.value\n      );\n\n      const updatedPackages: Map<string, IPackageJson> = versionManager.updatedProjects;\n      if (updatedPackages.size > 0) {\n        console.log(`${updatedPackages.size} packages are getting updated.`);\n        this._gitProcess(tempBranch, this._targetBranch.value);\n      }\n    } else if (this._bumpVersion.value) {\n      const tempBranch: string = 'version/bump-' + new Date().getTime();\n      await versionManager.bumpAsync(\n        this._versionPolicy.value,\n        this._overwriteBump.value ? Enum.getValueByKey(BumpType, this._overwriteBump.value) : undefined,\n        this._prereleaseIdentifier.value,\n        true\n      );\n      this._gitProcess(tempBranch, this._targetBranch.value);\n    }\n  }\n\n  private _overwritePolicyVersionIfNeeded(): void {\n    if (!this._overrideVersion.value && !this._prereleaseIdentifier.value) {\n      // No need to overwrite policy version\n      return;\n    }\n    if (this._overrideVersion.value && this._prereleaseIdentifier.value) {\n      throw new Error(\n        `The parameters \"--override-version\" and \"--override-prerelease-id\" cannot be used together.`\n      );\n    }\n\n    if (this._versionPolicy.value) {\n      const versionConfig: VersionPolicyConfiguration = this.rushConfiguration.versionPolicyConfiguration;\n      const policy: LockStepVersionPolicy = versionConfig.getVersionPolicy(\n        this._versionPolicy.value\n      ) as LockStepVersionPolicy;\n      if (!policy || !policy.isLockstepped) {\n        throw new Error(`The lockstep version policy \"${policy.policyName}\" is not found.`);\n      }\n      let newVersion: string | undefined = undefined;\n      if (this._overrideVersion.value) {\n        newVersion = this._overrideVersion.value;\n      } else if (this._prereleaseIdentifier.value) {\n        const newPolicyVersion: semver.SemVer = new semver.SemVer(policy.version);\n        if (newPolicyVersion.prerelease.length) {\n          // Update 1.5.0-alpha.10 to 1.5.0-beta.10\n          // For example, if we are parsing \"1.5.0-alpha.10\" then the newPolicyVersion.prerelease array\n          // would contain [ \"alpha\", 10 ], so we would replace \"alpha\" with \"beta\"\n          newPolicyVersion.prerelease = [\n            this._prereleaseIdentifier.value,\n            ...newPolicyVersion.prerelease.slice(1)\n          ];\n        } else {\n          // Update 1.5.0 to 1.5.0-beta\n          // Since there is no length, we can just set to a new array\n          newPolicyVersion.prerelease = [this._prereleaseIdentifier.value];\n        }\n        newVersion = newPolicyVersion.format();\n      }\n\n      if (newVersion) {\n        versionConfig.update(this._versionPolicy.value, newVersion, true);\n      }\n    } else {\n      throw new Error(\n        'Missing --version-policy parameter to specify which version policy should be overwritten.'\n      );\n    }\n  }\n\n  private _validateInput(): void {\n    if (this._bumpVersion.value && this._ensureVersionPolicy.value) {\n      throw new Error('Please choose --bump or --ensure-version-policy but not together.');\n    }\n\n    if (this._overwriteBump.value && !Enum.tryGetValueByKey(BumpType, this._overwriteBump.value)) {\n      throw new Error(\n        'The value of override-bump is not valid.  ' +\n          'Valid values include prerelease, patch, preminor, minor, and major'\n      );\n    }\n  }\n\n  private _validateResult(): void {\n    // Load the config from file to avoid using inconsistent in-memory data.\n    const rushConfig: RushConfiguration = RushConfiguration.loadFromConfigurationFile(\n      this.rushConfiguration.rushJsonFile\n    );\n\n    const mismatchFinder: VersionMismatchFinder = VersionMismatchFinder.getMismatches(rushConfig);\n    if (mismatchFinder.numberOfMismatches) {\n      throw new Error(\n        'Unable to finish version bump because inconsistencies were encountered. ' +\n          'Run \"rush check\" to find more details.'\n      );\n    }\n  }\n\n  private _gitProcess(tempBranch: string, targetBranch: string | undefined): void {\n    // Validate the result before commit.\n    this._validateResult();\n\n    const git: Git = new Git(this.rushConfiguration);\n    const publishGit: PublishGit = new PublishGit(git, targetBranch);\n\n    // Make changes in temp branch.\n    publishGit.checkout(tempBranch, true);\n\n    const uncommittedChanges: ReadonlyArray<string> = git.getUncommittedChanges();\n\n    // Stage, commit, and push the changes to remote temp branch.\n    // Need to commit the change log updates in its own commit\n    const changeLogUpdated: boolean = uncommittedChanges.some((changePath) => {\n      return changePath.indexOf('CHANGELOG.json') > 0;\n    });\n\n    if (changeLogUpdated) {\n      publishGit.addChanges('.', this.rushConfiguration.changesFolder);\n      publishGit.addChanges(':/**/CHANGELOG.json');\n      publishGit.addChanges(':/**/CHANGELOG.md');\n      publishGit.commit(\n        this.rushConfiguration.gitChangeLogUpdateCommitMessage || DEFAULT_CHANGELOG_UPDATE_MESSAGE,\n        !this._ignoreGitHooksParameter.value\n      );\n    }\n\n    // Commit the package.json and change files updates.\n    const packageJsonUpdated: boolean = uncommittedChanges.some((changePath) => {\n      return changePath.indexOf(FileConstants.PackageJson) > 0;\n    });\n\n    if (packageJsonUpdated) {\n      publishGit.addChanges(this.rushConfiguration.versionPolicyConfigurationFilePath);\n      publishGit.addChanges(':/**/package.json');\n      publishGit.commit(\n        this.rushConfiguration.gitVersionBumpCommitMessage || DEFAULT_PACKAGE_UPDATE_MESSAGE,\n        !this._ignoreGitHooksParameter.value\n      );\n    }\n\n    if (changeLogUpdated || packageJsonUpdated) {\n      publishGit.push(tempBranch, !this._ignoreGitHooksParameter.value);\n\n      // Now merge to target branch.\n      publishGit.fetch();\n      publishGit.checkout(targetBranch);\n      publishGit.pull(!this._ignoreGitHooksParameter.value);\n      publishGit.merge(tempBranch, !this._ignoreGitHooksParameter.value);\n      publishGit.push(targetBranch, !this._ignoreGitHooksParameter.value);\n      publishGit.deleteBranch(tempBranch, true, !this._ignoreGitHooksParameter.value);\n    } else {\n      // skip commits\n      publishGit.fetch();\n      publishGit.checkout(targetBranch);\n      publishGit.deleteBranch(tempBranch, false, !this._ignoreGitHooksParameter.value);\n    }\n  }\n}\n"]}