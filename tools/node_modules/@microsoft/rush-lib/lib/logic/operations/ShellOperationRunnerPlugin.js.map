{"version":3,"file":"ShellOperationRunnerPlugin.js","sourceRoot":"","sources":["../../../src/logic/operations/ShellOperationRunnerPlugin.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAI3D,oDAAiD;AACjD,+DAA4D;AAC5D,iEAAwF;AACxF,uDAAoD;AAQpD,MAAM,WAAW,GAAiC,4BAA4B,CAAC;AAE/E;;GAEG;AACH,MAAa,0BAA0B;IAC9B,KAAK,CAAC,KAAyB;QACpC,KAAK,CAAC,gBAAgB,CAAC,GAAG,CAAC,WAAW,EAAE,qBAAqB,CAAC,CAAC;IACjE,CAAC;CACF;AAJD,gEAIC;AAED,SAAS,qBAAqB,CAC5B,UAA0B,EAC1B,OAAiC;IAEjC,MAAM,EACJ,uBAAuB,EACvB,yBAAyB,EACzB,cAAc,EAAE,cAAc,EAC9B,qBAAqB,EACrB,iBAAiB,EAClB,GAAG,OAAO,CAAC;IAEZ,MAAM,uBAAuB,GAA0B,IAAI,GAAG,EAAE,CAAC;IAEjE,SAAS,gCAAgC,CAAC,KAAa;QACrD,IAAI,qBAAqB,GAAyB,uBAAuB,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACrF,IAAI,CAAC,qBAAqB,EAAE;YAC1B,qBAAqB,GAAG,EAAE,CAAC;YAC3B,KAAK,MAAM,sBAAsB,IAAI,KAAK,CAAC,oBAAoB,EAAE;gBAC/D,sBAAsB,CAAC,eAAe,CAAC,qBAAqB,CAAC,CAAC;aAC/D;YAED,uBAAuB,CAAC,GAAG,CAAC,KAAK,EAAE,qBAAqB,CAAC,CAAC;SAC3D;QAED,OAAO,qBAAqB,CAAC;IAC/B,CAAC;IAED,KAAK,MAAM,SAAS,IAAI,UAAU,EAAE;QAClC,MAAM,EAAE,eAAe,EAAE,KAAK,EAAE,iBAAiB,EAAE,OAAO,EAAE,GAAG,SAAS,CAAC;QAEzE,IAAI,KAAK,IAAI,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE;YACzC,kGAAkG;YAClG,0DAA0D;YAC1D,MAAM,qBAAqB,GAA0B,gCAAgC,CAAC,KAAK,CAAC,CAAC;YAE7F,MAAM,YAAY,GAAuB,cAAc,CAAC,OAAO,EAAE,KAAK,CAAC,IAAI,EAAE,qBAAqB,CAAC,CAAC;YAEpG,IAAI,YAAY,KAAK,SAAS,IAAI,CAAC,KAAK,CAAC,mBAAmB,EAAE;gBAC5D,MAAM,IAAI,KAAK,CACb,gBAAgB,OAAO,CAAC,WAAW,wBAAwB,KAAK,CAAC,IAAI,wDAAwD,CAC9H,CAAC;aACH;YAED,MAAM,WAAW,GAAW,cAAc,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;YAE3D,IAAI,YAAY,EAAE;gBAChB,SAAS,CAAC,MAAM,GAAG,IAAI,2CAAoB,CAAC;oBAC1C,uBAAuB;oBACvB,YAAY,EAAE,YAAY,IAAI,EAAE;oBAChC,WAAW;oBACX,yBAAyB;oBACzB,KAAK;oBACL,qBAAqB;oBACrB,iBAAiB;oBACjB,WAAW,EAAE,OAAO;oBACpB,cAAc;iBACf,CAAC,CAAC;aACJ;iBAAM;gBACL,8DAA8D;gBAC9D,SAAS,CAAC,MAAM,GAAG,IAAI,yCAAmB,CAAC;oBACzC,IAAI,EAAE,WAAW;oBACjB,MAAM,EAAE,iCAAe,CAAC,IAAI;oBAC5B,MAAM,EAAE,KAAK;iBACd,CAAC,CAAC;aACJ;SACF;KACF;IAED,OAAO,UAAU,CAAC;AACpB,CAAC;AAED,SAAS,cAAc,CACrB,WAAqC,EACrC,YAAoB,EACpB,qBAA4C;IAE5C,MAAM,EAAE,OAAO,EAAE,GAAG,WAAW,CAAC,WAAW,CAAC;IAE5C,MAAM,UAAU,GAA8B,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAG,YAAY,CAAC,CAAC;IAEtE,IAAI,UAAU,KAAK,SAAS,IAAI,UAAU,KAAK,IAAI,EAAE;QACnD,OAAO,SAAS,CAAC;KAClB;IAED,IAAI,CAAC,UAAU,EAAE;QACf,OAAO,EAAE,CAAC;KACX;SAAM;QACL,MAAM,YAAY,GAAW,GAAG,UAAU,IAAI,qBAAqB,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC;QAChF,OAAO,OAAO,CAAC,QAAQ,KAAK,OAAO,CAAC,CAAC,CAAC,IAAA,+CAAwB,EAAC,YAAY,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC;KAC7F;AACH,CAAC;AAED,SAAS,cAAc,CAAC,KAAa,EAAE,OAAiC;IACtE,IAAI,KAAK,CAAC,WAAW,EAAE;QACrB,qGAAqG;QACrG,OAAO,OAAO,CAAC,WAAW,CAAC;KAC5B;SAAM;QACL,MAAM,sBAAsB,GAAW,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,6BAAa,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;QAC9F,OAAO,GAAG,OAAO,CAAC,WAAW,KAAK,sBAAsB,GAAG,CAAC;KAC7D;AACH,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport type { IPhase } from '../../api/CommandLineConfiguration';\nimport type { RushConfigurationProject } from '../../api/RushConfigurationProject';\nimport { RushConstants } from '../RushConstants';\nimport { NullOperationRunner } from './NullOperationRunner';\nimport { convertSlashesForWindows, ShellOperationRunner } from './ShellOperationRunner';\nimport { OperationStatus } from './OperationStatus';\nimport type {\n  ICreateOperationsContext,\n  IPhasedCommandPlugin,\n  PhasedCommandHooks\n} from '../../pluginFramework/PhasedCommandHooks';\nimport { Operation } from './Operation';\n\nconst PLUGIN_NAME: 'ShellOperationRunnerPlugin' = 'ShellOperationRunnerPlugin';\n\n/**\n * Core phased command plugin that provides the functionality for executing an operation via shell command.\n */\nexport class ShellOperationRunnerPlugin implements IPhasedCommandPlugin {\n  public apply(hooks: PhasedCommandHooks): void {\n    hooks.createOperations.tap(PLUGIN_NAME, createShellOperations);\n  }\n}\n\nfunction createShellOperations(\n  operations: Set<Operation>,\n  context: ICreateOperationsContext\n): Set<Operation> {\n  const {\n    buildCacheConfiguration,\n    isIncrementalBuildAllowed,\n    phaseSelection: selectedPhases,\n    projectChangeAnalyzer,\n    rushConfiguration\n  } = context;\n\n  const customParametersByPhase: Map<IPhase, string[]> = new Map();\n\n  function getCustomParameterValuesForPhase(phase: IPhase): ReadonlyArray<string> {\n    let customParameterValues: string[] | undefined = customParametersByPhase.get(phase);\n    if (!customParameterValues) {\n      customParameterValues = [];\n      for (const tsCommandLineParameter of phase.associatedParameters) {\n        tsCommandLineParameter.appendToArgList(customParameterValues);\n      }\n\n      customParametersByPhase.set(phase, customParameterValues);\n    }\n\n    return customParameterValues;\n  }\n\n  for (const operation of operations) {\n    const { associatedPhase: phase, associatedProject: project } = operation;\n\n    if (phase && project && !operation.runner) {\n      // This is a shell command. In the future, may consider having a property on the initial operation\n      // to specify a runner type requested in rush-project.json\n      const customParameterValues: ReadonlyArray<string> = getCustomParameterValuesForPhase(phase);\n\n      const commandToRun: string | undefined = getScriptToRun(project, phase.name, customParameterValues);\n\n      if (commandToRun === undefined && !phase.ignoreMissingScript) {\n        throw new Error(\n          `The project '${project.packageName}' does not define a '${phase.name}' command in the 'scripts' section of its package.json`\n        );\n      }\n\n      const displayName: string = getDisplayName(phase, project);\n\n      if (commandToRun) {\n        operation.runner = new ShellOperationRunner({\n          buildCacheConfiguration,\n          commandToRun: commandToRun || '',\n          displayName,\n          isIncrementalBuildAllowed,\n          phase,\n          projectChangeAnalyzer,\n          rushConfiguration,\n          rushProject: project,\n          selectedPhases\n        });\n      } else {\n        // Empty build script indicates a no-op, so use a no-op runner\n        operation.runner = new NullOperationRunner({\n          name: displayName,\n          result: OperationStatus.NoOp,\n          silent: false\n        });\n      }\n    }\n  }\n\n  return operations;\n}\n\nfunction getScriptToRun(\n  rushProject: RushConfigurationProject,\n  commandToRun: string,\n  customParameterValues: ReadonlyArray<string>\n): string | undefined {\n  const { scripts } = rushProject.packageJson;\n\n  const rawCommand: string | undefined | null = scripts?.[commandToRun];\n\n  if (rawCommand === undefined || rawCommand === null) {\n    return undefined;\n  }\n\n  if (!rawCommand) {\n    return '';\n  } else {\n    const shellCommand: string = `${rawCommand} ${customParameterValues.join(' ')}`;\n    return process.platform === 'win32' ? convertSlashesForWindows(shellCommand) : shellCommand;\n  }\n}\n\nfunction getDisplayName(phase: IPhase, project: RushConfigurationProject): string {\n  if (phase.isSynthetic) {\n    // Because this is a synthetic phase, just use the project name because there aren't any other phases\n    return project.packageName;\n  } else {\n    const phaseNameWithoutPrefix: string = phase.name.slice(RushConstants.phaseNamePrefix.length);\n    return `${project.packageName} (${phaseNameWithoutPrefix})`;\n  }\n}\n"]}