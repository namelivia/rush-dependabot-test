"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
exports.RushAmazonS3BuildCachePlugin = void 0;
const node_core_library_1 = require("@rushstack/node-core-library");
const AmazonS3BuildCacheProviderModule = node_core_library_1.Import.lazy('./AmazonS3BuildCacheProvider', require);
const PLUGIN_NAME = 'AmazonS3BuildCachePlugin';
/**
 * @public
 */
class RushAmazonS3BuildCachePlugin {
    constructor() {
        this.pluginName = PLUGIN_NAME;
    }
    apply(rushSession, rushConfig) {
        rushSession.hooks.initialize.tap(PLUGIN_NAME, () => {
            rushSession.registerCloudBuildCacheProviderFactory('amazon-s3', (buildCacheConfig) => {
                const { amazonS3Configuration } = buildCacheConfig;
                let options;
                const { s3Endpoint, s3Bucket, s3Region } = amazonS3Configuration;
                const s3Prefix = amazonS3Configuration.s3Prefix || undefined;
                const isCacheWriteAllowed = !!amazonS3Configuration.isCacheWriteAllowed;
                if (s3Prefix && s3Prefix[0] === '/') {
                    throw new Error('s3Prefix should not have a leading /');
                }
                // mutually exclusive
                if (s3Bucket && s3Endpoint) {
                    throw new Error('Only one of "s3Bucket" or "s3Endpoint" must be provided.');
                }
                if (s3Endpoint) {
                    options = {
                        // IAmazonS3BuildCacheProviderOptionsAdvanced
                        s3Region,
                        s3Endpoint,
                        s3Prefix,
                        isCacheWriteAllowed
                    };
                }
                if (s3Bucket) {
                    options = {
                        // IAmazonS3BuildCacheProviderOptionsSimple
                        s3Region,
                        s3Bucket,
                        s3Prefix,
                        isCacheWriteAllowed
                    };
                }
                if (!options) {
                    throw new Error('You must provide either an s3Endpoint or s3Bucket');
                }
                return new AmazonS3BuildCacheProviderModule.AmazonS3BuildCacheProvider(options, rushSession);
            });
        });
    }
}
exports.RushAmazonS3BuildCachePlugin = RushAmazonS3BuildCachePlugin;
//# sourceMappingURL=RushAmazonS3BuildCachePlugin.js.map