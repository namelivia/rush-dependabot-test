{"version":3,"file":"RushConstants.js","sourceRoot":"","sources":["../../src/logic/RushConstants.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D;;;;;;;;;GASG;AACH,MAAa,aAAa;;AAA1B,sCA0OC;AAzOC;;;;;;GAMG;AACoB,6CAA+B,GAAW,gCAAgC,CAAC;AAElG;;GAEG;AACoB,mCAAqB,GAAW,SAAS,CAAC;AAEjE;;;;;;GAMG;AACoB,gDAAkC,GAAW,mCAAmC,CAAC;AAExG;;GAEG;AACoB,8BAAgB,GAAW,QAAQ,CAAC;AAE3D;;GAEG;AACoB,8BAAgB,GAAW,YAAY,CAAC;AAE/D;;;;GAIG;AACoB,gCAAkB,GAAW,MAAM,CAAC;AAE3D;;;GAGG;AACoB,wCAA0B,GAAW,UAAU,CAAC;AAEvE;;;;GAIG;AACoB,oCAAsB,GAAW,UAAU,CAAC;AAEnE;;GAEG;AACoB,mCAAqB,GAAW,qBAAqB,CAAC;AAE7E;;GAEG;AACoB,uCAAyB,GAAW,CAAC,CAAC;AAE7D;;;GAGG;AACoB,sCAAwB,GAAW,gBAAgB,CAAC;AAE3E;;GAEG;AACoB,gCAAkB,GAAW,aAAa,CAAC;AAElE;;GAEG;AACoB,gCAAkB,GAAW,eAAe,CAAC;AAEpE;;GAEG;AACoB,oCAAsB,GAAW,WAAW,CAAC;AAEpE;;GAEG;AACoB,mCAAqB,GAAW,cAAc,CAAC;AAEtE;;;;;;GAMG;AACH,mFAAmF;AACnF,gFAAgF;AACzD,oCAAsB,GAAW,sBAAsB,CAAC;AAE/E;;;;GAIG;AACoB,oCAAsB,GAAW,sBAAsB,CAAC;AAE/E;;;GAGG;AACoB,+BAAiB,GAAW,iBAAiB,CAAC;AAErE;;;GAGG;AACoB,mCAAqB,GAAW,OAAO,CAAC;AAE/D;;;GAGG;AACoB,iCAAmB,GAAW,mBAAmB,CAAC;AAElD,qCAAuB,GAAW,uBAAuB,CAAC;AAEjF;;GAEG;AACoB,iCAAmB,GAAW,kBAAkB,CAAC;AAExE;;GAEG;AACoB,uCAAyB,GAAW,mBAAmB,CAAC;AAE/E;;GAEG;AACoB,wCAA0B,GAAW,2BAA2B,CAAC;AAExF;;GAEG;AACoB,iCAAmB,GAAW,kBAAkB,CAAC;AAExE;;GAEG;AACoB,gCAAkB,GAAW,kBAAkB,CAAC;AAEvE;;;GAGG;AACoB,+BAAiB,GAAW,CAAC,CAAC;AAErD;;GAEG;AACoB,uCAAyB,GAAW,mBAAmB,CAAC;AAE/E;;GAEG;AACoB,4BAAc,GAAW,mBAAmB,CAAC;AAEpE;;GAEG;AACoB,6BAAe,GAAW,iBAAiB,CAAC;AAEnE;;;GAGG;AACoB,oCAAsB,GAAW,eAAe,CAAC;AAExE;;;GAGG;AACoB,uCAAyB,GAAW,sBAAsB,CAAC;AAElF;;GAEG;AACoB,6BAAe,GAAW,MAAM,CAAC;AAExD;;GAEG;AACoB,+BAAiB,GAAa,QAAQ,CAAC;AAE9D;;GAEG;AACoB,+BAAiB,GAAa,QAAQ,CAAC;AAE9D;;GAEG;AACoB,8BAAgB,GAAW,OAAO,CAAC;AAE1D;;GAEG;AACoB,gCAAkB,GAAW,SAAS,CAAC;AAEvC,+CAAiC,GAAW,0BAA0B,CAAC;AAE9F;;;;GAIG;AACoB,2BAAa,GAAW,GAAG,CAAC;AAEnD;;GAEG;AACoB,6CAA+B,GAAW,YAAY,CAAC;AAE9E;;GAEG;AACoB,gCAAkB,GAAW,WAAW,CAAC;AAEhE;;GAEG;AACoB,6BAAe,GAAc,SAAS,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\n/**\n * Constants used by the Rush tool.\n * @beta\n *\n * @remarks\n *\n * These are NOT part of the public API surface for rush-lib.\n * The rationale is that we don't want people implementing custom parsers for\n * the Rush config files; instead, they should rely on the official APIs from rush-lib.\n */\nexport class RushConstants {\n  /**\n   * The filename (\"browser-approved-packages.json\") for an optional policy configuration file\n   * that stores a list of NPM packages that have been approved for usage by Rush projects.\n   * This is part of a pair of config files, one for projects that run in a web browser\n   * (e.g. whose approval criteria mostly focuses on licensing and code size), and one for everywhere else\n   * (e.g. tooling projects whose approval criteria mostly focuses on avoiding node_modules sprawl).\n   */\n  public static readonly browserApprovedPackagesFilename: string = 'browser-approved-packages.json';\n\n  /**\n   * The folder name (\"changes\") where change files will be stored.\n   */\n  public static readonly changeFilesFolderName: string = 'changes';\n\n  /**\n   * The filename (\"nonbrowser-approved-packages.json\") for an optional policy configuration file\n   * that stores a list of NPM packages that have been approved for usage by Rush projects.\n   * This is part of a pair of config files, one for projects that run in a web browser\n   * (e.g. whose approval criteria mostly focuses on licensing and code size), and one for everywhere else\n   * (e.g. tooling projects whose approval criteria mostly focuses on avoiding node_modules sprawl).\n   */\n  public static readonly nonbrowserApprovedPackagesFilename: string = 'nonbrowser-approved-packages.json';\n\n  /**\n   * The folder name (\"common\") where Rush's common data will be stored.\n   */\n  public static readonly commonFolderName: string = 'common';\n\n  /**\n   * The NPM scope (\"\\@rush-temp\") that is used for Rush's temporary projects.\n   */\n  public static readonly rushTempNpmScope: string = '@rush-temp';\n\n  /**\n   * The folder name (\"temp\") under the common folder, or under the .rush folder in each project's directory where\n   * temporary files will be stored.\n   * Example: `C:\\MyRepo\\common\\temp`\n   */\n  public static readonly rushTempFolderName: string = 'temp';\n\n  /**\n   * The folder name (\"projects\") where temporary projects will be stored.\n   * Example: `C:\\MyRepo\\common\\temp\\projects`\n   */\n  public static readonly rushTempProjectsFolderName: string = 'projects';\n\n  /**\n   * The folder name (\"variants\") under which named variant configurations for\n   * alternate dependency sets may be found.\n   * Example: `C:\\MyRepo\\common\\config\\rush\\variants`\n   */\n  public static readonly rushVariantsFolderName: string = 'variants';\n\n  /**\n   * The filename (\"npm-shrinkwrap.json\") used to store an installation plan for the NPM package manger.\n   */\n  public static readonly npmShrinkwrapFilename: string = 'npm-shrinkwrap.json';\n\n  /**\n   * Number of installation attempts\n   */\n  public static readonly defaultMaxInstallAttempts: number = 1;\n\n  /**\n   * The filename (\"pnpm-lock.yaml\") used to store an installation plan for the PNPM package manger\n   * (PNPM version 3.x and later).\n   */\n  public static readonly pnpmV3ShrinkwrapFilename: string = 'pnpm-lock.yaml';\n\n  /**\n   * The filename (\"pnpmfile.js\") used to add custom configuration to PNPM (PNPM version 1.x and later).\n   */\n  public static readonly pnpmfileV1Filename: string = 'pnpmfile.js';\n\n  /**\n   * The filename (\".pnpmfile.cjs\") used to add custom configuration to PNPM (PNPM version 6.x and later).\n   */\n  public static readonly pnpmfileV6Filename: string = '.pnpmfile.cjs';\n\n  /**\n   * The filename (\"shrinkwrap.yaml\") used to store state for pnpm\n   */\n  public static readonly yarnShrinkwrapFilename: string = 'yarn.lock';\n\n  /**\n   * The folder name (\"node_modules\") where NPM installs its packages.\n   */\n  public static readonly nodeModulesFolderName: string = 'node_modules';\n\n  /**\n   * The filename (\"pinned-versions.json\") for an old configuration file that\n   * that is no longer supported.\n   *\n   * @deprecated This feature has been superseded by the \"preferredVersions\" setting\n   * in common-versions.json\n   */\n  // NOTE: Although this is marked as \"deprecated\", we will probably never retire it,\n  // since we always want to report the warning when someone upgrades an old repo.\n  public static readonly pinnedVersionsFilename: string = 'pinned-versions.json';\n\n  /**\n   * The filename (\"common-versions.json\") for an optional configuration file\n   * that stores dependency version information that affects all projects in the repo.\n   * This configuration file should go in the \"common/config/rush\" folder.\n   */\n  public static readonly commonVersionsFilename: string = 'common-versions.json';\n\n  /**\n   * The filename (\"repo-state.json\") for a file used by Rush to\n   * store the state of various features as they stand in the repo.\n   */\n  public static readonly repoStateFilename: string = 'repo-state.json';\n\n  /**\n   * The name of the per-project folder where project-specific Rush files are stored. For example,\n   * the package-deps files, which are used by commands to determine if a particular project needs to be rebuilt.\n   */\n  public static readonly projectRushFolderName: string = '.rush';\n\n  /**\n   * Custom command line configuration file, which is used by rush for implementing\n   * custom command and options.\n   */\n  public static readonly commandLineFilename: string = 'command-line.json';\n\n  public static readonly versionPoliciesFilename: string = 'version-policies.json';\n\n  /**\n   * Experiments configuration file.\n   */\n  public static readonly experimentsFilename: string = 'experiments.json';\n\n  /**\n   * Rush plugins configuration file name.\n   */\n  public static readonly rushPluginsConfigFilename: string = 'rush-plugins.json';\n\n  /**\n   * Rush plugin manifest file name.\n   */\n  public static readonly rushPluginManifestFilename: string = 'rush-plugin-manifest.json';\n\n  /**\n   * The artifactory.json configuration file name.\n   */\n  public static readonly artifactoryFilename: string = 'artifactory.json';\n\n  /**\n   * Build cache configuration file.\n   */\n  public static readonly buildCacheFilename: string = 'build-cache.json';\n\n  /**\n   * Build cache version number, incremented when the logic to create cache entries changes.\n   * Changing this ensures that cache entries generated by an old version will no longer register as a cache hit.\n   */\n  public static readonly buildCacheVersion: number = 1;\n\n  /**\n   * Per-project configuration filename.\n   */\n  public static readonly rushProjectConfigFilename: string = 'rush-project.json';\n\n  /**\n   * The URL (\"http://rushjs.io\") for the Rush web site.\n   */\n  public static readonly rushWebSiteUrl: string = 'https://rushjs.io';\n\n  /**\n   * The name of the NPM package for the Rush tool (\"\\@microsoft/rush\").\n   */\n  public static readonly rushPackageName: string = '@microsoft/rush';\n\n  /**\n   * The folder name (\"rush-recycler\") where Rush moves large folder trees\n   * before asynchronously deleting them.\n   */\n  public static readonly rushRecyclerFolderName: string = 'rush-recycler';\n\n  /**\n   * The name of the file to drop in project-folder/.rush/temp/ containing a listing of the project's direct\n   * and indirect dependencies. This is used to detect if a project's dependencies have changed since the last build.\n   */\n  public static readonly projectShrinkwrapFilename: string = 'shrinkwrap-deps.json';\n\n  /**\n   * The value of the \"commandKind\" property for a bulk command in command-line.json\n   */\n  public static readonly bulkCommandKind: 'bulk' = 'bulk';\n\n  /**\n   * The value of the \"commandKind\" property for a global command in command-line.json\n   */\n  public static readonly globalCommandKind: 'global' = 'global';\n\n  /**\n   * The value of the \"commandKind\" property for a phased command in command-line.json\n   */\n  public static readonly phasedCommandKind: 'phased' = 'phased';\n\n  /**\n   * The name of the incremental build command.\n   */\n  public static readonly buildCommandName: string = 'build';\n\n  /**\n   * The name of the non-incremental build command.\n   */\n  public static readonly rebuildCommandName: string = 'rebuild';\n\n  public static readonly updateCloudCredentialsCommandName: string = 'update-cloud-credentials';\n\n  /**\n   * When a hash generated that contains multiple input segments, this character may be used\n   * to separate them to avoid issues like\n   * crypto.createHash('sha1').update('a').update('bc').digest('hex') === crypto.createHash('sha1').update('ab').update('c').digest('hex')\n   */\n  public static readonly hashDelimiter: string = '|';\n\n  /**\n   * The name of the per-user Rush configuration data folder.\n   */\n  public static readonly rushUserConfigurationFolderName: string = '.rush-user';\n\n  /**\n   * The name of the project `rush-logs` folder.\n   */\n  public static readonly rushLogsFolderName: string = 'rush-logs';\n\n  /**\n   * The expected prefix for phase names in \"common/config/rush/command-line.json\"\n   */\n  public static readonly phaseNamePrefix: '_phase:' = '_phase:';\n}\n"]}