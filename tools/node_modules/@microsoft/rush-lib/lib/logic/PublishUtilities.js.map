{"version":3,"file":"PublishUtilities.js","sourceRoot":"","sources":["../../src/logic/PublishUtilities.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\n/**\n * This file contains a set of helper functions that are unit tested and used with the PublishAction,\n * which itself is a thin wrapper around these helpers.\n */\n\nimport { EOL } from 'os';\nimport * as path from 'path';\nimport * as semver from 'semver';\nimport { execSync } from 'child_process';\nimport { IPackageJson, JsonFile, FileConstants, Text, Enum } from '@rushstack/node-core-library';\n\nimport { IChangeInfo, ChangeType, IVersionPolicyChangeInfo } from '../api/ChangeManagement';\nimport { RushConfigurationProject } from '../api/RushConfigurationProject';\nimport { Utilities, IEnvironment } from '../utilities/Utilities';\nimport { PrereleaseToken } from './PrereleaseToken';\nimport { ChangeFiles } from './ChangeFiles';\nimport { RushConfiguration } from '../api/RushConfiguration';\nimport { DependencySpecifier, DependencySpecifierType } from './DependencySpecifier';\nimport { Git, DEFAULT_GIT_TAG_SEPARATOR } from './Git';\nimport { LockStepVersionPolicy } from '../api/VersionPolicy';\n\nexport interface IChangeRequests {\n  packageChanges: Map<string, IChangeInfo>;\n  versionPolicyChanges: Map<string, IVersionPolicyChangeInfo>;\n}\n\nexport class PublishUtilities {\n  /**\n   * Finds change requests in the given folder.\n   * @param changesPath Path to the changes folder.\n   * @returns Dictionary of all change requests, keyed by package name.\n   */\n  public static findChangeRequests(\n    allPackages: Map<string, RushConfigurationProject>,\n    rushConfiguration: RushConfiguration,\n    changeFiles: ChangeFiles,\n    includeCommitDetails?: boolean,\n    prereleaseToken?: PrereleaseToken,\n    projectsToExclude?: Set<string>\n  ): IChangeRequests {\n    const allChanges: IChangeRequests = {\n      packageChanges: new Map<string, IChangeInfo>(),\n      versionPolicyChanges: new Map<string, IVersionPolicyChangeInfo>()\n    };\n\n    console.log(`Finding changes in: ${changeFiles.getChangesPath()}`);\n\n    const files: string[] = changeFiles.getFiles();\n\n    // Add the minimum changes defined by the change descriptions.\n    files.forEach((fullPath: string) => {\n      const changeRequest: IChangeInfo = JsonFile.load(fullPath);\n\n      if (includeCommitDetails) {\n        const git: Git = new Git(rushConfiguration);\n        PublishUtilities._updateCommitDetails(git, fullPath, changeRequest.changes);\n      }\n\n      for (const change of changeRequest.changes!) {\n        PublishUtilities._addChange(\n          change,\n          allChanges,\n          allPackages,\n          rushConfiguration,\n          prereleaseToken,\n          projectsToExclude\n        );\n      }\n    });\n\n    // keep resolving downstream dependency changes and version policy changes\n    // until no more changes are detected\n    let hasChanges: boolean;\n    do {\n      hasChanges = false;\n\n      // For each requested package change, ensure downstream dependencies are also updated.\n      allChanges.packageChanges.forEach((change, packageName) => {\n        hasChanges =\n          PublishUtilities._updateDownstreamDependencies(\n            change,\n            allChanges,\n            allPackages,\n            rushConfiguration,\n            prereleaseToken,\n            projectsToExclude\n          ) || hasChanges;\n      });\n\n      // Bump projects affected by the version policy changes.\n      allPackages.forEach((project) => {\n        const versionPolicyChange: IVersionPolicyChangeInfo | undefined =\n          project.versionPolicyName !== undefined\n            ? allChanges.versionPolicyChanges.get(project.versionPolicyName)\n            : undefined;\n\n        if (versionPolicyChange === undefined) {\n          return;\n        }\n\n        const projectHasChanged: boolean = this._addChange(\n          {\n            packageName: project.packageName,\n            changeType: versionPolicyChange.changeType,\n            newVersion: versionPolicyChange.newVersion // enforce the specific policy version\n          },\n          allChanges,\n          allPackages,\n          rushConfiguration,\n          prereleaseToken,\n          projectsToExclude\n        );\n\n        if (projectHasChanged) {\n          console.log(\n            `${EOL}* APPLYING: update ${project.packageName} to version ${versionPolicyChange.newVersion}`\n          );\n        }\n\n        hasChanges = projectHasChanged || hasChanges;\n      });\n    } while (hasChanges);\n\n    // Update orders so that downstreams are marked to come after upstreams.\n    allChanges.packageChanges.forEach((change, packageName) => {\n      const project: RushConfigurationProject = allPackages.get(packageName)!;\n      const packageJson: IPackageJson = project.packageJson;\n      const deps: Iterable<RushConfigurationProject> = project.consumingProjects;\n\n      // Write the new version expected for the change.\n      const skipVersionBump: boolean = PublishUtilities._shouldSkipVersionBump(\n        project,\n        prereleaseToken,\n        projectsToExclude\n      );\n      if (skipVersionBump) {\n        change.newVersion = packageJson.version;\n      } else {\n        // For hotfix changes, do not re-write new version\n        change.newVersion =\n          change.changeType! >= ChangeType.patch\n            ? semver.inc(packageJson.version, PublishUtilities._getReleaseType(change.changeType!))!\n            : change.changeType === ChangeType.hotfix\n            ? change.newVersion\n            : packageJson.version;\n      }\n\n      if (deps) {\n        for (const dep of deps) {\n          const depChange: IChangeInfo | undefined = allChanges.packageChanges.get(dep.packageName);\n          if (depChange) {\n            depChange.order = Math.max(change.order! + 1, depChange.order!);\n          }\n        }\n      }\n    });\n\n    return allChanges;\n  }\n\n  /**\n   * Given the changes hash, flattens them into a sorted array based on their dependency order.\n   * @params packageChanges - hash of change requests.\n   * @returns Sorted array of change requests.\n   */\n  public static sortChangeRequests(packageChanges: Map<string, IChangeInfo>): IChangeInfo[] {\n    return [...packageChanges.values()].sort((a, b) =>\n      a.order! === b.order! ? a.packageName.localeCompare(b.packageName) : a.order! < b.order! ? -1 : 1\n    );\n  }\n\n  /**\n   * Given a single change request, updates the package json file with updated versions on disk.\n   */\n  public static updatePackages(\n    allChanges: IChangeRequests,\n    allPackages: Map<string, RushConfigurationProject>,\n    rushConfiguration: RushConfiguration,\n    shouldCommit: boolean,\n    prereleaseToken?: PrereleaseToken,\n    projectsToExclude?: Set<string>\n  ): Map<string, IPackageJson> {\n    const updatedPackages: Map<string, IPackageJson> = new Map<string, IPackageJson>();\n\n    allChanges.packageChanges.forEach((change, packageName) => {\n      const updatedPackage: IPackageJson = PublishUtilities._writePackageChanges(\n        change,\n        allChanges,\n        allPackages,\n        rushConfiguration,\n        shouldCommit,\n        prereleaseToken,\n        projectsToExclude\n      );\n      updatedPackages.set(updatedPackage.name, updatedPackage);\n    });\n\n    return updatedPackages;\n  }\n\n  /**\n   * Returns the generated tagname to use for a published commit, given package name and version.\n   */\n  public static createTagname(\n    packageName: string,\n    version: string,\n    separator: string = DEFAULT_GIT_TAG_SEPARATOR\n  ): string {\n    return packageName + `${separator}v` + version;\n  }\n\n  public static isRangeDependency(version: string): boolean {\n    const LOOSE_PKG_REGEX: RegExp = />=?(?:\\d+\\.){2}\\d+(\\-[0-9A-Za-z-.]*)?\\s+<(?:\\d+\\.){2}\\d+/;\n\n    return LOOSE_PKG_REGEX.test(version);\n  }\n\n  public static getEnvArgs(): { [key: string]: string | undefined } {\n    const env: { [key: string]: string | undefined } = {};\n\n    // Copy existing process.env values (for nodist)\n    Object.keys(process.env).forEach((key: string) => {\n      env[key] = process.env[key];\n    });\n    return env;\n  }\n\n  /**\n   * @param secretSubstring -- if specified, a substring to be replaced by `<<SECRET>>` to avoid printing secrets\n   * on the console\n   */\n  public static execCommand(\n    shouldExecute: boolean,\n    command: string,\n    args: string[] = [],\n    workingDirectory: string = process.cwd(),\n    environment?: IEnvironment,\n    secretSubstring?: string\n  ): void {\n    let relativeDirectory: string = path.relative(process.cwd(), workingDirectory);\n\n    if (relativeDirectory) {\n      relativeDirectory = `(${relativeDirectory})`;\n    }\n\n    let commandArgs: string = args.join(' ');\n\n    if (secretSubstring && secretSubstring.length > 0) {\n      // Avoid printing the NPM publish token on the console when displaying the commandArgs\n      commandArgs = Text.replaceAll(commandArgs, secretSubstring, '<<SECRET>>');\n    }\n\n    console.log(\n      `${EOL}* ${shouldExecute ? 'EXECUTING' : 'DRYRUN'}: ${command} ${commandArgs} ${relativeDirectory}`\n    );\n\n    if (shouldExecute) {\n      Utilities.executeCommand({\n        command,\n        args,\n        workingDirectory,\n        environment,\n        suppressOutput: false,\n        keepEnvironment: true\n      });\n    }\n  }\n\n  public static getNewDependencyVersion(\n    dependencies: { [key: string]: string },\n    dependencyName: string,\n    newProjectVersion: string\n  ): string {\n    const currentDependencySpecifier: DependencySpecifier = new DependencySpecifier(\n      dependencyName,\n      dependencies[dependencyName]\n    );\n    const currentDependencyVersion: string = currentDependencySpecifier.versionSpecifier;\n    let newDependencyVersion: string;\n\n    if (currentDependencyVersion === '*') {\n      newDependencyVersion = '*';\n    } else if (PublishUtilities.isRangeDependency(currentDependencyVersion)) {\n      newDependencyVersion = PublishUtilities._getNewRangeDependency(newProjectVersion);\n    } else if (currentDependencyVersion.lastIndexOf('~', 0) === 0) {\n      newDependencyVersion = '~' + newProjectVersion;\n    } else if (currentDependencyVersion.lastIndexOf('^', 0) === 0) {\n      newDependencyVersion = '^' + newProjectVersion;\n    } else {\n      newDependencyVersion = newProjectVersion;\n    }\n    return currentDependencySpecifier.specifierType === DependencySpecifierType.Workspace\n      ? `workspace:${newDependencyVersion}`\n      : newDependencyVersion;\n  }\n\n  private static _getReleaseType(changeType: ChangeType): semver.ReleaseType {\n    switch (changeType) {\n      case ChangeType.major:\n        return 'major';\n      case ChangeType.minor:\n        return 'minor';\n      case ChangeType.patch:\n        return 'patch';\n      case ChangeType.hotfix:\n        return 'prerelease';\n      default:\n        throw new Error(`Wrong change type ${changeType}`);\n    }\n  }\n\n  private static _getChangeTypeForSemverReleaseType(releaseType: semver.ReleaseType): ChangeType {\n    switch (releaseType) {\n      case 'major':\n        return ChangeType.major;\n      case 'minor':\n        return ChangeType.minor;\n      case 'patch':\n        return ChangeType.patch;\n      case 'premajor':\n      case 'preminor':\n      case 'prepatch':\n      case 'prerelease':\n        return ChangeType.hotfix;\n      default:\n        throw new Error(`Unsupported release type \"${releaseType}\"`);\n    }\n  }\n\n  private static _getNewRangeDependency(newVersion: string): string {\n    let upperLimit: string = newVersion;\n    if (semver.prerelease(newVersion)) {\n      // Remove the prerelease first, then bump major.\n      upperLimit = semver.inc(newVersion, 'patch')!;\n    }\n    upperLimit = semver.inc(upperLimit, 'major')!;\n\n    return `>=${newVersion} <${upperLimit}`;\n  }\n\n  private static _shouldSkipVersionBump(\n    project: RushConfigurationProject,\n    prereleaseToken?: PrereleaseToken,\n    projectsToExclude?: Set<string>\n  ): boolean {\n    // Suffix does not bump up the version.\n    // Excluded projects do not bump up version.\n    return (\n      (prereleaseToken && prereleaseToken.isSuffix) ||\n      (projectsToExclude && projectsToExclude.has(project.packageName)) ||\n      !project.shouldPublish\n    );\n  }\n\n  private static _updateCommitDetails(git: Git, filename: string, changes: IChangeInfo[] | undefined): void {\n    try {\n      const gitPath: string = git.getGitPathOrThrow();\n      const fileLog: string = execSync(`${gitPath} log -n 1 ${filename}`, {\n        cwd: path.dirname(filename)\n      }).toString();\n      const author: string = fileLog.match(/Author: (.*)/)![1];\n      const commit: string = fileLog.match(/commit (.*)/)![1];\n\n      changes!.forEach((change) => {\n        change.author = author;\n        change.commit = commit;\n      });\n    } catch (e) {\n      /* no-op, best effort. */\n    }\n  }\n\n  private static _writePackageChanges(\n    change: IChangeInfo,\n    allChanges: IChangeRequests,\n    allPackages: Map<string, RushConfigurationProject>,\n    rushConfiguration: RushConfiguration,\n    shouldCommit: boolean,\n    prereleaseToken?: PrereleaseToken,\n    projectsToExclude?: Set<string>\n  ): IPackageJson {\n    const project: RushConfigurationProject = allPackages.get(change.packageName)!;\n    const packageJson: IPackageJson = project.packageJson;\n\n    const shouldSkipVersionBump: boolean =\n      !project.shouldPublish || (!!projectsToExclude && projectsToExclude.has(change.packageName));\n\n    const newVersion: string = shouldSkipVersionBump\n      ? packageJson.version\n      : PublishUtilities._getChangeInfoNewVersion(change, prereleaseToken);\n\n    if (!shouldSkipVersionBump) {\n      console.log(\n        `${EOL}* ${shouldCommit ? 'APPLYING' : 'DRYRUN'}: ${ChangeType[change.changeType!]} update ` +\n          `for ${change.packageName} to ${newVersion}`\n      );\n    } else {\n      console.log(\n        `${EOL}* ${shouldCommit ? 'APPLYING' : 'DRYRUN'}: update for ${change.packageName} at ${newVersion}`\n      );\n    }\n\n    const packagePath: string = path.join(project.projectFolder, FileConstants.PackageJson);\n\n    packageJson.version = newVersion;\n\n    // Update the package's dependencies.\n    PublishUtilities._updateDependencies(\n      packageJson.name,\n      packageJson.dependencies,\n      allChanges,\n      allPackages,\n      rushConfiguration,\n      prereleaseToken,\n      projectsToExclude\n    );\n    // Update the package's dev dependencies.\n    PublishUtilities._updateDependencies(\n      packageJson.name,\n      packageJson.devDependencies,\n      allChanges,\n      allPackages,\n      rushConfiguration,\n      prereleaseToken,\n      projectsToExclude\n    );\n    // Update the package's peer dependencies.\n    PublishUtilities._updateDependencies(\n      packageJson.name,\n      packageJson.peerDependencies,\n      allChanges,\n      allPackages,\n      rushConfiguration,\n      prereleaseToken,\n      projectsToExclude\n    );\n\n    change.changes!.forEach((subChange) => {\n      if (subChange.comment) {\n        console.log(` - [${ChangeType[subChange.changeType!]}] ${subChange.comment}`);\n      }\n    });\n\n    if (shouldCommit) {\n      JsonFile.save(packageJson, packagePath, { updateExistingFile: true });\n    }\n    return packageJson;\n  }\n\n  private static _isCyclicDependency(\n    allPackages: Map<string, RushConfigurationProject>,\n    packageName: string,\n    dependencyName: string\n  ): boolean {\n    const packageConfig: RushConfigurationProject | undefined = allPackages.get(packageName);\n    return !!packageConfig && packageConfig.cyclicDependencyProjects.has(dependencyName);\n  }\n\n  private static _updateDependencies(\n    packageName: string,\n    dependencies: { [key: string]: string } | undefined,\n    allChanges: IChangeRequests,\n    allPackages: Map<string, RushConfigurationProject>,\n    rushConfiguration: RushConfiguration,\n    prereleaseToken: PrereleaseToken | undefined,\n    projectsToExclude?: Set<string>\n  ): void {\n    if (dependencies) {\n      Object.keys(dependencies).forEach((depName) => {\n        if (!PublishUtilities._isCyclicDependency(allPackages, packageName, depName)) {\n          const depChange: IChangeInfo | undefined = allChanges.packageChanges.get(depName);\n          if (!depChange) {\n            return;\n          }\n          const depProject: RushConfigurationProject = allPackages.get(depName)!;\n\n          if (!depProject.shouldPublish || (projectsToExclude && projectsToExclude.has(depName))) {\n            // No version change.\n            return;\n          } else if (\n            prereleaseToken &&\n            prereleaseToken.hasValue &&\n            prereleaseToken.isPartialPrerelease &&\n            depChange.changeType! < ChangeType.hotfix\n          ) {\n            // For partial prereleases, do not version bump dependencies with the `prereleaseToken`\n            // value unless an actual change (hotfix, patch, minor, major) has occurred\n            return;\n          } else if (depChange && prereleaseToken && prereleaseToken.hasValue) {\n            // TODO: treat prerelease version the same as non-prerelease version.\n            // For prerelease, the newVersion needs to be appended with prerelease name.\n            // And dependency should specify the specific prerelease version.\n            const currentSpecifier: DependencySpecifier = new DependencySpecifier(\n              depName,\n              dependencies[depName]\n            );\n            const newVersion: string = PublishUtilities._getChangeInfoNewVersion(depChange, prereleaseToken);\n            dependencies[depName] =\n              currentSpecifier.specifierType === DependencySpecifierType.Workspace\n                ? `workspace:${newVersion}`\n                : newVersion;\n          } else if (depChange && depChange.changeType! >= ChangeType.hotfix) {\n            PublishUtilities._updateDependencyVersion(\n              packageName,\n              dependencies,\n              depName,\n              depChange,\n              allChanges,\n              allPackages,\n              rushConfiguration\n            );\n          }\n        }\n      });\n    }\n  }\n\n  /**\n   * Gets the new version from the ChangeInfo.\n   * The value of newVersion in ChangeInfo remains unchanged when the change type is dependency,\n   * However, for pre-release build, it won't pick up the updated pre-released dependencies. That is why\n   * this function should return a pre-released patch for that case. The exception to this is when we're\n   * running a partial pre-release build. In this case, only user-changed packages should update.\n   */\n  private static _getChangeInfoNewVersion(\n    change: IChangeInfo,\n    prereleaseToken: PrereleaseToken | undefined\n  ): string {\n    let newVersion: string = change.newVersion!;\n    if (prereleaseToken && prereleaseToken.hasValue) {\n      if (prereleaseToken.isPartialPrerelease && change.changeType! <= ChangeType.hotfix) {\n        return newVersion;\n      }\n      if (prereleaseToken.isPrerelease && change.changeType === ChangeType.dependency) {\n        newVersion = semver.inc(newVersion, 'patch')!;\n      }\n      return `${newVersion}-${prereleaseToken.name}`;\n    } else {\n      return newVersion;\n    }\n  }\n\n  /**\n   * Adds the given change to the packageChanges map.\n   *\n   * @returns true if the change caused the dependency change type to increase.\n   */\n  private static _addChange(\n    change: IChangeInfo,\n    allChanges: IChangeRequests,\n    allPackages: Map<string, RushConfigurationProject>,\n    rushConfiguration: RushConfiguration,\n    prereleaseToken?: PrereleaseToken,\n    projectsToExclude?: Set<string>\n  ): boolean {\n    let hasChanged: boolean = false;\n    const packageName: string = change.packageName;\n    const project: RushConfigurationProject | undefined = allPackages.get(packageName);\n\n    if (!project) {\n      console.log(\n        `The package ${packageName} was requested for publishing but does not exist. Skip this change.`\n      );\n      return false;\n    }\n\n    const packageJson: IPackageJson = project.packageJson;\n\n    // If the given change does not have a changeType, derive it from the \"type\" string.\n    if (change.changeType === undefined) {\n      change.changeType = Enum.tryGetValueByKey(ChangeType, change.type!);\n    }\n\n    let currentChange: IChangeInfo | undefined = allChanges.packageChanges.get(packageName);\n\n    if (currentChange === undefined) {\n      hasChanged = true;\n      currentChange = {\n        packageName,\n        changeType: change.changeType,\n        order: 0,\n        changes: [change]\n      };\n      allChanges.packageChanges.set(packageName, currentChange);\n    } else {\n      const oldChangeType: ChangeType = currentChange.changeType!;\n\n      if (oldChangeType === ChangeType.hotfix && change.changeType! > oldChangeType) {\n        throw new Error(\n          `Cannot apply ${this._getReleaseType(change.changeType!)} change after hotfix on same package`\n        );\n      }\n      if (change.changeType! === ChangeType.hotfix && oldChangeType > change.changeType!) {\n        throw new Error(\n          `Cannot apply hotfix alongside ${this._getReleaseType(oldChangeType!)} change on same package`\n        );\n      }\n\n      currentChange.changeType = Math.max(currentChange.changeType!, change.changeType!);\n      currentChange.changes!.push(change);\n\n      hasChanged = hasChanged || oldChangeType !== currentChange.changeType;\n      hasChanged =\n        hasChanged ||\n        (change.newVersion !== undefined &&\n          currentChange.newVersion !== undefined &&\n          semver.gt(change.newVersion, currentChange.newVersion));\n    }\n\n    const skipVersionBump: boolean = PublishUtilities._shouldSkipVersionBump(\n      project,\n      prereleaseToken,\n      projectsToExclude\n    );\n\n    if (skipVersionBump) {\n      currentChange.newVersion = change.newVersion ?? packageJson.version;\n      hasChanged = false;\n      currentChange.changeType = ChangeType.none;\n    } else {\n      if (change.changeType === ChangeType.hotfix) {\n        const prereleaseComponents: ReadonlyArray<string | number> | null = semver.prerelease(\n          packageJson.version\n        );\n        if (!rushConfiguration.hotfixChangeEnabled) {\n          throw new Error(`Cannot add hotfix change; hotfixChangeEnabled is false in configuration.`);\n        }\n\n        currentChange.newVersion = change.newVersion ?? (packageJson.version as string);\n        if (!prereleaseComponents) {\n          currentChange.newVersion += '-hotfix';\n        }\n        currentChange.newVersion = semver.inc(currentChange.newVersion, 'prerelease')!;\n      } else {\n        // When there are multiple changes of this package, the final value of new version\n        // should not depend on the order of the changes.\n        let packageVersion: string = change.newVersion ?? packageJson.version;\n        if (currentChange.newVersion && semver.gt(currentChange.newVersion, packageVersion)) {\n          packageVersion = currentChange.newVersion;\n        }\n\n        const shouldBump: boolean =\n          change.newVersion === undefined && change.changeType! >= ChangeType.hotfix;\n\n        currentChange.newVersion = shouldBump\n          ? semver.inc(packageVersion, PublishUtilities._getReleaseType(currentChange.changeType!))!\n          : packageVersion;\n\n        // set versionpolicy version to the current version\n        if (\n          hasChanged &&\n          project.versionPolicyName !== undefined &&\n          project.versionPolicy !== undefined &&\n          project.versionPolicy.isLockstepped\n        ) {\n          const projectVersionPolicy: LockStepVersionPolicy = project.versionPolicy as LockStepVersionPolicy;\n          const currentVersionPolicyChange: IVersionPolicyChangeInfo | undefined =\n            allChanges.versionPolicyChanges.get(project.versionPolicyName);\n          if (\n            projectVersionPolicy.nextBump === undefined &&\n            (currentVersionPolicyChange === undefined ||\n              semver.gt(currentChange.newVersion, currentVersionPolicyChange.newVersion))\n          ) {\n            allChanges.versionPolicyChanges.set(project.versionPolicyName, {\n              versionPolicyName: project.versionPolicyName,\n              changeType: currentChange.changeType!,\n              newVersion: currentChange.newVersion\n            });\n          }\n        }\n      }\n\n      // If hotfix change, force new range dependency to be the exact new version\n      currentChange.newRangeDependency =\n        change.changeType === ChangeType.hotfix\n          ? currentChange.newVersion\n          : PublishUtilities._getNewRangeDependency(currentChange.newVersion!);\n    }\n    return hasChanged;\n  }\n\n  private static _updateDownstreamDependencies(\n    change: IChangeInfo,\n    allChanges: IChangeRequests,\n    allPackages: Map<string, RushConfigurationProject>,\n    rushConfiguration: RushConfiguration,\n    prereleaseToken: PrereleaseToken | undefined,\n    projectsToExclude?: Set<string>\n  ): boolean {\n    let hasChanges: boolean = false;\n    const packageName: string = change.packageName;\n    const downstream: ReadonlySet<RushConfigurationProject> = allPackages.get(packageName)!.consumingProjects;\n\n    // Iterate through all downstream dependencies for the package.\n    if (downstream) {\n      if (change.changeType! >= ChangeType.hotfix || (prereleaseToken && prereleaseToken.hasValue)) {\n        for (const dependency of downstream) {\n          const packageJson: IPackageJson = dependency.packageJson;\n\n          hasChanges =\n            PublishUtilities._updateDownstreamDependency(\n              packageJson.name,\n              packageJson.dependencies,\n              change,\n              allChanges,\n              allPackages,\n              rushConfiguration,\n              prereleaseToken,\n              projectsToExclude\n            ) || hasChanges;\n\n          hasChanges =\n            PublishUtilities._updateDownstreamDependency(\n              packageJson.name,\n              packageJson.devDependencies,\n              change,\n              allChanges,\n              allPackages,\n              rushConfiguration,\n              prereleaseToken,\n              projectsToExclude\n            ) || hasChanges;\n        }\n      }\n    }\n\n    return hasChanges;\n  }\n\n  private static _updateDownstreamDependency(\n    parentPackageName: string,\n    dependencies: { [packageName: string]: string } | undefined,\n    change: IChangeInfo,\n    allChanges: IChangeRequests,\n    allPackages: Map<string, RushConfigurationProject>,\n    rushConfiguration: RushConfiguration,\n    prereleaseToken: PrereleaseToken | undefined,\n    projectsToExclude?: Set<string>\n  ): boolean {\n    let hasChanges: boolean = false;\n    if (\n      dependencies &&\n      dependencies[change.packageName] &&\n      !PublishUtilities._isCyclicDependency(allPackages, parentPackageName, change.packageName)\n    ) {\n      const requiredVersion: DependencySpecifier = new DependencySpecifier(\n        change.packageName,\n        dependencies[change.packageName]\n      );\n      const isWorkspaceWildcardVersion: boolean =\n        requiredVersion.specifierType === DependencySpecifierType.Workspace &&\n        requiredVersion.versionSpecifier === '*';\n      const alwaysUpdate: boolean =\n        (!!prereleaseToken &&\n          prereleaseToken.hasValue &&\n          !allChanges.packageChanges.has(parentPackageName)) ||\n        isWorkspaceWildcardVersion;\n\n      // If the version range exists and has not yet been updated to this version, update it.\n      if (requiredVersion.versionSpecifier !== change.newRangeDependency || alwaysUpdate) {\n        let changeType: ChangeType | undefined;\n        if (changeType === undefined) {\n          // Propagate hotfix changes to dependencies\n          if (change.changeType === ChangeType.hotfix) {\n            changeType = ChangeType.hotfix;\n          } else {\n            // Either it already satisfies the new version, or doesn't.\n            // If not, the downstream dep needs to be republished.\n            // The downstream dep will also need to be republished if using `workspace:*` as this will publish\n            // as the exact version.\n            changeType =\n              semver.satisfies(change.newVersion!, requiredVersion.versionSpecifier) &&\n              !isWorkspaceWildcardVersion\n                ? ChangeType.dependency\n                : ChangeType.patch;\n          }\n        }\n\n        hasChanges = PublishUtilities._addChange(\n          {\n            packageName: parentPackageName,\n            changeType\n          },\n          allChanges,\n          allPackages,\n          rushConfiguration,\n          prereleaseToken,\n          projectsToExclude\n        );\n\n        if (hasChanges || alwaysUpdate) {\n          // Only re-evaluate downstream dependencies if updating the parent package's dependency\n          // caused a version bump.\n          hasChanges =\n            PublishUtilities._updateDownstreamDependencies(\n              allChanges.packageChanges.get(parentPackageName)!,\n              allChanges,\n              allPackages,\n              rushConfiguration,\n              prereleaseToken,\n              projectsToExclude\n            ) || hasChanges;\n        }\n      }\n    }\n\n    return hasChanges;\n  }\n\n  private static _updateDependencyVersion(\n    packageName: string,\n    dependencies: { [key: string]: string },\n    dependencyName: string,\n    dependencyChange: IChangeInfo,\n    allChanges: IChangeRequests,\n    allPackages: Map<string, RushConfigurationProject>,\n    rushConfiguration: RushConfiguration\n  ): void {\n    let currentDependencyVersion: string | undefined = dependencies[dependencyName];\n    let newDependencyVersion: string = PublishUtilities.getNewDependencyVersion(\n      dependencies,\n      dependencyName,\n      dependencyChange.newVersion!\n    );\n    dependencies[dependencyName] = newDependencyVersion;\n\n    // \"*\" is a special case for workspace ranges, since it will publish using the exact\n    // version of the local dependency, so we need to modify what we write for our change\n    // comment\n    const currentDependencySpecifier: DependencySpecifier = new DependencySpecifier(\n      dependencyName,\n      currentDependencyVersion\n    );\n    currentDependencyVersion =\n      currentDependencySpecifier.specifierType === DependencySpecifierType.Workspace &&\n      currentDependencySpecifier.versionSpecifier === '*'\n        ? undefined\n        : currentDependencySpecifier.versionSpecifier;\n\n    const newDependencySpecifier: DependencySpecifier = new DependencySpecifier(\n      dependencyName,\n      newDependencyVersion\n    );\n    newDependencyVersion =\n      newDependencySpecifier.specifierType === DependencySpecifierType.Workspace &&\n      newDependencySpecifier.versionSpecifier === '*'\n        ? dependencyChange.newVersion!\n        : newDependencySpecifier.versionSpecifier;\n\n    // Add dependency version update comment.\n    PublishUtilities._addChange(\n      {\n        packageName: packageName,\n        changeType: ChangeType.dependency,\n        comment:\n          `Updating dependency \"${dependencyName}\" ` +\n          (currentDependencyVersion ? `from \\`${currentDependencyVersion}\\` ` : '') +\n          `to \\`${newDependencyVersion}\\``\n      },\n      allChanges,\n      allPackages,\n      rushConfiguration\n    );\n  }\n}\n"]}