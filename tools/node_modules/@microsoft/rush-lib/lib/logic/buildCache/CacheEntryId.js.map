{"version":3,"file":"CacheEntryId.js","sourceRoot":"","sources":["../../../src/logic/buildCache/CacheEntryId.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,MAAM,qBAAqB,GAAW,SAAS,CAAC;AA2BhD,MAAM,eAAe,GAAW,MAAM,CAAC;AACvC,MAAM,uBAAuB,GAAW,aAAa,CAAC;AACtD,MAAM,qBAAqB,GAAW,WAAW,CAAC;AAElD,uDAAuD;AACvD,MAAM,WAAW,GAAW,aAAa,CAAC;AAE1C,MAAa,YAAY;IACvB,gBAAuB,CAAC;IAEjB,MAAM,CAAC,YAAY,CAAC,OAAgB;QACzC,IAAI,CAAC,OAAO,EAAE;YACZ,OAAO,CAAC,EAAE,gBAAgB,EAAE,EAAE,EAAE,CAAC,gBAAgB,CAAC;SACnD;aAAM;YACL,OAAO,GAAG,OAAO,CAAC,IAAI,EAAE,CAAC;YAEzB,IAAI,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;gBAC3B,MAAM,IAAI,KAAK,CAAC,uDAAuD,CAAC,CAAC;aAC1E;YAED,MAAM,oBAAoB,GAAW,OAAO,CAAC,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;YACtE,IAAI,oBAAoB,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;gBACpC,MAAM,IAAI,KAAK,CAAC,uDAAuD,CAAC,CAAC;aAC1E;YAED,IAAI,oBAAoB,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;gBACpC,MAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAC;aAChE;YAED,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,iBAAiB,CAAC,EAAE;gBAClD,MAAM,IAAI,KAAK,CACb,0DAA0D;oBACxD,8EAA8E,CACjF,CAAC;aACH;YAED,IAAI,cAAc,GAAY,KAAK,CAAC;YACpC,MAAM,cAAc,GAAW,OAAO,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,KAAa,EAAE,EAAE;gBACnF,KAAK,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;gBAC7C,IAAI,SAAiB,CAAC;gBACtB,IAAI,cAAkC,CAAC;gBACvC,MAAM,eAAe,GAAW,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;gBACnD,IAAI,eAAe,KAAK,CAAC,CAAC,EAAE;oBAC1B,SAAS,GAAG,KAAK,CAAC;iBACnB;qBAAM;oBACL,SAAS,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,eAAe,CAAC,CAAC;oBAC7C,cAAc,GAAG,KAAK,CAAC,MAAM,CAAC,eAAe,GAAG,CAAC,CAAC,CAAC;iBACpD;gBAED,QAAQ,SAAS,EAAE;oBACjB,KAAK,eAAe,CAAC,CAAC;wBACpB,IAAI,cAAc,KAAK,SAAS,EAAE;4BAChC,MAAM,IAAI,KAAK,CAAC,0CAA0C,SAAS,UAAU,CAAC,CAAC;yBAChF;wBAED,cAAc,GAAG,IAAI,CAAC;wBACtB,OAAO,MAAM,qBAAqB,oBAAoB,CAAC;qBACxD;oBAED,KAAK,uBAAuB,CAAC,CAAC;wBAC5B,QAAQ,cAAc,EAAE;4BACtB,KAAK,SAAS,CAAC,CAAC;gCACd,OAAO,MAAM,qBAAqB,eAAe,CAAC;6BACnD;4BAED,KAAK,WAAW,CAAC,CAAC;gCAChB,OAAO,MAAM,qBAAqB,2EAA2E,CAAC;6BAC/G;4BAED,OAAO,CAAC,CAAC;gCACP,MAAM,IAAI,KAAK,CAAC,yBAAyB,cAAc,cAAc,SAAS,UAAU,CAAC,CAAC;6BAC3F;yBACF;qBACF;oBAED,KAAK,qBAAqB,CAAC,CAAC;wBAC1B,QAAQ,cAAc,EAAE;4BACtB,KAAK,SAAS,CAAC,CAAC;gCACd,MAAM,IAAI,KAAK,CACb,mEAAmE;oCACjE,YAAY,SAAS,UAAU,CAClC,CAAC;6BACH;4BAED,KAAK,WAAW,CAAC,CAAC;gCAChB,mCAAmC;gCACnC,OAAO,MAAM,qBAAqB,gCAAgC,CAAC;6BACpE;4BAED,KAAK,YAAY,CAAC,CAAC;gCACjB,iDAAiD;gCACjD,OAAO,MAAM,qBAAqB,qCAAqC,CAAC;6BACzE;4BAED,OAAO,CAAC,CAAC;gCACP,MAAM,IAAI,KAAK,CAAC,yBAAyB,cAAc,cAAc,SAAS,UAAU,CAAC,CAAC;6BAC3F;yBACF;qBACF;oBAED,OAAO,CAAC,CAAC;wBACP,MAAM,IAAI,KAAK,CAAC,0BAA0B,SAAS,IAAI,CAAC,CAAC;qBAC1D;iBACF;YACH,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,cAAc,EAAE;gBACnB,MAAM,IAAI,KAAK,CAAC,0CAA0C,eAAe,UAAU,CAAC,CAAC;aACtF;YAED,uCAAuC;YACvC,OAAO,IAAI,QAAQ,CACjB,qBAAqB,EACrB,0BAA0B,cAAc,KAAK,CACnB,CAAC;SAC9B;IACH,CAAC;CACF;AA9GD,oCA8GC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nconst OPTIONS_ARGUMENT_NAME: string = 'options';\n\n/**\n * Options for generating the cache id for an operation.\n * @beta\n */\nexport interface IGenerateCacheEntryIdOptions {\n  /**\n   * The name of the project\n   */\n  projectName: string;\n  /**\n   * The name of the phase\n   */\n  phaseName: string;\n  /**\n   * A hash of the input files\n   */\n  projectStateHash: string;\n}\n\n/**\n * Calculates the cache entry id string for an operation.\n * @beta\n */\nexport type GetCacheEntryIdFunction = (options: IGenerateCacheEntryIdOptions) => string;\n\nconst HASH_TOKEN_NAME: string = 'hash';\nconst PROJECT_NAME_TOKEN_NAME: string = 'projectName';\nconst PHASE_NAME_TOKEN_NAME: string = 'phaseName';\n\n// This regex matches substrings that look like [token]\nconst TOKEN_REGEX: RegExp = /\\[[^\\]]*\\]/g;\n\nexport class CacheEntryId {\n  private constructor() {}\n\n  public static parsePattern(pattern?: string): GetCacheEntryIdFunction {\n    if (!pattern) {\n      return ({ projectStateHash }) => projectStateHash;\n    } else {\n      pattern = pattern.trim();\n\n      if (pattern.startsWith('/')) {\n        throw new Error('Cache entry name patterns may not start with a slash.');\n      }\n\n      const patternWithoutTokens: string = pattern.replace(TOKEN_REGEX, '');\n      if (patternWithoutTokens.match(/\\]/)) {\n        throw new Error(`Unexpected \"]\" character in cache entry name pattern.`);\n      }\n\n      if (patternWithoutTokens.match(/\\[/)) {\n        throw new Error('Unclosed token in cache entry name pattern.');\n      }\n\n      if (!patternWithoutTokens.match(/^[A-z0-9-_\\/]*$/)) {\n        throw new Error(\n          'Cache entry name pattern contains an invalid character. ' +\n            'Only alphanumeric characters, slashes, underscores, and hyphens are allowed.'\n        );\n      }\n\n      let foundHashToken: boolean = false;\n      const templateString: string = pattern.trim().replace(TOKEN_REGEX, (token: string) => {\n        token = token.substring(1, token.length - 1);\n        let tokenName: string;\n        let tokenAttribute: string | undefined;\n        const tokenSplitIndex: number = token.indexOf(':');\n        if (tokenSplitIndex === -1) {\n          tokenName = token;\n        } else {\n          tokenName = token.substr(0, tokenSplitIndex);\n          tokenAttribute = token.substr(tokenSplitIndex + 1);\n        }\n\n        switch (tokenName) {\n          case HASH_TOKEN_NAME: {\n            if (tokenAttribute !== undefined) {\n              throw new Error(`An attribute isn\\'t supported for the \"${tokenName}\" token.`);\n            }\n\n            foundHashToken = true;\n            return `\\${${OPTIONS_ARGUMENT_NAME}.projectStateHash}`;\n          }\n\n          case PROJECT_NAME_TOKEN_NAME: {\n            switch (tokenAttribute) {\n              case undefined: {\n                return `\\${${OPTIONS_ARGUMENT_NAME}.projectName}`;\n              }\n\n              case 'normalize': {\n                return `\\${${OPTIONS_ARGUMENT_NAME}.projectName.replace('@','').replace(/\\\\+/g, '++').replace(/\\\\/\\/g, '+')}`;\n              }\n\n              default: {\n                throw new Error(`Unexpected attribute \"${tokenAttribute}\" for the \"${tokenName}\" token.`);\n              }\n            }\n          }\n\n          case PHASE_NAME_TOKEN_NAME: {\n            switch (tokenAttribute) {\n              case undefined: {\n                throw new Error(\n                  'Either the \"normalize\" or the \"trimPrefix\" attribute is required ' +\n                    `for the \"${tokenName}\" token.`\n                );\n              }\n\n              case 'normalize': {\n                // Replace colons with underscores.\n                return `\\${${OPTIONS_ARGUMENT_NAME}.phaseName.replace(/:/g, '_')}`;\n              }\n\n              case 'trimPrefix': {\n                // Trim the \"_phase:\" prefix from the phase name.\n                return `\\${${OPTIONS_ARGUMENT_NAME}.phaseName.replace(/^_phase:/, '')}`;\n              }\n\n              default: {\n                throw new Error(`Unexpected attribute \"${tokenAttribute}\" for the \"${tokenName}\" token.`);\n              }\n            }\n          }\n\n          default: {\n            throw new Error(`Unexpected token name \"${tokenName}\".`);\n          }\n        }\n      });\n\n      if (!foundHashToken) {\n        throw new Error(`Cache entry name pattern is missing a [${HASH_TOKEN_NAME}] token.`);\n      }\n\n      // eslint-disable-next-line no-new-func\n      return new Function(\n        OPTIONS_ARGUMENT_NAME,\n        `\"use strict\"\\nreturn \\`${templateString}\\`;`\n      ) as GetCacheEntryIdFunction;\n    }\n  }\n}\n"]}