{"version":3,"file":"Operation.js","sourceRoot":"","sources":["../../../src/logic/operations/Operation.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AA0B3D;;;;;;;;GAQG;AACH,MAAa,SAAS;IAwCpB,YAAmB,OAA2B;QA7B9C;;WAEG;QACa,cAAS,GAA2B,IAAI,GAAG,EAAa,CAAC;QAEzE;;WAEG;QACa,iBAAY,GAA2B,IAAI,GAAG,EAAa,CAAC;QAE5E;;;WAGG;QACI,WAAM,GAAiC,SAAS,CAAC;QAExD;;;;;;;;;;WAUG;QACI,WAAM,GAAW,CAAC,CAAC;QAGxB,IAAI,CAAC,eAAe,GAAG,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,KAAK,CAAC;QACtC,IAAI,CAAC,iBAAiB,GAAG,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,OAAO,CAAC;QAC1C,IAAI,CAAC,MAAM,GAAG,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,MAAM,CAAC;IAChC,CAAC;IAED;;OAEG;IACH,IAAW,IAAI;;QACb,OAAO,MAAA,IAAI,CAAC,MAAM,0CAAE,IAAI,CAAC;IAC3B,CAAC;IAED;;OAEG;IACI,aAAa,CAAC,UAAqB;QACxC,0DAA0D;QACzD,IAAI,CAAC,YAA+B,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QACrD,UAAU,CAAC,SAA4B,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IACrD,CAAC;IAED;;OAEG;IACI,gBAAgB,CAAC,UAAqB;QAC3C,0DAA0D;QACzD,IAAI,CAAC,YAA+B,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;QACxD,UAAU,CAAC,SAA4B,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACxD,CAAC;CACF;AAtED,8BAsEC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { RushConfigurationProject } from '../../api/RushConfigurationProject';\nimport { IPhase } from '../../api/CommandLineConfiguration';\nimport { IOperationRunner } from './IOperationRunner';\n\n/**\n * Options for constructing a new Operation.\n * @alpha\n */\nexport interface IOperationOptions {\n  /**\n   * The Rush phase associated with this Operation, if any\n   */\n  phase?: IPhase | undefined;\n  /**\n   * The Rush project associated with this Operation, if any\n   */\n  project?: RushConfigurationProject | undefined;\n  /**\n   * When the scheduler is ready to process this `Operation`, the `runner` implements the actual work of\n   * running the operation.\n   */\n  runner?: IOperationRunner | undefined;\n}\n\n/**\n * The `Operation` class is a node in the dependency graph of work that needs to be scheduled by the\n * `OperationExecutionManager`. Each `Operation` has a `runner` member of type `IOperationRunner`, whose\n * implementation manages the actual process of running a single operation.\n *\n * The graph of `Operation` instances will be cloned into a separate execution graph after processing.\n *\n * @alpha\n */\nexport class Operation {\n  /**\n   * The Rush phase associated with this Operation, if any\n   */\n  public readonly associatedPhase: IPhase | undefined;\n\n  /**\n   * The Rush project associated with this Operation, if any\n   */\n  public readonly associatedProject: RushConfigurationProject | undefined;\n\n  /**\n   * A set of all operations which depend on this operation.\n   */\n  public readonly consumers: ReadonlySet<Operation> = new Set<Operation>();\n\n  /**\n   * A set of all dependencies which must be executed before this operation is complete.\n   */\n  public readonly dependencies: ReadonlySet<Operation> = new Set<Operation>();\n\n  /**\n   * When the scheduler is ready to process this `Operation`, the `runner` implements the actual work of\n   * running the operation.\n   */\n  public runner: IOperationRunner | undefined = undefined;\n\n  /**\n   * The weight for this operation. This scalar is the contribution of this operation to the\n   * `criticalPathLength` calculation above. Modify to indicate the following:\n   * - `weight` === 1: indicates that this operation has an average duration\n   * - `weight` &gt; 1: indicates that this operation takes longer than average and so the scheduler\n   *     should try to favor starting it over other, shorter operations. An example might be an operation that\n   *     bundles an entire application and runs whole-program optimization.\n   * - `weight` &lt; 1: indicates that this operation takes less time than average and so the scheduler\n   *     should favor other, longer operations over it. An example might be an operation to unpack a cached\n   *     output, or an operation using NullOperationRunner, which might use a value of 0.\n   */\n  public weight: number = 1;\n\n  public constructor(options?: IOperationOptions) {\n    this.associatedPhase = options?.phase;\n    this.associatedProject = options?.project;\n    this.runner = options?.runner;\n  }\n\n  /**\n   * The name of this operation, for logging.\n   */\n  public get name(): string | undefined {\n    return this.runner?.name;\n  }\n\n  /**\n   * Adds the specified operation as a dependency and updates the consumer list.\n   */\n  public addDependency(dependency: Operation): void {\n    // Cast internally to avoid adding the overhead of getters\n    (this.dependencies as Set<Operation>).add(dependency);\n    (dependency.consumers as Set<Operation>).add(this);\n  }\n\n  /**\n   * Deletes the specified operation as a dependency and updates the consumer list.\n   */\n  public deleteDependency(dependency: Operation): void {\n    // Cast internally to avoid adding the overhead of getters\n    (this.dependencies as Set<Operation>).delete(dependency);\n    (dependency.consumers as Set<Operation>).delete(this);\n  }\n}\n"]}