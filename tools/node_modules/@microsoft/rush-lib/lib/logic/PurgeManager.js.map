{"version":3,"file":"PurgeManager.js","sourceRoot":"","sources":["../../src/logic/PurgeManager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport colors from 'colors/safe';\nimport * as path from 'path';\n\nimport { AsyncRecycler } from '../utilities/AsyncRecycler';\nimport { RushConfiguration } from '../api/RushConfiguration';\nimport { RushConstants } from '../logic/RushConstants';\nimport { RushGlobalFolder } from '../api/RushGlobalFolder';\n\n/**\n * This class implements the logic for \"rush purge\"\n */\nexport class PurgeManager {\n  private _rushConfiguration: RushConfiguration;\n  private _rushGlobalFolder: RushGlobalFolder;\n  private _commonTempFolderRecycler: AsyncRecycler;\n  private _rushUserFolderRecycler: AsyncRecycler;\n\n  public constructor(rushConfiguration: RushConfiguration, rushGlobalFolder: RushGlobalFolder) {\n    this._rushConfiguration = rushConfiguration;\n    this._rushGlobalFolder = rushGlobalFolder;\n\n    const commonAsyncRecyclerPath: string = path.join(\n      this._rushConfiguration.commonTempFolder,\n      RushConstants.rushRecyclerFolderName\n    );\n    this._commonTempFolderRecycler = new AsyncRecycler(commonAsyncRecyclerPath);\n\n    const rushUserAsyncRecyclerPath: string = path.join(\n      this._rushGlobalFolder.path,\n      RushConstants.rushRecyclerFolderName\n    );\n    this._rushUserFolderRecycler = new AsyncRecycler(rushUserAsyncRecyclerPath);\n  }\n\n  /**\n   * Performs the AsyncRecycler.deleteAll() operation.  This should be called before\n   * the PurgeManager instance is disposed.\n   */\n  public deleteAll(): void {\n    this._commonTempFolderRecycler.deleteAll();\n    this._rushUserFolderRecycler.deleteAll();\n  }\n\n  public get commonTempFolderRecycler(): AsyncRecycler {\n    return this._commonTempFolderRecycler;\n  }\n\n  /**\n   * Delete everything from the common/temp folder\n   */\n  public purgeNormal(): void {\n    // Delete everything under common\\temp except for the recycler folder itself\n    console.log('Purging ' + this._rushConfiguration.commonTempFolder);\n\n    this._commonTempFolderRecycler.moveAllItemsInFolder(\n      this._rushConfiguration.commonTempFolder,\n      this._getMembersToExclude(this._rushConfiguration.commonTempFolder, true)\n    );\n  }\n\n  /**\n   * In addition to performing the purgeNormal() operation, this method also cleans the\n   * .rush folder in the user's home directory.\n   */\n  public purgeUnsafe(): void {\n    this.purgeNormal();\n\n    // We will delete everything under ~/.rush/ except for the recycler folder itself\n    console.log('Purging ' + this._rushGlobalFolder.path);\n\n    // If Rush itself is running under a folder such as  ~/.rush/node-v4.5.6/rush-1.2.3,\n    // we cannot delete that folder.\n\n    // First purge the node-specific folder, e.g. ~/.rush/node-v4.5.6/* except for rush-1.2.3:\n    this._rushUserFolderRecycler.moveAllItemsInFolder(\n      this._rushGlobalFolder.nodeSpecificPath,\n      this._getMembersToExclude(this._rushGlobalFolder.nodeSpecificPath, true)\n    );\n\n    // Then purge the the global folder, e.g. ~/.rush/* except for node-v4.5.6\n    this._rushUserFolderRecycler.moveAllItemsInFolder(\n      this._rushGlobalFolder.path,\n      this._getMembersToExclude(this._rushGlobalFolder.path, false)\n    );\n\n    if (\n      this._rushConfiguration.packageManager === 'pnpm' &&\n      this._rushConfiguration.pnpmOptions.pnpmStore === 'global' &&\n      this._rushConfiguration.pnpmOptions.pnpmStorePath\n    ) {\n      console.warn(colors.yellow(`Purging the global pnpm-store`));\n      this._rushUserFolderRecycler.moveAllItemsInFolder(this._rushConfiguration.pnpmOptions.pnpmStorePath);\n    }\n  }\n\n  private _getMembersToExclude(folderToRecycle: string, showWarning: boolean): string[] {\n    // Don't recycle the recycler\n    const membersToExclude: string[] = [RushConstants.rushRecyclerFolderName];\n\n    // If the current process is running inside one of the folders, don't recycle that either\n    // Example: \"/home/user/.rush/rush-1.2.3/lib/example.js\"\n    const currentFolderPath: string = path.resolve(__dirname);\n\n    // Example:\n    // folderToRecycle = \"/home/user/.rush/node-v4.5.6\"\n    // relative =  \"rush-1.2.3/lib/example.js\"\n    const relative: string = path.relative(folderToRecycle, currentFolderPath);\n\n    // (The result can be an absolute path if the two folders are on different drive letters)\n    if (!path.isAbsolute(relative)) {\n      // Get the first path segment:\n      const firstPart: string = relative.split(/[\\\\\\/]/)[0];\n      if (firstPart.length > 0 && firstPart !== '..') {\n        membersToExclude.push(firstPart);\n\n        if (showWarning) {\n          // Warn that we won't dispose this folder\n          console.log(\n            colors.yellow(\n              \"The active process's folder will not be deleted: \" + path.join(folderToRecycle, firstPart)\n            )\n          );\n        }\n      }\n    }\n\n    return membersToExclude;\n  }\n}\n"]}