{"version":3,"file":"UpdateAction.js","sourceRoot":"","sources":["../../../src/cli/actions/UpdateAction.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAI3D,2DAAwD;AAIxD,MAAa,YAAa,SAAQ,qCAAiB;IAIjD,YAAmB,MAA6B;QAC9C,KAAK,CAAC;YACJ,UAAU,EAAE,QAAQ;YACpB,OAAO,EACL,4DAA4D;gBAC5D,qDAAqD;YACvD,aAAa,EACX,uEAAuE;gBACvE,iEAAiE;gBACjE,sFAAsF;gBACtF,8EAA8E;gBAC9E,iFAAiF;gBACjF,0EAA0E;gBAC1E,qEAAqE;gBACrE,6DAA6D;gBAC7D,gFAAgF;gBAChF,2DAA2D;YAC7D,MAAM;SACP,CAAC,CAAC;IACL,CAAC;IAES,kBAAkB;QAC1B,KAAK,CAAC,kBAAkB,EAAE,CAAC;QAE3B,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,mBAAmB,CAAC;YAC7C,iBAAiB,EAAE,QAAQ;YAC3B,WAAW,EACT,2EAA2E;gBAC3E,+EAA+E;gBAC/E,8FAA8F;gBAC9F,2FAA2F;gBAC3F,yFAAyF;gBACzF,qEAAqE;SACxE,CAAC,CAAC;QACH,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,mBAAmB,CAAC;YAChD,iBAAiB,EAAE,WAAW;YAC9B,WAAW,EACT,2EAA2E;gBAC3E,2FAA2F;gBAC3F,2FAA2F;gBAC3F,kGAAkG;gBAClG,oGAAoG;SACvG,CAAC,CAAC;IACL,CAAC;IAES,KAAK,CAAC,QAAQ;QACtB,MAAM,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,WAAW,EAAE,CAAC;QAE9C,IAAI,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,KAAK,EAAE;YACnC,MAAM,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,qCAAqC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;SACxF;QAED,OAAO,KAAK,CAAC,QAAQ,EAAE,CAAC;IAC1B,CAAC;IAES,KAAK,CAAC,wBAAwB;QACtC,OAAO;YACL,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,OAAO;YAC1B,sBAAsB,EAAE,IAAI;YAC5B,YAAY,EAAE,IAAI,CAAC,sBAAsB,CAAC,KAAM;YAChD,MAAM,EAAE,IAAI,CAAC,gBAAgB,CAAC,KAAM;YACpC,WAAW,EAAE,IAAI,CAAC,cAAc,CAAC,KAAM;YACvC,iBAAiB,EAAE,IAAI,CAAC,iBAAiB,CAAC,KAAM;YAChD,kBAAkB,EAAE,IAAI,CAAC,4BAA4B,CAAC,KAAK;YAC3D,cAAc,EAAE,IAAI,CAAC,6BAA6B,CAAC,KAAM;YACzD,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,KAAK;YAC5B,iFAAiF;YACjF,kDAAkD;YAClD,kBAAkB,EAAE,IAAI,CAAC,mBAAmB,CAAC,KAAM;YACnD,mBAAmB,EAAE,EAAE;YACvB,SAAS,EAAE,KAAK;SACjB,CAAC;IACJ,CAAC;CACF;AA7ED,oCA6EC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { CommandLineFlagParameter } from '@rushstack/ts-command-line';\n\nimport { BaseInstallAction } from './BaseInstallAction';\nimport { IInstallManagerOptions } from '../../logic/base/BaseInstallManager';\nimport { RushCommandLineParser } from '../RushCommandLineParser';\n\nexport class UpdateAction extends BaseInstallAction {\n  private _fullParameter!: CommandLineFlagParameter;\n  private _recheckParameter!: CommandLineFlagParameter;\n\n  public constructor(parser: RushCommandLineParser) {\n    super({\n      actionName: 'update',\n      summary:\n        'Install package dependencies for all projects in the repo,' +\n        ' and create or update the shrinkwrap file as needed',\n      documentation:\n        'The \"rush update\" command installs the dependencies described in your' +\n        ' package.json files, and updates the shrinkwrap file as needed.' +\n        ' (This \"shrinkwrap\" file stores a central inventory of all dependencies and versions' +\n        ' for projects in your repo. It is found in the \"common/config/rush\" folder.)' +\n        ' Note that Rush always performs a single install for all projects in your repo.' +\n        ' You should run \"rush update\" whenever you start working in a Rush repo,' +\n        ' after you pull from Git, and after you modify a package.json file.' +\n        ' If there is nothing to do, \"rush update\" is instantaneous.' +\n        ' NOTE: In certain cases \"rush install\" should be used instead of \"rush update\"' +\n        ' -- for details, see the command help for \"rush install\".',\n      parser\n    });\n  }\n\n  protected onDefineParameters(): void {\n    super.onDefineParameters();\n\n    this._fullParameter = this.defineFlagParameter({\n      parameterLongName: '--full',\n      description:\n        'Normally \"rush update\" tries to preserve your existing installed versions' +\n        ' and only makes the minimum updates needed to satisfy the package.json files.' +\n        ' This conservative approach prevents your PR from getting involved with package updates that' +\n        ' are unrelated to your work. Use \"--full\" when you really want to update all dependencies' +\n        ' to the latest SemVer-compatible version.  This should be done periodically by a person' +\n        ' or robot whose role is to deal with potential upgrade regressions.'\n    });\n    this._recheckParameter = this.defineFlagParameter({\n      parameterLongName: '--recheck',\n      description:\n        'If the shrinkwrap file appears to already satisfy the package.json files,' +\n        ' then \"rush update\" will skip invoking the package manager at all.  In certain situations' +\n        ' this heuristic may be inaccurate.  Use the \"--recheck\" flag to force the package manager' +\n        \" to process the shrinkwrap file.  This will also update your shrinkwrap file with Rush's fixups.\" +\n        ' (To minimize shrinkwrap churn, these fixups are normally performed only in the temporary folder.)'\n    });\n  }\n\n  protected async runAsync(): Promise<void> {\n    await this.parser.pluginManager.updateAsync();\n\n    if (this.parser.pluginManager.error) {\n      await this.parser.pluginManager.reinitializeAllPluginsForCommandAsync(this.actionName);\n    }\n\n    return super.runAsync();\n  }\n\n  protected async buildInstallOptionsAsync(): Promise<IInstallManagerOptions> {\n    return {\n      debug: this.parser.isDebug,\n      allowShrinkwrapUpdates: true,\n      bypassPolicy: this._bypassPolicyParameter.value!,\n      noLink: this._noLinkParameter.value!,\n      fullUpgrade: this._fullParameter.value!,\n      recheckShrinkwrap: this._recheckParameter.value!,\n      networkConcurrency: this._networkConcurrencyParameter.value,\n      collectLogFile: this._debugPackageManagerParameter.value!,\n      variant: this._variant.value,\n      // Because the 'defaultValue' option on the _maxInstallAttempts parameter is set,\n      // it is safe to assume that the value is not null\n      maxInstallAttempts: this._maxInstallAttempts.value!,\n      pnpmFilterArguments: [],\n      checkOnly: false\n    };\n  }\n}\n"]}