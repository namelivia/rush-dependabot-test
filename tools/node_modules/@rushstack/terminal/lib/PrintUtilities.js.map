{"version":3,"file":"PrintUtilities.js","sourceRoot":"","sources":["../src/PrintUtilities.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;AAG3D,wDAAgC;AAGhC;;;;GAIG;AACU,QAAA,qBAAqB,GAAW,EAAE,CAAC;AAEhD;;;;GAIG;AACH,MAAa,cAAc;IACzB;;OAEG;IACI,MAAM,CAAC,eAAe;QAC3B,MAAM,MAAM,GAAoB,OAAO,CAAC,MAAyB,CAAC;QAClE,IAAI,MAAM,IAAI,MAAM,CAAC,OAAO,EAAE;YAC5B,OAAO,MAAM,CAAC,OAAO,CAAC;SACvB;IACH,CAAC;IAED;;;OAGG;IACI,MAAM,CAAC,SAAS,CAAC,IAAY,EAAE,aAAsB,EAAE,MAAe;QAC3E,IAAI,CAAC,MAAM,EAAE;YACX,MAAM,GAAG,CAAC,CAAC;SACZ;QAED,IAAI,CAAC,aAAa,EAAE;YAClB,aAAa,GAAG,cAAc,CAAC,eAAe,EAAE,IAAI,6BAAqB,CAAC;SAC3E;QAED,MAAM,IAAI,GAAmC,IAAA,kBAAQ,EAAC,MAAM,EAAE,aAAa,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC;QAC/F,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC;IACpB,CAAC;IAED;;;;OAIG;IACI,MAAM,CAAC,iBAAiB,CAAC,OAAe,EAAE,QAAmB,EAAE,QAAiB;QACrF,IAAI,CAAC,QAAQ,EAAE;YACb,MAAM,YAAY,GAAW,cAAc,CAAC,eAAe,EAAE,IAAI,6BAAqB,CAAC;YACvF,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC;SACzC;QACD,MAAM,aAAa,GAAW,QAAQ,GAAG,EAAE,CAAC;QAC5C,MAAM,cAAc,GAAW,cAAc,CAAC,SAAS,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;QAChF,MAAM,mBAAmB,GAAa,cAAc,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAEjE,gBAAgB;QAChB,gBAAgB;QAChB,gBAAgB;QAChB,QAAQ,CAAC,SAAS,CAAC,KAAK,GAAG,CAAC,MAAM,CAAC,QAAQ,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC;QACtD,KAAK,MAAM,IAAI,IAAI,mBAAmB,EAAE;YACtC,MAAM,WAAW,GAAW,IAAI,CAAC,IAAI,EAAE,CAAC;YACxC,MAAM,OAAO,GAAW,QAAQ,GAAG,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC;YAC1D,MAAM,WAAW,GAAW,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC;YACpD,MAAM,YAAY,GAAW,OAAO,GAAG,WAAW,CAAC;YACnD,QAAQ,CAAC,SAAS,CAAC,KAAK,GAAG,CAAC,MAAM,CAAC,WAAW,CAAC,GAAG,WAAW,GAAG,GAAG,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;SAC/F;QACD,QAAQ,CAAC,SAAS,CAAC,KAAK,GAAG,CAAC,MAAM,CAAC,QAAQ,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC;IACxD,CAAC;CACF;AAvDD,wCAuDC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as tty from 'tty';\nimport wordwrap from 'wordwrap';\nimport { ITerminal } from '@rushstack/node-core-library';\n\n/**\n * A sensible fallback column width for consoles.\n *\n * @public\n */\nexport const DEFAULT_CONSOLE_WIDTH: number = 80;\n\n/**\n * A collection of utilities for printing messages to the console.\n *\n * @public\n */\nexport class PrintUtilities {\n  /**\n   * Returns the width of the console, measured in columns\n   */\n  public static getConsoleWidth(): number | undefined {\n    const stdout: tty.WriteStream = process.stdout as tty.WriteStream;\n    if (stdout && stdout.columns) {\n      return stdout.columns;\n    }\n  }\n\n  /**\n   * Applies word wrapping.  If maxLineLength is unspecified, then it defaults to the\n   * console width.\n   */\n  public static wrapWords(text: string, maxLineLength?: number, indent?: number): string {\n    if (!indent) {\n      indent = 0;\n    }\n\n    if (!maxLineLength) {\n      maxLineLength = PrintUtilities.getConsoleWidth() || DEFAULT_CONSOLE_WIDTH;\n    }\n\n    const wrap: (textToWrap: string) => string = wordwrap(indent, maxLineLength, { mode: 'soft' });\n    return wrap(text);\n  }\n\n  /**\n   * Displays a message in the console wrapped in a box UI.\n   *\n   * @param boxWidth - The width of the box, defaults to half of the console width.\n   */\n  public static printMessageInBox(message: string, terminal: ITerminal, boxWidth?: number): void {\n    if (!boxWidth) {\n      const consoleWidth: number = PrintUtilities.getConsoleWidth() || DEFAULT_CONSOLE_WIDTH;\n      boxWidth = Math.floor(consoleWidth / 2);\n    }\n    const maxLineLength: number = boxWidth - 10;\n    const wrappedMessage: string = PrintUtilities.wrapWords(message, maxLineLength);\n    const wrappedMessageLines: string[] = wrappedMessage.split('\\n');\n\n    // ╔═══════════╗\n    // ║  Message  ║\n    // ╚═══════════╝\n    terminal.writeLine(` ╔${'═'.repeat(boxWidth - 2)}╗ `);\n    for (const line of wrappedMessageLines) {\n      const trimmedLine: string = line.trim();\n      const padding: number = boxWidth - trimmedLine.length - 2;\n      const leftPadding: number = Math.floor(padding / 2);\n      const rightPadding: number = padding - leftPadding;\n      terminal.writeLine(` ║${' '.repeat(leftPadding)}${trimmedLine}${' '.repeat(rightPadding)}║ `);\n    }\n    terminal.writeLine(` ╚${'═'.repeat(boxWidth - 2)}╝ `);\n  }\n}\n"]}