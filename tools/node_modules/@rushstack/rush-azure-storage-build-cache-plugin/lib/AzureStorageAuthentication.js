"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
exports.AzureStorageAuthentication = exports.AzureAuthorityHosts = void 0;
const identity_1 = require("@azure/identity");
const storage_blob_1 = require("@azure/storage-blob");
const rush_sdk_1 = require("@rushstack/rush-sdk");
const terminal_1 = require("@rushstack/terminal");
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// TODO: This is a temporary workaround; it should be reverted when we upgrade to "@azure/identity" version 2.x
// import { AzureAuthorityHosts } from '@azure/identity';
/**
 * @public
 */
var AzureAuthorityHosts;
(function (AzureAuthorityHosts) {
    AzureAuthorityHosts["AzureChina"] = "https://login.chinacloudapi.cn";
    AzureAuthorityHosts["AzureGermany"] = "https://login.microsoftonline.de";
    AzureAuthorityHosts["AzureGovernment"] = "https://login.microsoftonline.us";
    AzureAuthorityHosts["AzurePublicCloud"] = "https://login.microsoftonline.com";
})(AzureAuthorityHosts = exports.AzureAuthorityHosts || (exports.AzureAuthorityHosts = {}));
const SAS_TTL_MILLISECONDS = 7 * 24 * 60 * 60 * 1000; // Seven days
/**
 * @public
 */
class AzureStorageAuthentication {
    constructor(options) {
        this._storageAccountName = options.storageAccountName;
        this._storageContainerName = options.storageContainerName;
        this._azureEnvironment = options.azureEnvironment || 'AzurePublicCloud';
        this._isCacheWriteAllowedByConfiguration = options.isCacheWriteAllowed;
    }
    get _credentialCacheId() {
        if (!this.__credentialCacheId) {
            const cacheIdParts = [
                'azure-blob-storage',
                this._azureEnvironment,
                this._storageAccountName,
                this._storageContainerName
            ];
            if (this._isCacheWriteAllowedByConfiguration) {
                cacheIdParts.push('cacheWriteAllowed');
            }
            this.__credentialCacheId = cacheIdParts.join('|');
        }
        return this.__credentialCacheId;
    }
    get _storageAccountUrl() {
        return `https://${this._storageAccountName}.blob.core.windows.net/`;
    }
    async updateCachedCredentialAsync(terminal, credential) {
        await rush_sdk_1.CredentialCache.usingAsync({
            supportEditing: true
        }, async (credentialsCache) => {
            credentialsCache.setCacheEntry(this._credentialCacheId, credential);
            await credentialsCache.saveIfModifiedAsync();
        });
    }
    /**
     * Launches an interactive flow to renew a cached credential.
     *
     * @param terminal - The terminal to log output to
     * @param onlyIfExistingCredentialExpiresAfter - If specified, and a cached credential exists that is still valid
     * after the date specified, no action will be taken.
     */
    async updateCachedCredentialInteractiveAsync(terminal, onlyIfExistingCredentialExpiresAfter) {
        await rush_sdk_1.CredentialCache.usingAsync({
            supportEditing: true
        }, async (credentialsCache) => {
            var _a;
            if (onlyIfExistingCredentialExpiresAfter) {
                const existingCredentialExpiration = (_a = credentialsCache.tryGetCacheEntry(this._credentialCacheId)) === null || _a === void 0 ? void 0 : _a.expires;
                if (existingCredentialExpiration &&
                    existingCredentialExpiration > onlyIfExistingCredentialExpiresAfter) {
                    return;
                }
            }
            const sasQueryParameters = await this._getSasQueryParametersAsync(terminal);
            const sasString = sasQueryParameters.toString();
            credentialsCache.setCacheEntry(this._credentialCacheId, sasString, sasQueryParameters.expiresOn);
            await credentialsCache.saveIfModifiedAsync();
        });
    }
    async deleteCachedCredentialsAsync(terminal) {
        await rush_sdk_1.CredentialCache.usingAsync({
            supportEditing: true
        }, async (credentialsCache) => {
            credentialsCache.deleteCacheEntry(this._credentialCacheId);
            await credentialsCache.saveIfModifiedAsync();
        });
    }
    async tryGetCachedCredentialAsync() {
        var _a;
        let cacheEntry;
        await rush_sdk_1.CredentialCache.usingAsync({
            supportEditing: false
        }, (credentialsCache) => {
            cacheEntry = credentialsCache.tryGetCacheEntry(this._credentialCacheId);
        });
        const expirationTime = (_a = cacheEntry === null || cacheEntry === void 0 ? void 0 : cacheEntry.expires) === null || _a === void 0 ? void 0 : _a.getTime();
        if (expirationTime && expirationTime < Date.now()) {
            throw new Error('Cached Azure Storage credentials have expired. ' +
                `Update the credentials by running "rush ${rush_sdk_1.RushConstants.updateCloudCredentialsCommandName}".`);
        }
        else {
            return cacheEntry === null || cacheEntry === void 0 ? void 0 : cacheEntry.credential;
        }
    }
    async _getSasQueryParametersAsync(terminal) {
        const authorityHost = AzureAuthorityHosts[this._azureEnvironment];
        if (!authorityHost) {
            throw new Error(`Unexpected Azure environment: ${this._azureEnvironment}`);
        }
        const DeveloperSignOnClientId = '04b07795-8ddb-461a-bbee-02f9e1bf7b46';
        const deviceCodeCredential = new identity_1.DeviceCodeCredential('organizations', DeveloperSignOnClientId, (deviceCodeInfo) => {
            terminal_1.PrintUtilities.printMessageInBox(deviceCodeInfo.message, terminal);
        }, { authorityHost: authorityHost });
        const blobServiceClient = new storage_blob_1.BlobServiceClient(this._storageAccountUrl, deviceCodeCredential);
        const startsOn = new Date();
        const expires = new Date(Date.now() + SAS_TTL_MILLISECONDS);
        const key = await blobServiceClient.getUserDelegationKey(startsOn, expires);
        const containerSasPermissions = new storage_blob_1.ContainerSASPermissions();
        containerSasPermissions.read = true;
        containerSasPermissions.write = this._isCacheWriteAllowedByConfiguration;
        const queryParameters = (0, storage_blob_1.generateBlobSASQueryParameters)({
            startsOn: startsOn,
            expiresOn: expires,
            permissions: containerSasPermissions,
            containerName: this._storageContainerName
        }, key, this._storageAccountName);
        return queryParameters;
    }
}
exports.AzureStorageAuthentication = AzureStorageAuthentication;
//# sourceMappingURL=AzureStorageAuthentication.js.map