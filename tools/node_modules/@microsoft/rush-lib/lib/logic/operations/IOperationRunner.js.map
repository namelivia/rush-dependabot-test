{"version":3,"file":"IOperationRunner.js","sourceRoot":"","sources":["../../../src/logic/operations/IOperationRunner.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport type { StdioSummarizer } from '@rushstack/terminal';\nimport type { CollatedWriter } from '@rushstack/stream-collator';\n\nimport type { OperationStatus } from './OperationStatus';\n\n/**\n * Information passed to the executing `IOperationRunner`\n *\n * @beta\n */\nexport interface IOperationRunnerContext {\n  /**\n   * The writer into which this `IOperationRunner` should write its logs.\n   */\n  collatedWriter: CollatedWriter;\n  /**\n   * If Rush was invoked with `--debug`\n   */\n  debugMode: boolean;\n  /**\n   * Defaults to `true`. Will be `false` if Rush was invoked with `--verbose`.\n   */\n  quietMode: boolean;\n  /**\n   * Object used to report a summary at the end of the Rush invocation.\n   */\n  stdioSummarizer: StdioSummarizer;\n}\n\n/**\n * The `Operation` class is a node in the dependency graph of work that needs to be scheduled by the\n * `OperationExecutionManager`. Each `Operation` has a `runner` member of type `IOperationRunner`, whose\n * implementation manages the actual process for running a single operation.\n *\n * @beta\n */\nexport interface IOperationRunner {\n  /**\n   * Name of the operation, for logging.\n   */\n  readonly name: string;\n\n  /**\n   * This flag determines if the operation is allowed to be skipped if up to date.\n   */\n  isSkipAllowed: boolean;\n\n  /**\n   * Indicates that this runner's duration has meaning.\n   */\n  reportTiming: boolean;\n\n  /**\n   * Indicates that this runner is architectural and should not be reported on.\n   */\n  silent: boolean;\n\n  /**\n   * If set to true, a warning result should not make Rush exit with a nonzero\n   * exit code\n   */\n  warningsAreAllowed: boolean;\n\n  /**\n   * Indicates if the output of this operation may be written to the cache\n   */\n  isCacheWriteAllowed: boolean;\n\n  /**\n   * Method to be executed for the operation.\n   */\n  executeAsync(context: IOperationRunnerContext): Promise<OperationStatus>;\n}\n"]}