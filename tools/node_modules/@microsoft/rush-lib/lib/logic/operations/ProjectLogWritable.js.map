{"version":3,"file":"ProjectLogWritable.js","sourceRoot":"","sources":["../../../src/logic/operations/ProjectLogWritable.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { FileSystem, FileWriter, InternalError } from '@rushstack/node-core-library';\nimport { TerminalChunkKind, TerminalWritable, ITerminalChunk } from '@rushstack/terminal';\nimport { CollatedTerminal } from '@rushstack/stream-collator';\n\nimport { RushConfigurationProject } from '../../api/RushConfigurationProject';\nimport { PackageNameParsers } from '../../api/PackageNameParsers';\nimport { RushConstants } from '../RushConstants';\n\nexport class ProjectLogWritable extends TerminalWritable {\n  private readonly _project: RushConfigurationProject;\n  private readonly _terminal: CollatedTerminal;\n\n  private _logPath: string;\n  private _errorLogPath: string;\n\n  private _logWriter: FileWriter | undefined = undefined;\n  private _errorLogWriter: FileWriter | undefined = undefined;\n\n  public constructor(\n    project: RushConfigurationProject,\n    terminal: CollatedTerminal,\n    logFilenameIdentifier: string\n  ) {\n    super();\n    this._project = project;\n    this._terminal = terminal;\n\n    function getLogFilePaths(\n      basePath: string,\n      logFilenameIdentifier: string\n    ): { logPath: string; errorLogPath: string } {\n      const unscopedProjectName: string = PackageNameParsers.permissive.getUnscopedName(project.packageName);\n\n      return {\n        logPath: `${basePath}/${unscopedProjectName}.${logFilenameIdentifier}.log`,\n        errorLogPath: `${basePath}/${unscopedProjectName}.${logFilenameIdentifier}.error.log`\n      };\n    }\n\n    const projectFolder: string = this._project.projectFolder;\n    const { logPath: legacyLogPath, errorLogPath: legacyErrorLogPath } = getLogFilePaths(\n      projectFolder,\n      'build'\n    );\n    // If the phased commands experiment is enabled, put logs under `rush-logs`\n    if (project.rushConfiguration.experimentsConfiguration.configuration.phasedCommands) {\n      // Delete the legacy logs\n      FileSystem.deleteFile(legacyLogPath);\n      FileSystem.deleteFile(legacyErrorLogPath);\n\n      const logPathPrefix: string = `${projectFolder}/${RushConstants.rushLogsFolderName}`;\n      FileSystem.ensureFolder(logPathPrefix);\n\n      const { logPath, errorLogPath } = getLogFilePaths(logPathPrefix, logFilenameIdentifier);\n      this._logPath = logPath;\n      this._errorLogPath = errorLogPath;\n    } else {\n      this._logPath = legacyLogPath;\n      this._errorLogPath = legacyErrorLogPath;\n    }\n\n    FileSystem.deleteFile(this._logPath);\n    FileSystem.deleteFile(this._errorLogPath);\n\n    this._logWriter = FileWriter.open(this._logPath);\n  }\n\n  protected onWriteChunk(chunk: ITerminalChunk): void {\n    if (!this._logWriter) {\n      throw new InternalError('Output file was closed');\n    }\n    // Both stderr and stdout get written to *.<phaseName>.log\n    this._logWriter.write(chunk.text);\n\n    if (chunk.kind === TerminalChunkKind.Stderr) {\n      // Only stderr gets written to *.<phaseName>.error.log\n      if (!this._errorLogWriter) {\n        this._errorLogWriter = FileWriter.open(this._errorLogPath);\n      }\n      this._errorLogWriter.write(chunk.text);\n    }\n  }\n\n  protected onClose(): void {\n    if (this._logWriter) {\n      try {\n        this._logWriter.close();\n      } catch (error) {\n        this._terminal.writeStderrLine('Failed to close file handle for ' + this._logWriter.filePath);\n      }\n      this._logWriter = undefined;\n    }\n\n    if (this._errorLogWriter) {\n      try {\n        this._errorLogWriter.close();\n      } catch (error) {\n        this._terminal.writeStderrLine('Failed to close file handle for ' + this._errorLogWriter.filePath);\n      }\n      this._errorLogWriter = undefined;\n    }\n  }\n}\n"]}