{"version":3,"file":"RushConfiguration.js","sourceRoot":"","sources":["../../src/api/RushConfiguration.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\n/* eslint max-lines: off */\n\nimport * as path from 'path';\nimport * as semver from 'semver';\nimport {\n  JsonFile,\n  JsonSchema,\n  JsonNull,\n  Path,\n  FileSystem,\n  PackageNameParser,\n  FileSystemStats,\n  Import\n} from '@rushstack/node-core-library';\nimport { trueCasePathSync } from 'true-case-path';\n\nimport { Rush } from '../api/Rush';\nimport { RushConfigurationProject, IRushConfigurationProjectJson } from './RushConfigurationProject';\nimport { RushConstants } from '../logic/RushConstants';\nimport { ApprovedPackagesPolicy } from './ApprovedPackagesPolicy';\nimport { EventHooks } from './EventHooks';\nimport { VersionPolicyConfiguration } from './VersionPolicyConfiguration';\nimport { EnvironmentConfiguration } from './EnvironmentConfiguration';\nimport { CommonVersionsConfiguration } from './CommonVersionsConfiguration';\nimport { Utilities } from '../utilities/Utilities';\nimport { PackageManagerName, PackageManager } from './packageManager/PackageManager';\nimport { NpmPackageManager } from './packageManager/NpmPackageManager';\nimport { YarnPackageManager } from './packageManager/YarnPackageManager';\nimport { PnpmPackageManager } from './packageManager/PnpmPackageManager';\nimport { ExperimentsConfiguration } from './ExperimentsConfiguration';\nimport { PackageNameParsers } from './PackageNameParsers';\nimport { RepoStateFile } from '../logic/RepoStateFile';\nimport { LookupByPath } from '../logic/LookupByPath';\nimport { RushPluginsConfiguration } from './RushPluginsConfiguration';\nimport type * as DependencyAnalyzerModuleType from '../logic/DependencyAnalyzer';\n\nconst DependencyAnalyzerModule: typeof DependencyAnalyzerModuleType = Import.lazy(\n  '../logic/DependencyAnalyzer',\n  require\n);\n\nconst MINIMUM_SUPPORTED_RUSH_JSON_VERSION: string = '0.0.0';\nconst DEFAULT_BRANCH: string = 'main';\nconst DEFAULT_REMOTE: string = 'origin';\n\n/**\n * A list of known config filenames that are expected to appear in the \"./common/config/rush\" folder.\n * To avoid confusion/mistakes, any extra files will be reported as an error.\n */\nconst knownRushConfigFilenames: string[] = [\n  '.npmrc-publish',\n  '.npmrc',\n  'deploy.json',\n  RushConstants.artifactoryFilename,\n  RushConstants.browserApprovedPackagesFilename,\n  RushConstants.buildCacheFilename,\n  RushConstants.commandLineFilename,\n  RushConstants.commonVersionsFilename,\n  RushConstants.experimentsFilename,\n  RushConstants.nonbrowserApprovedPackagesFilename,\n  RushConstants.pinnedVersionsFilename,\n  RushConstants.repoStateFilename,\n  RushConstants.versionPoliciesFilename,\n  RushConstants.rushPluginsConfigFilename\n];\n\n/**\n * Part of IRushConfigurationJson.\n */\nexport interface IApprovedPackagesPolicyJson {\n  reviewCategories?: string[];\n  ignoredNpmScopes?: string[];\n}\n\n/**\n * Part of IRushConfigurationJson.\n */\nexport interface IRushGitPolicyJson {\n  allowedEmailRegExps?: string[];\n  sampleEmail?: string;\n  versionBumpCommitMessage?: string;\n  changeLogUpdateCommitMessage?: string;\n  tagSeparator?: string;\n}\n\n/**\n * Part of IRushConfigurationJson.\n * @beta\n */\nexport interface IEventHooksJson {\n  /**\n   * The list of scripts to run after every Rush build command finishes\n   */\n  postRushBuild?: string[];\n}\n\n/**\n * Part of IRushConfigurationJson.\n */\nexport interface IRushRepositoryJsonBase {\n  /**\n   * The default branch name. This tells \"rush change\" which remote branch to compare against.\n   */\n  defaultBranch?: string;\n\n  /**\n   * The default remote. This tells \"rush change\" which remote to compare against if the remote URL is not set\n   * or if a remote matching the provided remote URL is not found.\n   */\n  defaultRemote?: string;\n}\n\nexport interface IRushRepositoryJsonSingleUrl extends IRushRepositoryJsonBase {\n  /**\n   * The remote url of the repository. If a value is provided,\n   * \\\"rush change\\\" will use it to find the right remote to compare against.\n   *\n   * @deprecated Use \"urls\" instead.\n   */\n  url?: string;\n}\n\nexport interface IRushRepositoryJsonMultipleUrls extends IRushRepositoryJsonBase {\n  /**\n   * Remote url(s) of the repository. If a value is provided, \\\"rush change\\\" will\n   * use one of these to find the right remote to compare against. Specifying multiple URLs\n   * is useful if a GitHub repository is renamed or for \"<projectName>.visualstudio.com\" vs\n   * \"dev.azure.com/<projectName>\" URLs.\n   */\n  urls?: string[];\n}\n\nexport type IRushRepositoryJson = IRushRepositoryJsonSingleUrl | IRushRepositoryJsonMultipleUrls;\n\n/**\n * This represents the available PNPM store options\n * @public\n */\nexport type PnpmStoreOptions = 'local' | 'global';\n\n/**\n * Options for the package manager.\n * @public\n */\nexport interface IPackageManagerOptionsJsonBase {\n  /**\n   * Environment variables for the package manager\n   */\n  environmentVariables?: IConfigurationEnvironment;\n}\n\n/**\n * A collection of environment variables\n * @public\n */\nexport interface IConfigurationEnvironment {\n  /**\n   * Environment variables\n   */\n  [environmentVariableName: string]: IConfigurationEnvironmentVariable;\n}\n\n/**\n * Represents the value of an environment variable, and if the value should be overridden if the variable is set\n * in the parent environment.\n * @public\n */\nexport interface IConfigurationEnvironmentVariable {\n  /**\n   * Value of the environment variable\n   */\n  value: string;\n\n  /**\n   * Set to true to override the environment variable even if it is set in the parent environment.\n   * The default value is false.\n   */\n  override?: boolean;\n}\n\n/**\n * Part of IRushConfigurationJson.\n * @internal\n */\nexport interface INpmOptionsJson extends IPackageManagerOptionsJsonBase {}\n\n/**\n * Part of IRushConfigurationJson.\n * @internal\n */\nexport interface IPnpmOptionsJson extends IPackageManagerOptionsJsonBase {\n  /**\n   * The store resolution method for PNPM to use\n   */\n  pnpmStore?: PnpmStoreOptions;\n  /**\n   * Should PNPM fail if peer dependencies aren't installed?\n   */\n  strictPeerDependencies?: boolean;\n  /**\n   * {@inheritDoc PnpmOptionsConfiguration.preventManualShrinkwrapChanges}\n   */\n  preventManualShrinkwrapChanges?: boolean;\n  /**\n   * {@inheritDoc PnpmOptionsConfiguration.useWorkspaces}\n   */\n  useWorkspaces?: boolean;\n}\n\n/**\n * Part of IRushConfigurationJson.\n * @internal\n */\nexport interface IYarnOptionsJson extends IPackageManagerOptionsJsonBase {\n  /**\n   * If true, then Rush will add the \"--ignore-engines\" option when invoking Yarn.\n   * This allows \"rush install\" to succeed if there are dependencies with engines defined in\n   * package.json which do not match the current environment.\n   *\n   * The default value is false.\n   */\n  ignoreEngines?: boolean;\n}\n\n/**\n * Options defining an allowed variant as part of IRushConfigurationJson.\n */\nexport interface IRushVariantOptionsJson {\n  variantName: string;\n  description: string;\n}\n\n/**\n * This represents the JSON data structure for the \"rush.json\" configuration file.\n * See rush.schema.json for documentation.\n */\nexport interface IRushConfigurationJson {\n  $schema: string;\n  npmVersion?: string;\n  pnpmVersion?: string;\n  yarnVersion?: string;\n  rushVersion: string;\n  repository?: IRushRepositoryJson;\n  nodeSupportedVersionRange?: string;\n  suppressNodeLtsWarning?: boolean;\n  projectFolderMinDepth?: number;\n  projectFolderMaxDepth?: number;\n  allowMostlyStandardPackageNames?: boolean;\n  approvedPackagesPolicy?: IApprovedPackagesPolicyJson;\n  gitPolicy?: IRushGitPolicyJson;\n  telemetryEnabled?: boolean;\n  allowedProjectTags?: string[];\n  projects: IRushConfigurationProjectJson[];\n  eventHooks?: IEventHooksJson;\n  hotfixChangeEnabled?: boolean;\n  npmOptions?: INpmOptionsJson;\n  pnpmOptions?: IPnpmOptionsJson;\n  yarnOptions?: IYarnOptionsJson;\n  ensureConsistentVersions?: boolean;\n  variants?: IRushVariantOptionsJson[];\n}\n\n/**\n * This represents the JSON data structure for the \"current-variant.json\" data file.\n */\nexport interface ICurrentVariantJson {\n  variant: string | JsonNull;\n}\n\n/**\n * Options that all package managers share.\n *\n * @public\n */\nexport abstract class PackageManagerOptionsConfigurationBase implements IPackageManagerOptionsJsonBase {\n  /**\n   * Environment variables for the package manager\n   */\n  public readonly environmentVariables?: IConfigurationEnvironment;\n\n  /** @internal */\n  protected constructor(json: IPackageManagerOptionsJsonBase) {\n    this.environmentVariables = json.environmentVariables;\n  }\n}\n\n/**\n * Options that are only used when the NPM package manager is selected.\n *\n * @remarks\n * It is valid to define these options in rush.json even if the NPM package manager\n * is not being used.\n *\n * @public\n */\nexport class NpmOptionsConfiguration extends PackageManagerOptionsConfigurationBase {\n  /** @internal */\n  public constructor(json: INpmOptionsJson) {\n    super(json);\n  }\n}\n\n/**\n * Options that are only used when the PNPM package manager is selected.\n *\n * @remarks\n * It is valid to define these options in rush.json even if the PNPM package manager\n * is not being used.\n *\n * @public\n */\nexport class PnpmOptionsConfiguration extends PackageManagerOptionsConfigurationBase {\n  /**\n   * The method used to resolve the store used by PNPM.\n   *\n   * @remarks\n   * Available options:\n   *  - local: Use the standard Rush store path: common/temp/pnpm-store\n   *  - global: Use PNPM's global store path\n   */\n  public readonly pnpmStore: PnpmStoreOptions;\n\n  /**\n   * The path for PNPM to use as the store directory.\n   *\n   * Will be overridden by environment variable RUSH_PNPM_STORE_PATH\n   */\n  public readonly pnpmStorePath: string;\n\n  /**\n   * If true, then Rush will add the \"--strict-peer-dependencies\" option when invoking PNPM.\n   *\n   * @remarks\n   * This causes \"rush install\" to fail if there are unsatisfied peer dependencies, which is\n   * an invalid state that can cause build failures or incompatible dependency versions.\n   * (For historical reasons, JavaScript package managers generally do not treat this invalid state\n   * as an error.)\n   *\n   * The default value is false.  (For now.)\n   */\n  public readonly strictPeerDependencies: boolean;\n\n  /**\n   * If true, then `rush install` will report an error if manual modifications\n   * were made to the PNPM shrinkwrap file without running `rush update` afterwards.\n   *\n   * @remarks\n   * This feature protects against accidental inconsistencies that may be introduced\n   * if the PNPM shrinkwrap file (`pnpm-lock.yaml`) is manually edited.  When this\n   * feature is enabled, `rush update` will write a hash of the shrinkwrap contents to repo-state.json,\n   * and then `rush update` and `rush install` will validate the hash.  Note that this does not prohibit\n   * manual modifications, but merely requires `rush update` be run\n   * afterwards, ensuring that PNPM can report or repair any potential inconsistencies.\n   *\n   * To temporarily disable this validation when invoking `rush install`, use the\n   * `--bypass-policy` command-line parameter.\n   *\n   * The default value is false.\n   */\n  public readonly preventManualShrinkwrapChanges: boolean;\n\n  /**\n   * If true, then Rush will use the workspaces feature to install and link packages when invoking PNPM.\n   *\n   * @remarks\n   * The default value is false.  (For now.)\n   */\n  public readonly useWorkspaces: boolean;\n\n  /** @internal */\n  public constructor(json: IPnpmOptionsJson, commonTempFolder: string) {\n    super(json);\n    this.pnpmStore = json.pnpmStore || 'local';\n    if (EnvironmentConfiguration.pnpmStorePathOverride) {\n      this.pnpmStorePath = EnvironmentConfiguration.pnpmStorePathOverride;\n    } else if (this.pnpmStore === 'global') {\n      this.pnpmStorePath = '';\n    } else {\n      this.pnpmStorePath = path.resolve(path.join(commonTempFolder, 'pnpm-store'));\n    }\n    this.strictPeerDependencies = !!json.strictPeerDependencies;\n    this.preventManualShrinkwrapChanges = !!json.preventManualShrinkwrapChanges;\n    this.useWorkspaces = !!json.useWorkspaces;\n  }\n}\n\n/**\n * Options that are only used when the yarn package manager is selected.\n *\n * @remarks\n * It is valid to define these options in rush.json even if the yarn package manager\n * is not being used.\n *\n * @public\n */\nexport class YarnOptionsConfiguration extends PackageManagerOptionsConfigurationBase {\n  /**\n   * If true, then Rush will add the \"--ignore-engines\" option when invoking Yarn.\n   * This allows \"rush install\" to succeed if there are dependencies with engines defined in\n   * package.json which do not match the current environment.\n   *\n   * The default value is false.\n   */\n  public readonly ignoreEngines: boolean;\n\n  /** @internal */\n  public constructor(json: IYarnOptionsJson) {\n    super(json);\n    this.ignoreEngines = !!json.ignoreEngines;\n  }\n}\n\n/**\n * Options for `RushConfiguration.tryFindRushJsonLocation`.\n * @public\n */\nexport interface ITryFindRushJsonLocationOptions {\n  /**\n   * Whether to show verbose console messages.  Defaults to false.\n   */\n  showVerbose?: boolean; // Defaults to false (inverse of old `verbose` parameter)\n\n  /**\n   * The folder path where the search will start.  Defaults tot he current working directory.\n   */\n  startingFolder?: string; // Defaults to cwd\n}\n\n/**\n * This represents the Rush configuration for a repository, based on the \"rush.json\"\n * configuration file.\n * @public\n */\nexport class RushConfiguration {\n  private static _jsonSchema: JsonSchema = JsonSchema.fromFile(\n    path.join(__dirname, '../schemas/rush.schema.json')\n  );\n\n  private _rushJsonFile: string;\n  private _rushJsonFolder: string;\n  private _changesFolder: string;\n  private _commonFolder: string;\n  private _commonTempFolder: string;\n  private _commonScriptsFolder: string;\n  private _commonRushConfigFolder: string;\n  private _packageManager!: PackageManagerName;\n  private _packageManagerWrapper: PackageManager;\n  private _npmCacheFolder: string;\n  private _npmTmpFolder: string;\n  private _yarnCacheFolder: string;\n  private _shrinkwrapFilename: string;\n  private _tempShrinkwrapFilename: string;\n  private _tempShrinkwrapPreinstallFilename: string;\n  private _currentVariantJsonFilename: string;\n  private _packageManagerToolVersion: string;\n  private _packageManagerToolFilename: string;\n  private _projectFolderMinDepth: number;\n  private _projectFolderMaxDepth: number;\n  private _allowMostlyStandardPackageNames: boolean;\n  private _ensureConsistentVersions: boolean;\n  private _suppressNodeLtsWarning: boolean;\n  private _variants: Set<string>;\n  private readonly _pathTrees: Map<string, LookupByPath<RushConfigurationProject>>;\n\n  // \"approvedPackagesPolicy\" feature\n  private _approvedPackagesPolicy: ApprovedPackagesPolicy;\n\n  // \"gitPolicy\" feature\n  private _gitAllowedEmailRegExps: string[];\n  private _gitSampleEmail: string;\n  private _gitVersionBumpCommitMessage: string | undefined;\n  private _gitChangeLogUpdateCommitMessage: string | undefined;\n  private _gitTagSeparator: string | undefined;\n\n  // \"hotfixChangeEnabled\" feature\n  private _hotfixChangeEnabled: boolean;\n\n  // Repository info\n  private _repositoryUrls: string[];\n  private _repositoryDefaultBranch: string;\n  private _repositoryDefaultRemote: string;\n\n  private _npmOptions: NpmOptionsConfiguration;\n  private _pnpmOptions: PnpmOptionsConfiguration;\n  private _yarnOptions: YarnOptionsConfiguration;\n  private _packageManagerConfigurationOptions!: PackageManagerOptionsConfigurationBase;\n\n  // Rush hooks\n  private _eventHooks: EventHooks;\n\n  private readonly _packageNameParser: PackageNameParser;\n\n  private _telemetryEnabled: boolean;\n\n  // Lazily loaded when the projects() getter is called.\n  private _projects: RushConfigurationProject[] | undefined;\n\n  // Lazily loaded when the projectsByName() getter is called.\n  private _projectsByName: Map<string, RushConfigurationProject> | undefined;\n\n  // Lazily loaded when the projectsByTag() getter is called.\n  private _projectsByTag: ReadonlyMap<string, ReadonlySet<RushConfigurationProject>> | undefined;\n\n  // variant -> common-versions configuration\n  private _commonVersionsConfigurationsByVariant: Map<string, CommonVersionsConfiguration> | undefined;\n\n  private _versionPolicyConfiguration: VersionPolicyConfiguration;\n  private _versionPolicyConfigurationFilePath: string;\n  private _experimentsConfiguration: ExperimentsConfiguration;\n\n  private __rushPluginsConfiguration: RushPluginsConfiguration;\n\n  private readonly _rushConfigurationJson: IRushConfigurationJson;\n\n  /**\n   * Use RushConfiguration.loadFromConfigurationFile() or Use RushConfiguration.loadFromDefaultLocation()\n   * instead.\n   */\n  private constructor(rushConfigurationJson: IRushConfigurationJson, rushJsonFilename: string) {\n    this._rushConfigurationJson = rushConfigurationJson;\n    EnvironmentConfiguration.validate();\n\n    if (rushConfigurationJson.nodeSupportedVersionRange) {\n      if (!semver.validRange(rushConfigurationJson.nodeSupportedVersionRange)) {\n        throw new Error(\n          'Error parsing the node-semver expression in the \"nodeSupportedVersionRange\"' +\n            ` field from rush.json: \"${rushConfigurationJson.nodeSupportedVersionRange}\"`\n        );\n      }\n      if (!semver.satisfies(process.version, rushConfigurationJson.nodeSupportedVersionRange)) {\n        const message: string =\n          `Your dev environment is running Node.js version ${process.version} which does` +\n          ` not meet the requirements for building this repository.  (The rush.json configuration` +\n          ` requires nodeSupportedVersionRange=\"${rushConfigurationJson.nodeSupportedVersionRange}\")`;\n        if (EnvironmentConfiguration.allowUnsupportedNodeVersion) {\n          console.warn(message);\n        } else {\n          throw new Error(message);\n        }\n      }\n    }\n\n    this._rushJsonFile = rushJsonFilename;\n    this._rushJsonFolder = path.dirname(rushJsonFilename);\n\n    this._commonFolder = path.resolve(path.join(this._rushJsonFolder, RushConstants.commonFolderName));\n\n    this._commonRushConfigFolder = path.join(this._commonFolder, 'config', 'rush');\n\n    this._commonTempFolder =\n      EnvironmentConfiguration.rushTempFolderOverride ||\n      path.join(this._commonFolder, RushConstants.rushTempFolderName);\n\n    this._commonScriptsFolder = path.join(this._commonFolder, 'scripts');\n\n    this._npmCacheFolder = path.resolve(path.join(this._commonTempFolder, 'npm-cache'));\n    this._npmTmpFolder = path.resolve(path.join(this._commonTempFolder, 'npm-tmp'));\n    this._yarnCacheFolder = path.resolve(path.join(this._commonTempFolder, 'yarn-cache'));\n\n    this._changesFolder = path.join(this._commonFolder, RushConstants.changeFilesFolderName);\n\n    this._currentVariantJsonFilename = path.join(this._commonTempFolder, 'current-variant.json');\n\n    this._suppressNodeLtsWarning = !!rushConfigurationJson.suppressNodeLtsWarning;\n\n    this._ensureConsistentVersions = !!rushConfigurationJson.ensureConsistentVersions;\n\n    const experimentsConfigFile: string = path.join(\n      this._commonRushConfigFolder,\n      RushConstants.experimentsFilename\n    );\n    this._experimentsConfiguration = new ExperimentsConfiguration(experimentsConfigFile);\n\n    const rushPluginsConfigFilename: string = path.join(\n      this._commonRushConfigFolder,\n      RushConstants.rushPluginsConfigFilename\n    );\n    this.__rushPluginsConfiguration = new RushPluginsConfiguration(rushPluginsConfigFilename);\n\n    this._npmOptions = new NpmOptionsConfiguration(rushConfigurationJson.npmOptions || {});\n    this._pnpmOptions = new PnpmOptionsConfiguration(\n      rushConfigurationJson.pnpmOptions || {},\n      this._commonTempFolder\n    );\n    this._yarnOptions = new YarnOptionsConfiguration(rushConfigurationJson.yarnOptions || {});\n\n    // TODO: Add an actual \"packageManager\" field in rush.json\n    const packageManagerFields: string[] = [];\n\n    if (rushConfigurationJson.npmVersion) {\n      this._packageManager = 'npm';\n      this._packageManagerConfigurationOptions = this._npmOptions;\n      packageManagerFields.push('npmVersion');\n    }\n    if (rushConfigurationJson.pnpmVersion) {\n      this._packageManager = 'pnpm';\n      this._packageManagerConfigurationOptions = this._pnpmOptions;\n      packageManagerFields.push('pnpmVersion');\n    }\n    if (rushConfigurationJson.yarnVersion) {\n      this._packageManager = 'yarn';\n      this._packageManagerConfigurationOptions = this._yarnOptions;\n      packageManagerFields.push('yarnVersion');\n    }\n\n    if (packageManagerFields.length === 0) {\n      throw new Error(\n        `The rush.json configuration must specify one of: npmVersion, pnpmVersion, or yarnVersion`\n      );\n    }\n\n    if (packageManagerFields.length > 1) {\n      throw new Error(\n        `The rush.json configuration cannot specify both ${packageManagerFields[0]}` +\n          ` and ${packageManagerFields[1]} `\n      );\n    }\n\n    if (this._packageManager === 'npm') {\n      this._packageManagerToolVersion = rushConfigurationJson.npmVersion!;\n      this._packageManagerWrapper = new NpmPackageManager(this._packageManagerToolVersion);\n    } else if (this._packageManager === 'pnpm') {\n      this._packageManagerToolVersion = rushConfigurationJson.pnpmVersion!;\n      this._packageManagerWrapper = new PnpmPackageManager(this._packageManagerToolVersion);\n    } else {\n      this._packageManagerToolVersion = rushConfigurationJson.yarnVersion!;\n      this._packageManagerWrapper = new YarnPackageManager(this._packageManagerToolVersion);\n    }\n\n    this._shrinkwrapFilename = this._packageManagerWrapper.shrinkwrapFilename;\n\n    this._tempShrinkwrapFilename = path.join(this._commonTempFolder, this._shrinkwrapFilename);\n    this._packageManagerToolFilename = path.resolve(\n      path.join(\n        this._commonTempFolder,\n        `${this.packageManager}-local`,\n        'node_modules',\n        '.bin',\n        `${this.packageManager}`\n      )\n    );\n\n    /// From \"C:\\repo\\common\\temp\\pnpm-lock.yaml\" --> \"C:\\repo\\common\\temp\\pnpm-lock-preinstall.yaml\"\n    const parsedPath: path.ParsedPath = path.parse(this._tempShrinkwrapFilename);\n    this._tempShrinkwrapPreinstallFilename = path.join(\n      parsedPath.dir,\n      parsedPath.name + '-preinstall' + parsedPath.ext\n    );\n\n    RushConfiguration._validateCommonRushConfigFolder(\n      this._commonRushConfigFolder,\n      this._packageManagerWrapper,\n      this._experimentsConfiguration\n    );\n\n    this._projectFolderMinDepth =\n      rushConfigurationJson.projectFolderMinDepth !== undefined\n        ? rushConfigurationJson.projectFolderMinDepth\n        : 1;\n    if (this._projectFolderMinDepth < 1) {\n      throw new Error('Invalid projectFolderMinDepth; the minimum possible value is 1');\n    }\n\n    this._projectFolderMaxDepth =\n      rushConfigurationJson.projectFolderMaxDepth !== undefined\n        ? rushConfigurationJson.projectFolderMaxDepth\n        : 2;\n    if (this._projectFolderMaxDepth < this._projectFolderMinDepth) {\n      throw new Error('The projectFolderMaxDepth cannot be smaller than the projectFolderMinDepth');\n    }\n\n    this._allowMostlyStandardPackageNames = !!rushConfigurationJson.allowMostlyStandardPackageNames;\n    this._packageNameParser = this._allowMostlyStandardPackageNames\n      ? PackageNameParsers.mostlyStandard\n      : PackageNameParsers.rushDefault;\n\n    this._approvedPackagesPolicy = new ApprovedPackagesPolicy(this, rushConfigurationJson);\n\n    this._gitAllowedEmailRegExps = [];\n    this._gitSampleEmail = '';\n    if (rushConfigurationJson.gitPolicy) {\n      if (rushConfigurationJson.gitPolicy.sampleEmail) {\n        this._gitSampleEmail = rushConfigurationJson.gitPolicy.sampleEmail;\n      }\n\n      if (rushConfigurationJson.gitPolicy.allowedEmailRegExps) {\n        this._gitAllowedEmailRegExps = rushConfigurationJson.gitPolicy.allowedEmailRegExps;\n\n        if (this._gitSampleEmail.trim().length < 1) {\n          throw new Error(\n            'The rush.json file is missing the \"sampleEmail\" option, ' +\n              'which is required when using \"allowedEmailRegExps\"'\n          );\n        }\n      }\n\n      if (rushConfigurationJson.gitPolicy.versionBumpCommitMessage) {\n        this._gitVersionBumpCommitMessage = rushConfigurationJson.gitPolicy.versionBumpCommitMessage;\n      }\n\n      if (rushConfigurationJson.gitPolicy.changeLogUpdateCommitMessage) {\n        this._gitChangeLogUpdateCommitMessage = rushConfigurationJson.gitPolicy.changeLogUpdateCommitMessage;\n      }\n\n      if (rushConfigurationJson.gitPolicy.tagSeparator) {\n        this._gitTagSeparator = rushConfigurationJson.gitPolicy.tagSeparator;\n      }\n    }\n\n    this._hotfixChangeEnabled = false;\n    if (rushConfigurationJson.hotfixChangeEnabled) {\n      this._hotfixChangeEnabled = rushConfigurationJson.hotfixChangeEnabled;\n    }\n\n    if (!rushConfigurationJson.repository) {\n      rushConfigurationJson.repository = {};\n    }\n\n    this._repositoryDefaultBranch = rushConfigurationJson.repository.defaultBranch || DEFAULT_BRANCH;\n    this._repositoryDefaultRemote = rushConfigurationJson.repository.defaultRemote || DEFAULT_REMOTE;\n    const repositoryFieldWithMultipleUrls: IRushRepositoryJsonMultipleUrls =\n      rushConfigurationJson.repository as IRushRepositoryJsonMultipleUrls;\n    const repositoryFieldWithSingleUrl: IRushRepositoryJsonSingleUrl =\n      rushConfigurationJson.repository as IRushRepositoryJsonSingleUrl;\n    if (repositoryFieldWithMultipleUrls.urls) {\n      if (repositoryFieldWithSingleUrl.url) {\n        throw new Error(\"The 'repository.url' field cannot be used when 'repository.urls' is present\");\n      }\n\n      this._repositoryUrls = repositoryFieldWithMultipleUrls.urls;\n    } else if (repositoryFieldWithSingleUrl.url) {\n      this._repositoryUrls = [repositoryFieldWithSingleUrl.url];\n    } else {\n      this._repositoryUrls = [];\n    }\n\n    this._telemetryEnabled = !!rushConfigurationJson.telemetryEnabled;\n    this._eventHooks = new EventHooks(rushConfigurationJson.eventHooks || {});\n\n    this._versionPolicyConfigurationFilePath = path.join(\n      this._commonRushConfigFolder,\n      RushConstants.versionPoliciesFilename\n    );\n    this._versionPolicyConfiguration = new VersionPolicyConfiguration(\n      this._versionPolicyConfigurationFilePath\n    );\n\n    this._variants = new Set<string>();\n\n    if (rushConfigurationJson.variants) {\n      for (const variantOptions of rushConfigurationJson.variants) {\n        const { variantName } = variantOptions;\n\n        if (this._variants.has(variantName)) {\n          throw new Error(`Duplicate variant named '${variantName}' specified in configuration.`);\n        }\n\n        this._variants.add(variantName);\n      }\n    }\n\n    this._pathTrees = new Map();\n  }\n\n  private _initializeAndValidateLocalProjects(): void {\n    this._projects = [];\n    this._projectsByName = new Map<string, RushConfigurationProject>();\n\n    // We sort the projects array in alphabetical order.  This ensures that the packages\n    // are processed in a deterministic order by the various Rush algorithms.\n    const sortedProjectJsons: IRushConfigurationProjectJson[] = this._rushConfigurationJson.projects.slice(0);\n    sortedProjectJsons.sort((a: IRushConfigurationProjectJson, b: IRushConfigurationProjectJson) =>\n      a.packageName.localeCompare(b.packageName)\n    );\n\n    const allowedProjectTags: Set<string> | undefined = this._rushConfigurationJson.allowedProjectTags\n      ? new Set(this._rushConfigurationJson.allowedProjectTags)\n      : undefined;\n    const usedTempNames: Set<string> = new Set();\n    for (let i: number = 0, len: number = sortedProjectJsons.length; i < len; i++) {\n      const projectJson: IRushConfigurationProjectJson = sortedProjectJsons[i];\n      const tempProjectName: string | undefined = RushConfiguration._generateTempNameForProject(\n        projectJson,\n        usedTempNames\n      );\n      const project: RushConfigurationProject = new RushConfigurationProject({\n        projectJson,\n        rushConfiguration: this,\n        tempProjectName,\n        allowedProjectTags\n      });\n\n      this._projects.push(project);\n      if (this._projectsByName.has(project.packageName)) {\n        throw new Error(\n          `The project name \"${project.packageName}\" was specified more than once` +\n            ` in the rush.json configuration file.`\n        );\n      }\n      this._projectsByName.set(project.packageName, project);\n    }\n\n    for (const project of this._projects) {\n      project.cyclicDependencyProjects.forEach((cyclicDependencyProject: string) => {\n        if (!this.getProjectByName(cyclicDependencyProject)) {\n          throw new Error(\n            `In rush.json, the \"${cyclicDependencyProject}\" project does not exist,` +\n              ` but was referenced by the cyclicDependencyProjects for ${project.packageName}`\n          );\n        }\n      });\n      this._versionPolicyConfiguration.validate(this.projectsByName);\n\n      // Consumer relationships will be established the first time one is requested\n    }\n  }\n\n  /**\n   * Loads the configuration data from an Rush.json configuration file and returns\n   * an RushConfiguration object.\n   */\n  public static loadFromConfigurationFile(rushJsonFilename: string): RushConfiguration {\n    let resolvedRushJsonFilename: string = path.resolve(rushJsonFilename);\n    // Load the rush.json before we fix the casing. If the case is wrong on a case-sensitive filesystem,\n    // the next line show throw.\n    const rushConfigurationJson: IRushConfigurationJson = JsonFile.load(resolvedRushJsonFilename);\n\n    try {\n      resolvedRushJsonFilename = trueCasePathSync(resolvedRushJsonFilename);\n    } catch (error) {\n      /* ignore errors from true-case-path */\n    }\n\n    // Check the Rush version *before* we validate the schema, since if the version is outdated\n    // then the schema may have changed. This should no longer be a problem after Rush 4.0 and the C2R wrapper,\n    // but we'll validate anyway.\n    const expectedRushVersion: string = rushConfigurationJson.rushVersion;\n\n    const rushJsonBaseName: string = path.basename(resolvedRushJsonFilename);\n\n    // If the version is missing or malformed, fall through and let the schema handle it.\n    if (expectedRushVersion && semver.valid(expectedRushVersion)) {\n      // Make sure the requested version isn't too old\n      if (semver.lt(expectedRushVersion, MINIMUM_SUPPORTED_RUSH_JSON_VERSION)) {\n        throw new Error(\n          `${rushJsonBaseName} is version ${expectedRushVersion}, which is too old for this tool. ` +\n            `The minimum supported version is ${MINIMUM_SUPPORTED_RUSH_JSON_VERSION}.`\n        );\n      }\n\n      // Make sure the requested version isn't too new.\n      //\n      // If the major/minor versions are the same, then we consider the file to be compatible.\n      // This is somewhat lax, e.g. \"5.0.2-dev.3\" will be assumed to be loadable by rush-lib 5.0.0.\n      //\n      // IMPORTANT: Whenever a breaking change is introduced for one of the config files, we must\n      // increment the minor version number for Rush.\n      if (\n        semver.major(Rush.version) !== semver.major(expectedRushVersion) ||\n        semver.minor(Rush.version) !== semver.minor(expectedRushVersion)\n      ) {\n        // If the major/minor are different, then make sure it's an older version.\n        if (semver.lt(Rush.version, expectedRushVersion)) {\n          throw new Error(\n            `Unable to load ${rushJsonBaseName} because its RushVersion is` +\n              ` ${rushConfigurationJson.rushVersion}, whereas @microsoft/rush-lib is version ${Rush.version}.` +\n              ` Consider upgrading the library.`\n          );\n        }\n      }\n    }\n\n    RushConfiguration._jsonSchema.validateObject(rushConfigurationJson, resolvedRushJsonFilename);\n\n    return new RushConfiguration(rushConfigurationJson, resolvedRushJsonFilename);\n  }\n\n  public static loadFromDefaultLocation(options?: ITryFindRushJsonLocationOptions): RushConfiguration {\n    const rushJsonLocation: string | undefined = RushConfiguration.tryFindRushJsonLocation(options);\n\n    if (rushJsonLocation) {\n      return RushConfiguration.loadFromConfigurationFile(rushJsonLocation);\n    } else {\n      throw Utilities.getRushConfigNotFoundError();\n    }\n  }\n\n  /**\n   * Find the rush.json location and return the path, or undefined if a rush.json can't be found.\n   *\n   * @privateRemarks\n   * Keep this in sync with `findRushJsonLocation` in `rush-sdk/src/index.ts`.\n   */\n  public static tryFindRushJsonLocation(options?: ITryFindRushJsonLocationOptions): string | undefined {\n    const optionsIn: ITryFindRushJsonLocationOptions = options || {};\n    const verbose: boolean = optionsIn.showVerbose || false;\n    let currentFolder: string = optionsIn.startingFolder || process.cwd();\n\n    // Look upwards at parent folders until we find a folder containing rush.json\n    for (let i: number = 0; i < 10; ++i) {\n      const rushJsonFilename: string = path.join(currentFolder, 'rush.json');\n\n      if (FileSystem.exists(rushJsonFilename)) {\n        if (i > 0 && verbose) {\n          console.log('Found configuration in ' + rushJsonFilename);\n        }\n\n        if (verbose) {\n          console.log('');\n        }\n\n        return rushJsonFilename;\n      }\n\n      const parentFolder: string = path.dirname(currentFolder);\n      if (parentFolder === currentFolder) {\n        break;\n      }\n\n      currentFolder = parentFolder;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * This generates the unique names that are used to create temporary projects\n   * in the Rush common folder.\n   * NOTE: sortedProjectJsons is sorted by the caller.\n   */\n  private static _generateTempNameForProject(\n    projectJson: IRushConfigurationProjectJson,\n    usedTempNames: Set<string>\n  ): string {\n    // If the name is \"@ms/MyProject\", extract the \"MyProject\" part\n    const unscopedName: string = PackageNameParsers.permissive.getUnscopedName(projectJson.packageName);\n\n    // Generate a unique like name \"@rush-temp/MyProject\", or \"@rush-temp/MyProject-2\" if\n    // there is a naming conflict\n    let counter: number = 0;\n    let tempProjectName: string = `${RushConstants.rushTempNpmScope}/${unscopedName}`;\n    while (usedTempNames.has(tempProjectName)) {\n      ++counter;\n      tempProjectName = `${RushConstants.rushTempNpmScope}/${unscopedName}-${counter}`;\n    }\n    usedTempNames.add(tempProjectName);\n\n    return tempProjectName;\n  }\n\n  /**\n   * If someone adds a config file in the \"common/rush/config\" folder, it would be a bad\n   * experience for Rush to silently ignore their file simply because they misspelled the\n   * filename, or maybe it's an old format that's no longer supported.  The\n   * _validateCommonRushConfigFolder() function makes sure that this folder only contains\n   * recognized config files.\n   */\n  private static _validateCommonRushConfigFolder(\n    commonRushConfigFolder: string,\n    packageManagerWrapper: PackageManager,\n    experiments: ExperimentsConfiguration\n  ): void {\n    if (!FileSystem.exists(commonRushConfigFolder)) {\n      console.log(`Creating folder: ${commonRushConfigFolder}`);\n      FileSystem.ensureFolder(commonRushConfigFolder);\n      return;\n    }\n\n    for (const filename of FileSystem.readFolderItemNames(commonRushConfigFolder)) {\n      // Ignore things that aren't actual files\n      const stat: FileSystemStats = FileSystem.getLinkStatistics(path.join(commonRushConfigFolder, filename));\n      if (!stat.isFile() && !stat.isSymbolicLink()) {\n        continue;\n      }\n\n      // Ignore harmless file extensions\n      const fileExtension: string = path.extname(filename);\n      if (['.bak', '.disabled', '.md', '.old', '.orig'].indexOf(fileExtension) >= 0) {\n        continue;\n      }\n\n      // Ignore hidden files such as \".DS_Store\"\n      if (filename.startsWith('.')) {\n        continue;\n      }\n\n      if (filename.startsWith('deploy-') && fileExtension === '.json') {\n        // Ignore \"rush deploy\" files, which use the naming pattern \"deploy-<scenario-name>.json\".\n        continue;\n      }\n\n      const knownSet: Set<string> = new Set<string>(knownRushConfigFilenames.map((x) => x.toUpperCase()));\n\n      // Add the shrinkwrap filename for the package manager to the known set.\n      knownSet.add(packageManagerWrapper.shrinkwrapFilename.toUpperCase());\n\n      // If the package manager is pnpm, then also add the pnpm file to the known set.\n      if (packageManagerWrapper.packageManager === 'pnpm') {\n        knownSet.add((packageManagerWrapper as PnpmPackageManager).pnpmfileFilename.toUpperCase());\n      }\n\n      // Is the filename something we know?  If not, report an error.\n      if (!knownSet.has(filename.toUpperCase())) {\n        throw new Error(\n          `An unrecognized file \"${filename}\" was found in the Rush config folder:` +\n            ` ${commonRushConfigFolder}`\n        );\n      }\n    }\n\n    const pinnedVersionsFilename: string = path.join(\n      commonRushConfigFolder,\n      RushConstants.pinnedVersionsFilename\n    );\n    if (FileSystem.exists(pinnedVersionsFilename)) {\n      throw new Error(\n        'The \"pinned-versions.json\" config file is no longer supported;' +\n          ' please move your settings to the \"preferredVersions\" field of a \"common-versions.json\" config file.' +\n          ` (See the ${RushConstants.rushWebSiteUrl} documentation for details.)\\n\\n` +\n          pinnedVersionsFilename\n      );\n    }\n  }\n\n  /**\n   * The name of the package manager being used to install dependencies\n   */\n  public get packageManager(): PackageManagerName {\n    return this._packageManager;\n  }\n\n  /**\n   * {@inheritdoc PackageManager}\n   *\n   * @privateremarks\n   * In the next major breaking API change, we will rename this property to \"packageManager\" and eliminate the\n   * old property with that name.\n   *\n   * @beta\n   */\n  public get packageManagerWrapper(): PackageManager {\n    return this._packageManagerWrapper;\n  }\n\n  /**\n   * Gets the JSON data structure for the \"rush.json\" configuration file.\n   *\n   * @internal\n   */\n  public get rushConfigurationJson(): IRushConfigurationJson {\n    return this._rushConfigurationJson;\n  }\n\n  /**\n   * The absolute path to the \"rush.json\" configuration file that was loaded to construct this object.\n   */\n  public get rushJsonFile(): string {\n    return this._rushJsonFile;\n  }\n\n  /**\n   * The absolute path of the folder that contains rush.json for this project.\n   */\n  public get rushJsonFolder(): string {\n    return this._rushJsonFolder;\n  }\n\n  /**\n   * The folder that contains all change files.\n   */\n  public get changesFolder(): string {\n    return this._changesFolder;\n  }\n\n  /**\n   * The fully resolved path for the \"common\" folder where Rush will store settings that\n   * affect all Rush projects.  This is always a subfolder of the folder containing \"rush.json\".\n   * Example: `C:\\MyRepo\\common`\n   */\n  public get commonFolder(): string {\n    return this._commonFolder;\n  }\n\n  /**\n   * The folder where Rush's additional config files are stored.  This folder is always a\n   * subfolder called `config\\rush` inside the common folder.  (The `common\\config` folder\n   * is reserved for configuration files used by other tools.)  To avoid confusion or mistakes,\n   * Rush will report an error if this this folder contains any unrecognized files.\n   *\n   * Example: `C:\\MyRepo\\common\\config\\rush`\n   */\n  public get commonRushConfigFolder(): string {\n    return this._commonRushConfigFolder;\n  }\n\n  /**\n   * The folder where temporary files will be stored.  This is always a subfolder called \"temp\"\n   * under the common folder.\n   * Example: `C:\\MyRepo\\common\\temp`\n   */\n  public get commonTempFolder(): string {\n    return this._commonTempFolder;\n  }\n\n  /**\n   * The folder where automation scripts are stored.  This is always a subfolder called \"scripts\"\n   * under the common folder.\n   * Example: `C:\\MyRepo\\common\\scripts`\n   */\n  public get commonScriptsFolder(): string {\n    return this._commonScriptsFolder;\n  }\n\n  /**\n   * The fully resolved path for the \"autoinstallers\" folder.\n   * Example: `C:\\MyRepo\\common\\autoinstallers`\n   */\n  public get commonAutoinstallersFolder(): string {\n    return path.join(this._commonFolder, 'autoinstallers');\n  }\n\n  /**\n   * The folder where rush-plugin options json files are stored.\n   * Example: `C:\\MyRepo\\common\\config\\rush-plugins`\n   */\n  public get rushPluginOptionsFolder(): string {\n    return path.join(this._commonFolder, 'config', 'rush-plugins');\n  }\n\n  /**\n   * The local folder that will store the NPM package cache.  Rush does not rely on the\n   * npm's default global cache folder, because npm's caching implementation does not\n   * reliably handle multiple processes.  (For example, if a build box is running\n   * \"rush install\" simultaneously for two different working folders, it may fail randomly.)\n   *\n   * Example: `C:\\MyRepo\\common\\temp\\npm-cache`\n   */\n  public get npmCacheFolder(): string {\n    return this._npmCacheFolder;\n  }\n\n  /**\n   * The local folder where npm's temporary files will be written during installation.\n   * Rush does not rely on the global default folder, because it may be on a different\n   * hard disk.\n   *\n   * Example: `C:\\MyRepo\\common\\temp\\npm-tmp`\n   */\n  public get npmTmpFolder(): string {\n    return this._npmTmpFolder;\n  }\n\n  /**\n   * The local folder that will store the Yarn package cache.\n   *\n   * Example: `C:\\MyRepo\\common\\temp\\yarn-cache`\n   */\n  public get yarnCacheFolder(): string {\n    return this._yarnCacheFolder;\n  }\n\n  /**\n   * The full path of the shrinkwrap file that is tracked by Git.  (The \"rush install\"\n   * command uses a temporary copy, whose path is tempShrinkwrapFilename.)\n   * @remarks\n   * This property merely reports the filename; the file itself may not actually exist.\n   * Example: `C:\\MyRepo\\common\\npm-shrinkwrap.json` or `C:\\MyRepo\\common\\pnpm-lock.yaml`\n   *\n   * @deprecated Use `getCommittedShrinkwrapFilename` instead, which gets the correct common\n   * shrinkwrap file name for a given active variant.\n   */\n  public get committedShrinkwrapFilename(): string {\n    return this.getCommittedShrinkwrapFilename();\n  }\n\n  /**\n   * The filename (without any path) of the shrinkwrap file that is used by the package manager.\n   * @remarks\n   * This property merely reports the filename; the file itself may not actually exist.\n   * Example: `npm-shrinkwrap.json` or `pnpm-lock.yaml`\n   */\n  public get shrinkwrapFilename(): string {\n    return this._shrinkwrapFilename;\n  }\n\n  /**\n   * The full path of the temporary shrinkwrap file that is used during \"rush install\".\n   * This file may get rewritten by the package manager during installation.\n   * @remarks\n   * This property merely reports the filename; the file itself may not actually exist.\n   * Example: `C:\\MyRepo\\common\\temp\\npm-shrinkwrap.json` or `C:\\MyRepo\\common\\temp\\pnpm-lock.yaml`\n   */\n  public get tempShrinkwrapFilename(): string {\n    return this._tempShrinkwrapFilename;\n  }\n\n  /**\n   * The full path of a backup copy of tempShrinkwrapFilename. This backup copy is made\n   * before installation begins, and can be compared to determine how the package manager\n   * modified tempShrinkwrapFilename.\n   * @remarks\n   * This property merely reports the filename; the file itself may not actually exist.\n   * Example: `C:\\MyRepo\\common\\temp\\npm-shrinkwrap-preinstall.json`\n   * or `C:\\MyRepo\\common\\temp\\pnpm-lock-preinstall.yaml`\n   */\n  public get tempShrinkwrapPreinstallFilename(): string {\n    return this._tempShrinkwrapPreinstallFilename;\n  }\n\n  /**\n   * Returns an English phrase such as \"shrinkwrap file\" that can be used in logging messages\n   * to refer to the shrinkwrap file using appropriate terminology for the currently selected\n   * package manager.\n   */\n  public get shrinkwrapFilePhrase(): string {\n    if (this._packageManager === 'yarn') {\n      // Eventually we'd like to be consistent with Yarn's terminology of calling this a \"lock file\",\n      // but a lot of Rush documentation uses \"shrinkwrap\" file and would all need to be updated.\n      return 'shrinkwrap file (yarn.lock)';\n    } else {\n      return 'shrinkwrap file';\n    }\n  }\n\n  /**\n   * The filename of the build dependency data file.  By default this is\n   * called 'rush-link.json' resides in the Rush common folder.\n   * Its data structure is defined by IRushLinkJson.\n   *\n   * Example: `C:\\MyRepo\\common\\temp\\rush-link.json`\n   *\n   * @deprecated The \"rush-link.json\" file was removed in Rush 5.30.0.\n   * Use `RushConfigurationProject.localDependencyProjects` instead.\n   */\n  public get rushLinkJsonFilename(): string {\n    throw new Error(\n      'The \"rush-link.json\" file was removed in Rush 5.30.0. Use ' +\n        'RushConfigurationProject.localDependencyProjects instead.'\n    );\n  }\n\n  /**\n   * The filename of the variant dependency data file.  By default this is\n   * called 'current-variant.json' resides in the Rush common folder.\n   * Its data structure is defined by ICurrentVariantJson.\n   *\n   * Example: `C:\\MyRepo\\common\\temp\\current-variant.json`\n   */\n  public get currentVariantJsonFilename(): string {\n    return this._currentVariantJsonFilename;\n  }\n\n  /**\n   * The version of the locally installed NPM tool.  (Example: \"1.2.3\")\n   */\n  public get packageManagerToolVersion(): string {\n    return this._packageManagerToolVersion;\n  }\n\n  /**\n   * The absolute path to the locally installed NPM tool.  If \"rush install\" has not\n   * been run, then this file may not exist yet.\n   * Example: `C:\\MyRepo\\common\\temp\\npm-local\\node_modules\\.bin\\npm`\n   */\n  public get packageManagerToolFilename(): string {\n    return this._packageManagerToolFilename;\n  }\n\n  /**\n   * The minimum allowable folder depth for the projectFolder field in the rush.json file.\n   * This setting provides a way for repository maintainers to discourage nesting of project folders\n   * that makes the directory tree more difficult to navigate.  The default value is 2,\n   * which implements a standard 2-level hierarchy of <categoryFolder>/<projectFolder>/package.json.\n   */\n  public get projectFolderMinDepth(): number {\n    return this._projectFolderMinDepth;\n  }\n\n  /**\n   * The maximum allowable folder depth for the projectFolder field in the rush.json file.\n   * This setting provides a way for repository maintainers to discourage nesting of project folders\n   * that makes the directory tree more difficult to navigate.  The default value is 2,\n   * which implements on a standard convention of <categoryFolder>/<projectFolder>/package.json.\n   */\n  public get projectFolderMaxDepth(): number {\n    return this._projectFolderMaxDepth;\n  }\n\n  /**\n   * Today the npmjs.com registry enforces fairly strict naming rules for packages, but in the early\n   * days there was no standard and hardly any enforcement.  A few large legacy projects are still using\n   * nonstandard package names, and private registries sometimes allow it.  Set \"allowMostlyStandardPackageNames\"\n   * to true to relax Rush's enforcement of package names.  This allows upper case letters and in the future may\n   * relax other rules, however we want to minimize these exceptions.  Many popular tools use certain punctuation\n   * characters as delimiters, based on the assumption that they will never appear in a package name; thus if we relax\n   * the rules too much it is likely to cause very confusing malfunctions.\n   *\n   * The default value is false.\n   */\n  public get allowMostlyStandardPackageNames(): boolean {\n    return this._allowMostlyStandardPackageNames;\n  }\n\n  /**\n   * The \"approvedPackagesPolicy\" settings.\n   */\n  public get approvedPackagesPolicy(): ApprovedPackagesPolicy {\n    return this._approvedPackagesPolicy;\n  }\n\n  /**\n   * [Part of the \"gitPolicy\" feature.]\n   * A list of regular expressions describing allowable email patterns for Git commits.\n   * They are case-insensitive anchored JavaScript RegExps.\n   * Example: `\".*@example\\.com\"`\n   * This array will never be undefined.\n   */\n  public get gitAllowedEmailRegExps(): string[] {\n    return this._gitAllowedEmailRegExps;\n  }\n\n  /**\n   * [Part of the \"gitPolicy\" feature.]\n   * An example valid email address that conforms to one of the allowedEmailRegExps.\n   * Example: `\"foxtrot@example\\.com\"`\n   * This will never be undefined, and will always be nonempty if gitAllowedEmailRegExps is used.\n   */\n  public get gitSampleEmail(): string {\n    return this._gitSampleEmail;\n  }\n\n  /**\n   * [Part of the \"gitPolicy\" feature.]\n   * The commit message to use when committing changes during 'rush publish'\n   */\n  public get gitVersionBumpCommitMessage(): string | undefined {\n    return this._gitVersionBumpCommitMessage;\n  }\n\n  /**\n   * [Part of the \"gitPolicy\" feature.]\n   * The commit message to use when committing change log files 'rush version'\n   */\n  public get gitChangeLogUpdateCommitMessage(): string | undefined {\n    return this._gitChangeLogUpdateCommitMessage;\n  }\n\n  /**\n   * [Part of the \"gitPolicy\" feature.]\n   * The separator between package name and version in git tag.\n   */\n  public get gitTagSeparator(): string | undefined {\n    return this._gitTagSeparator;\n  }\n\n  /**\n   * [Part of the \"hotfixChange\" feature.]\n   * Enables creating hotfix changes\n   */\n  public get hotfixChangeEnabled(): boolean {\n    return this._hotfixChangeEnabled;\n  }\n\n  /**\n   * Remote URL(s) of the repository. If a value is provided, \\\"rush change\\\" will\n   * use one of these to find the right remote to compare against. Specifying multiple URLs\n   * is useful if a GitHub repository is renamed or for \"<projectName>.visualstudio.com\" vs\n   * \"dev.azure.com/<projectName>\" URLs.\n   */\n  public get repositoryUrls(): string[] {\n    return this._repositoryUrls;\n  }\n\n  /**\n   * The default branch name. This tells \"rush change\" which remote branch to compare against.\n   */\n  public get repositoryDefaultBranch(): string {\n    return this._repositoryDefaultBranch;\n  }\n\n  /**\n   * The default remote. This tells \"rush change\" which remote to compare against if the remote URL is not set\n   * or if a remote matching the provided remote URL is not found.\n   */\n  public get repositoryDefaultRemote(): string {\n    return this._repositoryDefaultRemote;\n  }\n\n  /**\n   * The default fully-qualified git remote branch of the repository. This helps \"rush change\" find the right branch to compare against.\n   */\n  public get repositoryDefaultFullyQualifiedRemoteBranch(): string {\n    return `${this.repositoryDefaultRemote}/${this.repositoryDefaultBranch}`;\n  }\n\n  /**\n   * Odd-numbered major versions of Node.js are experimental.  Even-numbered releases\n   * spend six months in a stabilization period before the first Long Term Support (LTS) version.\n   * For example, 8.9.0 was the first LTS version of Node.js 8.  Pre-LTS versions are not recommended\n   * for production usage because they frequently have bugs.  They may cause Rush itself\n   * to malfunction.\n   *\n   * Rush normally prints a warning if it detects a pre-LTS Node.js version.  If you are testing\n   * pre-LTS versions in preparation for supporting the first LTS version, you can use this setting\n   * to disable Rush's warning.\n   */\n  public get suppressNodeLtsWarning(): boolean {\n    return this._suppressNodeLtsWarning;\n  }\n\n  /**\n   * If true, then consistent version specifiers for dependencies will be enforced.\n   * I.e. \"rush check\" is run before some commands.\n   */\n  public get ensureConsistentVersions(): boolean {\n    return this._ensureConsistentVersions;\n  }\n\n  /**\n   * Indicates whether telemetry collection is enabled for Rush runs.\n   * @beta\n   */\n  public get telemetryEnabled(): boolean {\n    return this._telemetryEnabled;\n  }\n\n  public get projects(): RushConfigurationProject[] {\n    if (!this._projects) {\n      this._initializeAndValidateLocalProjects();\n    }\n\n    return this._projects!;\n  }\n\n  public get projectsByName(): Map<string, RushConfigurationProject> {\n    if (!this._projectsByName) {\n      this._initializeAndValidateLocalProjects();\n    }\n\n    return this._projectsByName!;\n  }\n\n  /**\n   * Obtains the mapping from custom tags to projects.\n   * @beta\n   */\n  public get projectsByTag(): ReadonlyMap<string, ReadonlySet<RushConfigurationProject>> {\n    if (!this._projectsByTag) {\n      const projectsByTag: Map<string, Set<RushConfigurationProject>> = new Map();\n      for (const project of this.projects) {\n        for (const tag of project.tags) {\n          let collection: Set<RushConfigurationProject> | undefined = projectsByTag.get(tag);\n          if (!collection) {\n            projectsByTag.set(tag, (collection = new Set()));\n          }\n          collection.add(project);\n        }\n      }\n      this._projectsByTag = projectsByTag;\n    }\n    return this._projectsByTag;\n  }\n\n  /**\n   * {@inheritDoc NpmOptionsConfiguration}\n   */\n  public get npmOptions(): NpmOptionsConfiguration {\n    return this._npmOptions;\n  }\n\n  /**\n   * {@inheritDoc PnpmOptionsConfiguration}\n   */\n  public get pnpmOptions(): PnpmOptionsConfiguration {\n    return this._pnpmOptions;\n  }\n\n  /**\n   * {@inheritDoc YarnOptionsConfiguration}\n   */\n  public get yarnOptions(): YarnOptionsConfiguration {\n    return this._yarnOptions;\n  }\n\n  /**\n   * The configuration options used by the current package manager.\n   * @remarks\n   * For package manager specific variants, reference {@link RushConfiguration.npmOptions | npmOptions},\n   * {@link RushConfiguration.pnpmOptions | pnpmOptions}, or {@link RushConfiguration.yarnOptions | yarnOptions}.\n   */\n  public get packageManagerOptions(): PackageManagerOptionsConfigurationBase {\n    return this._packageManagerConfigurationOptions;\n  }\n\n  /**\n   * Settings from the common-versions.json config file.\n   * @remarks\n   * If the common-versions.json file is missing, this property will not be undefined.\n   * Instead it will be initialized in an empty state, and calling CommonVersionsConfiguration.save()\n   * will create the file.\n   *\n   * @deprecated Use `getCommonVersions` instead, which gets the correct common version data\n   * for a given active variant.\n   */\n  public get commonVersions(): CommonVersionsConfiguration {\n    return this.getCommonVersions();\n  }\n\n  /**\n   * Gets the currently-installed variant, if an installation has occurred.\n   * For Rush operations which do not take a --variant parameter, this method\n   * determines which variant, if any, was last specified when performing \"rush install\"\n   * or \"rush update\".\n   */\n  public get currentInstalledVariant(): string | undefined {\n    let variant: string | undefined;\n\n    if (FileSystem.exists(this._currentVariantJsonFilename)) {\n      const currentVariantJson: ICurrentVariantJson = JsonFile.load(this._currentVariantJsonFilename);\n\n      variant = currentVariantJson.variant || undefined;\n    }\n\n    return variant;\n  }\n\n  /**\n   * The rush hooks. It allows customized scripts to run at the specified point.\n   * @beta\n   */\n  public get eventHooks(): EventHooks {\n    return this._eventHooks;\n  }\n\n  /**\n   * The rush hooks. It allows customized scripts to run at the specified point.\n   */\n  public get packageNameParser(): PackageNameParser {\n    return this._packageNameParser;\n  }\n\n  /**\n   * Gets the path to the common-versions.json config file for a specific variant.\n   * @param variant - The name of the current variant in use by the active command.\n   */\n  public getCommonVersionsFilePath(variant?: string | undefined): string {\n    const commonVersionsFilename: string = path.join(\n      this.commonRushConfigFolder,\n      ...(variant ? [RushConstants.rushVariantsFolderName, variant] : []),\n      RushConstants.commonVersionsFilename\n    );\n    return commonVersionsFilename;\n  }\n\n  /**\n   * Gets the settings from the common-versions.json config file for a specific variant.\n   * @param variant - The name of the current variant in use by the active command.\n   */\n  public getCommonVersions(variant?: string | undefined): CommonVersionsConfiguration {\n    if (!this._commonVersionsConfigurationsByVariant) {\n      this._commonVersionsConfigurationsByVariant = new Map();\n    }\n\n    // Use an empty string as the key when no variant provided. Anything else would possibly conflict\n    // with a variant created by the user\n    const variantKey: string = variant || '';\n    let commonVersionsConfiguration: CommonVersionsConfiguration | undefined =\n      this._commonVersionsConfigurationsByVariant.get(variantKey);\n    if (!commonVersionsConfiguration) {\n      const commonVersionsFilename: string = this.getCommonVersionsFilePath(variant);\n      commonVersionsConfiguration = CommonVersionsConfiguration.loadFromFile(commonVersionsFilename);\n      this._commonVersionsConfigurationsByVariant.set(variantKey, commonVersionsConfiguration);\n    }\n\n    return commonVersionsConfiguration;\n  }\n\n  /**\n   * Returns a map of all direct dependencies that only have a single semantic version specifier.\n   * @param variant - The name of the current variant in use by the active command.\n   *\n   * @returns A map of dependency name --\\> version specifier for implicitly preferred versions.\n   */\n  public getImplicitlyPreferredVersions(variant?: string | undefined): Map<string, string> {\n    const dependencyAnalyzer: DependencyAnalyzerModuleType.DependencyAnalyzer =\n      DependencyAnalyzerModule.DependencyAnalyzer.forRushConfiguration(this);\n    const dependencyAnalysis: DependencyAnalyzerModuleType.IDependencyAnalysis =\n      dependencyAnalyzer.getAnalysis(variant);\n    return dependencyAnalysis.implicitlyPreferredVersionByPackageName;\n  }\n\n  /**\n   * Gets the path to the repo-state.json file for a specific variant.\n   * @param variant - The name of the current variant in use by the active command.\n   */\n  public getRepoStateFilePath(variant?: string | undefined): string {\n    const repoStateFilename: string = path.join(\n      this.commonRushConfigFolder,\n      ...(variant ? [RushConstants.rushVariantsFolderName, variant] : []),\n      RushConstants.repoStateFilename\n    );\n    return repoStateFilename;\n  }\n\n  /**\n   * Gets the contents from the repo-state.json file for a specific variant.\n   * @param variant - The name of the current variant in use by the active command.\n   */\n  public getRepoState(variant?: string | undefined): RepoStateFile {\n    const repoStateFilename: string = this.getRepoStateFilePath(variant);\n    return RepoStateFile.loadFromFile(repoStateFilename, variant);\n  }\n\n  /**\n   * Gets the committed shrinkwrap file name for a specific variant.\n   * @param variant - The name of the current variant in use by the active command.\n   */\n  public getCommittedShrinkwrapFilename(variant?: string | undefined): string {\n    if (variant) {\n      if (!this._variants.has(variant)) {\n        throw new Error(\n          `Invalid variant name '${variant}'. The provided variant parameter needs to be ` +\n            `one of the following from rush.json: ` +\n            `${Array.from(this._variants.values())\n              .map((name: string) => `\"${name}\"`)\n              .join(', ')}.`\n        );\n      }\n    }\n\n    const variantConfigFolderPath: string = this._getVariantConfigFolderPath(variant);\n\n    return path.join(variantConfigFolderPath, this._shrinkwrapFilename);\n  }\n\n  /**\n   * Gets the absolute path for \"pnpmfile.js\" for a specific variant.\n   * @param variant - The name of the current variant in use by the active command.\n   * @remarks\n   * The file path is returned even if PNPM is not configured as the package manager.\n   */\n  public getPnpmfilePath(variant?: string | undefined): string {\n    const variantConfigFolderPath: string = this._getVariantConfigFolderPath(variant);\n\n    return path.join(\n      variantConfigFolderPath,\n      (this.packageManagerWrapper as PnpmPackageManager).pnpmfileFilename\n    );\n  }\n\n  /**\n   * Looks up a project in the projectsByName map.  If the project is not found,\n   * then undefined is returned.\n   */\n  public getProjectByName(projectName: string): RushConfigurationProject | undefined {\n    return this.projectsByName.get(projectName);\n  }\n\n  /**\n   * This is used e.g. by command-line interfaces such as \"rush build --to example\".\n   * If \"example\" is not a project name, then it also looks for a scoped name\n   * like `@something/example`.  If exactly one project matches this heuristic, it\n   * is returned.  Otherwise, undefined is returned.\n   */\n  public findProjectByShorthandName(shorthandProjectName: string): RushConfigurationProject | undefined {\n    // Is there an exact match?\n    let result: RushConfigurationProject | undefined = this.projectsByName.get(shorthandProjectName);\n    if (result) {\n      return result;\n    }\n\n    // Is there an approximate match?\n    for (const project of this.projects) {\n      if (this.packageNameParser.getUnscopedName(project.packageName) === shorthandProjectName) {\n        if (result) {\n          // Ambiguous -- there is more than one match\n          return undefined;\n        } else {\n          result = project;\n        }\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Looks up a project by its RushConfigurationProject.tempProjectName field.\n   * @returns The found project, or undefined if no match was found.\n   */\n  public findProjectByTempName(tempProjectName: string): RushConfigurationProject | undefined {\n    // Is there an approximate match?\n    for (const project of this.projects) {\n      if (project.tempProjectName === tempProjectName) {\n        return project;\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * @returns An optimized lookup engine to find a project by its path relative to the specified root.\n   * @beta\n   */\n  public getProjectLookupForRoot(rootPath: string): LookupByPath<RushConfigurationProject> {\n    let pathTree: LookupByPath<RushConfigurationProject> | undefined = this._pathTrees.get(rootPath);\n    if (!pathTree) {\n      this._pathTrees.set(rootPath, (pathTree = new LookupByPath()));\n      for (const project of this.projects) {\n        const relativePath: string = path.relative(rootPath, project.projectFolder);\n        pathTree.setItemFromSegments(LookupByPath.iteratePathSegments(relativePath, path.sep), project);\n      }\n    }\n    return pathTree;\n  }\n\n  /**\n   * @beta\n   */\n  public get versionPolicyConfiguration(): VersionPolicyConfiguration {\n    return this._versionPolicyConfiguration;\n  }\n\n  /**\n   * @beta\n   */\n  public get versionPolicyConfigurationFilePath(): string {\n    return this._versionPolicyConfigurationFilePath;\n  }\n\n  /**\n   * This configuration object contains settings repo maintainers have specified to enable\n   * and disable experimental Rush features.\n   *\n   * @beta\n   */\n  public get experimentsConfiguration(): ExperimentsConfiguration {\n    return this._experimentsConfiguration;\n  }\n\n  /**\n   * @internal\n   */\n  public get _rushPluginsConfiguration(): RushPluginsConfiguration {\n    return this.__rushPluginsConfiguration;\n  }\n\n  /**\n   * Returns the project for which the specified path is underneath that project's folder.\n   * If the path is not under any project's folder, returns undefined.\n   */\n  public tryGetProjectForPath(currentFolderPath: string): RushConfigurationProject | undefined {\n    const resolvedPath: string = path.resolve(currentFolderPath);\n    for (const project of this.projects) {\n      if (Path.isUnderOrEqual(resolvedPath, project.projectFolder)) {\n        return project;\n      }\n    }\n    return undefined;\n  }\n\n  private _getVariantConfigFolderPath(variant?: string | undefined): string {\n    if (variant) {\n      if (!this._variants.has(variant)) {\n        throw new Error(\n          `Invalid variant name '${variant}'. The provided variant parameter needs to be ` +\n            `one of the following from rush.json: ` +\n            `${Array.from(this._variants.values())\n              .map((name: string) => `\"${name}\"`)\n              .join(', ')}.`\n        );\n      }\n    }\n\n    return path.join(\n      this._commonRushConfigFolder,\n      ...(variant ? [RushConstants.rushVariantsFolderName, variant] : [])\n    );\n  }\n}\n"]}