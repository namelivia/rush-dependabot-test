{"version":3,"file":"PhasedScriptAction.js","sourceRoot":"","sources":["../../../src/cli/scriptActions/PhasedScriptAction.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as os from 'os';\nimport colors from 'colors/safe';\nimport type { AsyncSeriesHook } from 'tapable';\n\nimport { AlreadyReportedError, InternalError, Terminal } from '@rushstack/node-core-library';\nimport {\n  CommandLineFlagParameter,\n  CommandLineParameter,\n  CommandLineStringParameter\n} from '@rushstack/ts-command-line';\n\nimport type { IPhasedCommand } from '../../pluginFramework/RushLifeCycle';\nimport { PhasedCommandHooks, ICreateOperationsContext } from '../../pluginFramework/PhasedCommandHooks';\nimport { SetupChecks } from '../../logic/SetupChecks';\nimport { Stopwatch, StopwatchState } from '../../utilities/Stopwatch';\nimport { BaseScriptAction, IBaseScriptActionOptions } from './BaseScriptAction';\nimport {\n  IOperationExecutionManagerOptions,\n  OperationExecutionManager\n} from '../../logic/operations/OperationExecutionManager';\nimport { RushConstants } from '../../logic/RushConstants';\nimport { EnvironmentVariableNames } from '../../api/EnvironmentConfiguration';\nimport { LastLinkFlag, LastLinkFlagFactory } from '../../api/LastLinkFlag';\nimport { RushConfigurationProject } from '../../api/RushConfigurationProject';\nimport { BuildCacheConfiguration } from '../../api/BuildCacheConfiguration';\nimport { SelectionParameterSet } from '../SelectionParameterSet';\nimport type { IPhase, IPhasedCommandConfig } from '../../api/CommandLineConfiguration';\nimport { Operation } from '../../logic/operations/Operation';\nimport { PhasedOperationPlugin } from '../../logic/operations/PhasedOperationPlugin';\nimport { ShellOperationRunnerPlugin } from '../../logic/operations/ShellOperationRunnerPlugin';\nimport { Event } from '../../api/EventHooks';\nimport { ProjectChangeAnalyzer } from '../../logic/ProjectChangeAnalyzer';\nimport { OperationStatus } from '../../logic/operations/OperationStatus';\nimport { IExecutionResult } from '../../logic/operations/IOperationExecutionResult';\nimport { OperationResultSummarizerPlugin } from '../../logic/operations/OperationResultSummarizerPlugin';\n\n/**\n * Constructor parameters for BulkScriptAction.\n */\nexport interface IPhasedScriptActionOptions extends IBaseScriptActionOptions<IPhasedCommandConfig> {\n  enableParallelism: boolean;\n  incremental: boolean;\n  disableBuildCache: boolean;\n\n  initialPhases: Set<IPhase>;\n  watchPhases: Set<IPhase>;\n  phases: Map<string, IPhase>;\n\n  alwaysWatch: boolean;\n  alwaysInstall: boolean | undefined;\n}\n\ninterface IRunPhasesOptions {\n  initialCreateOperationsContext: ICreateOperationsContext;\n  executionManagerOptions: IOperationExecutionManagerOptions;\n  stopwatch: Stopwatch;\n  terminal: Terminal;\n}\n\ninterface IExecutionOperationsOptions {\n  createOperationsContext: ICreateOperationsContext;\n  executionManagerOptions: IOperationExecutionManagerOptions;\n  ignoreHooks: boolean;\n  operations: Set<Operation>;\n  stopwatch: Stopwatch;\n  terminal: Terminal;\n}\n\ninterface IPhasedCommandTelemetry {\n  [key: string]: string | number | boolean;\n  isInitial: boolean;\n  isWatch: boolean;\n\n  countAll: number;\n  countSuccess: number;\n  countSuccessWithWarnings: number;\n  countFailure: number;\n  countBlocked: number;\n  countFromCache: number;\n  countSkipped: number;\n  countNoOp: number;\n}\n\n/**\n * This class implements phased commands which are run individually for each project in the repo,\n * possibly in parallel, and which may define multiple phases.\n *\n * @remarks\n * Phased commands can be defined via common/config/command-line.json.  Rush's predefined \"build\"\n * and \"rebuild\" commands are also modeled as phased commands with a single phase that invokes the npm\n * \"build\" script for each project.\n */\nexport class PhasedScriptAction extends BaseScriptAction<IPhasedCommandConfig> {\n  public readonly hooks: PhasedCommandHooks;\n\n  private readonly _enableParallelism: boolean;\n  private readonly _isIncrementalBuildAllowed: boolean;\n  private readonly _disableBuildCache: boolean;\n  private readonly _initialPhases: ReadonlySet<IPhase>;\n  private readonly _watchPhases: ReadonlySet<IPhase>;\n  private readonly _alwaysWatch: boolean;\n  private readonly _alwaysInstall: boolean | undefined;\n  private readonly _knownPhases: ReadonlyMap<string, IPhase>;\n\n  private _changedProjectsOnly!: CommandLineFlagParameter;\n  private _selectionParameters!: SelectionParameterSet;\n  private _verboseParameter!: CommandLineFlagParameter;\n  private _parallelismParameter: CommandLineStringParameter | undefined;\n  private _ignoreHooksParameter!: CommandLineFlagParameter;\n  private _watchParameter: CommandLineFlagParameter | undefined;\n  private _timelineParameter: CommandLineFlagParameter | undefined;\n  private _installParameter: CommandLineFlagParameter | undefined;\n\n  public constructor(options: IPhasedScriptActionOptions) {\n    super(options);\n    this._enableParallelism = options.enableParallelism;\n    this._isIncrementalBuildAllowed = options.incremental;\n    this._disableBuildCache = options.disableBuildCache;\n    this._initialPhases = options.initialPhases;\n    this._watchPhases = options.watchPhases;\n    this._alwaysWatch = options.alwaysWatch;\n    this._alwaysInstall = options.alwaysInstall;\n    this._knownPhases = options.phases;\n\n    this.hooks = new PhasedCommandHooks();\n\n    // Generates the default operation graph\n    new PhasedOperationPlugin().apply(this.hooks);\n    // Applies the Shell Operation Runner to selected operations\n    new ShellOperationRunnerPlugin().apply(this.hooks);\n  }\n\n  public async runAsync(): Promise<void> {\n    if (this._alwaysInstall || this._installParameter?.value) {\n      const { doBasicInstallAsync } = await import('../../logic/installManager/doBasicInstallAsync');\n\n      await doBasicInstallAsync({\n        rushConfiguration: this.rushConfiguration,\n        rushGlobalFolder: this.rushGlobalFolder,\n        isDebug: this.parser.isDebug\n      });\n    }\n\n    // TODO: Replace with last-install.flag when \"rush link\" and \"rush unlink\" are deprecated\n    const lastLinkFlag: LastLinkFlag = LastLinkFlagFactory.getCommonTempFlag(this.rushConfiguration);\n    if (!lastLinkFlag.isValid()) {\n      const useWorkspaces: boolean =\n        this.rushConfiguration.pnpmOptions && this.rushConfiguration.pnpmOptions.useWorkspaces;\n      if (useWorkspaces) {\n        throw new Error(`Link flag invalid.${os.EOL}Did you run \"rush install\" or \"rush update\"?`);\n      } else {\n        throw new Error(`Link flag invalid.${os.EOL}Did you run \"rush link\"?`);\n      }\n    }\n\n    this._doBeforeTask();\n\n    const stopwatch: Stopwatch = Stopwatch.start();\n\n    const terminal: Terminal = new Terminal(this.rushSession.terminalProvider);\n\n    const showTimeline: boolean = this._timelineParameter ? this._timelineParameter.value : false;\n    if (showTimeline) {\n      const { ConsoleTimelinePlugin } = await import('../../logic/operations/ConsoleTimelinePlugin');\n      new ConsoleTimelinePlugin(terminal).apply(this.hooks);\n    }\n    // Enable the standard summary\n    new OperationResultSummarizerPlugin(terminal).apply(this.hooks);\n\n    const { hooks: sessionHooks } = this.rushSession;\n    if (sessionHooks.runAnyPhasedCommand.isUsed()) {\n      // Avoid the cost of compiling the hook if it wasn't tapped.\n      await sessionHooks.runAnyPhasedCommand.promise(this);\n    }\n\n    const hookForAction: AsyncSeriesHook<IPhasedCommand> | undefined = sessionHooks.runPhasedCommand.get(\n      this.actionName\n    );\n\n    if (hookForAction) {\n      // Run the more specific hook for a command with this name after the general hook\n      await hookForAction.promise(this);\n    }\n\n    const isQuietMode: boolean = !this._verboseParameter.value;\n\n    // if this is parallelizable, then use the value from the flag (undefined or a number),\n    // if parallelism is not enabled, then restrict to 1 core\n    const parallelism: string | undefined = this._enableParallelism ? this._parallelismParameter!.value : '1';\n\n    const changedProjectsOnly: boolean = this._isIncrementalBuildAllowed && this._changedProjectsOnly.value;\n\n    let buildCacheConfiguration: BuildCacheConfiguration | undefined;\n    if (!this._disableBuildCache) {\n      buildCacheConfiguration = await BuildCacheConfiguration.tryLoadAsync(\n        terminal,\n        this.rushConfiguration,\n        this.rushSession\n      );\n    }\n\n    const projectSelection: Set<RushConfigurationProject> =\n      await this._selectionParameters.getSelectedProjectsAsync(terminal);\n\n    if (!projectSelection.size) {\n      terminal.writeLine(colors.yellow(`The command line selection parameters did not match any projects.`));\n      return;\n    }\n\n    const isWatch: boolean = this._watchParameter?.value || this._alwaysWatch;\n\n    const customParametersByName: Map<string, CommandLineParameter> = new Map();\n    for (const [configParameter, parserParameter] of this.customParameters) {\n      customParametersByName.set(configParameter.longName, parserParameter);\n    }\n\n    const initialCreateOperationsContext: ICreateOperationsContext = {\n      buildCacheConfiguration,\n      customParameters: customParametersByName,\n      isIncrementalBuildAllowed: this._isIncrementalBuildAllowed,\n      isInitial: true,\n      isWatch,\n      rushConfiguration: this.rushConfiguration,\n      phaseSelection: new Set(this._initialPhases),\n      projectChangeAnalyzer: new ProjectChangeAnalyzer(this.rushConfiguration),\n      projectSelection,\n      projectsInUnknownState: projectSelection\n    };\n\n    const executionManagerOptions: IOperationExecutionManagerOptions = {\n      quietMode: isQuietMode,\n      debugMode: this.parser.isDebug,\n      parallelism,\n      changedProjectsOnly\n    };\n\n    const internalOptions: IRunPhasesOptions = {\n      initialCreateOperationsContext,\n      executionManagerOptions,\n      stopwatch,\n      terminal\n    };\n\n    await this._runInitialPhases(internalOptions);\n\n    if (isWatch) {\n      if (buildCacheConfiguration) {\n        // Cache writes are not supported during watch mode, only reads.\n        buildCacheConfiguration.cacheWriteEnabled = false;\n      }\n\n      await this._runWatchPhases(internalOptions);\n    }\n  }\n\n  private async _runInitialPhases(options: IRunPhasesOptions): Promise<void> {\n    const { initialCreateOperationsContext, executionManagerOptions, stopwatch, terminal } = options;\n\n    const operations: Set<Operation> = await this.hooks.createOperations.promise(\n      new Set(),\n      initialCreateOperationsContext\n    );\n\n    const initialOptions: IExecutionOperationsOptions = {\n      createOperationsContext: initialCreateOperationsContext,\n      ignoreHooks: false,\n      operations,\n      stopwatch,\n      executionManagerOptions,\n      terminal\n    };\n\n    await this._executeOperations(initialOptions);\n  }\n\n  /**\n   * Runs the command in watch mode. Fundamentally is a simple loop:\n   * 1) Wait for a change to one or more projects in the selection\n   * 2) Invoke the command on the changed projects, and, if applicable, impacted projects\n   *    Uses the same algorithm as --impacted-by\n   * 3) Goto (1)\n   */\n  private async _runWatchPhases(options: IRunPhasesOptions): Promise<void> {\n    const { initialCreateOperationsContext, executionManagerOptions, stopwatch, terminal } = options;\n\n    const phaseSelection: Set<IPhase> = new Set(this._watchPhases);\n\n    const { projectChangeAnalyzer: initialState, projectSelection: projectsToWatch } =\n      initialCreateOperationsContext;\n\n    // Use async import so that we don't pay the cost for sync builds\n    const { ProjectWatcher } = await import('../../logic/ProjectWatcher');\n\n    const projectWatcher: typeof ProjectWatcher.prototype = new ProjectWatcher({\n      debounceMilliseconds: 1000,\n      rushConfiguration: this.rushConfiguration,\n      projectsToWatch,\n      terminal,\n      initialState\n    });\n\n    const onWaitingForChanges = (): void => {\n      // Allow plugins to display their own messages when waiting for changes.\n      this.hooks.waitingForChanges.call();\n\n      // Report so that the developer can always see that it is in watch mode as the latest console line.\n      terminal.writeLine(\n        `Watching for changes to ${projectsToWatch.size} ${\n          projectsToWatch.size === 1 ? 'project' : 'projects'\n        }. Press Ctrl+C to exit.`\n      );\n    };\n\n    // Loop until Ctrl+C\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      // On the initial invocation, this promise will return immediately with the full set of projects\n      const { changedProjects, state } = await projectWatcher.waitForChange(onWaitingForChanges);\n\n      if (stopwatch.state === StopwatchState.Stopped) {\n        // Clear and reset the stopwatch so that we only report time from a single execution at a time\n        stopwatch.reset();\n        stopwatch.start();\n      }\n\n      terminal.writeLine(\n        `Detected changes in ${changedProjects.size} project${changedProjects.size === 1 ? '' : 's'}:`\n      );\n      const names: string[] = [...changedProjects].map((x) => x.packageName).sort();\n      for (const name of names) {\n        terminal.writeLine(`    ${colors.cyan(name)}`);\n      }\n\n      // Account for consumer relationships\n      const createOperationsContext: ICreateOperationsContext = {\n        ...initialCreateOperationsContext,\n        isInitial: false,\n        projectChangeAnalyzer: state,\n        projectsInUnknownState: changedProjects,\n        phaseSelection\n      };\n\n      const operations: Set<Operation> = await this.hooks.createOperations.promise(\n        new Set(),\n        createOperationsContext\n      );\n\n      const executeOptions: IExecutionOperationsOptions = {\n        createOperationsContext,\n        // For now, don't run pre-build or post-build in watch mode\n        ignoreHooks: true,\n        operations,\n        stopwatch,\n        executionManagerOptions,\n        terminal\n      };\n\n      try {\n        // Delegate the the underlying command, for only the projects that need reprocessing\n        await this._executeOperations(executeOptions);\n      } catch (err) {\n        // In watch mode, we want to rebuild even if the original build failed.\n        if (!(err instanceof AlreadyReportedError)) {\n          throw err;\n        }\n      }\n    }\n  }\n\n  protected onDefineParameters(): void {\n    if (this._enableParallelism) {\n      this._parallelismParameter = this.defineStringParameter({\n        parameterLongName: '--parallelism',\n        parameterShortName: '-p',\n        argumentName: 'COUNT',\n        environmentVariable: EnvironmentVariableNames.RUSH_PARALLELISM,\n        description:\n          'Specifies the maximum number of concurrent processes to launch during a build.' +\n          ' The COUNT should be a positive integer, a percentage value (eg. \"50%%\") or the word \"max\"' +\n          ' to specify a count that is equal to the number of CPU cores. If this parameter is omitted,' +\n          ' then the default value depends on the operating system and number of CPU cores.'\n      });\n      this._timelineParameter = this.defineFlagParameter({\n        parameterLongName: '--timeline',\n        description:\n          'After the build is complete, print additional statistics and CPU usage information,' +\n          ' including an ASCII chart of the start and stop times for each operation.'\n      });\n    }\n\n    this._selectionParameters = new SelectionParameterSet(this.rushConfiguration, this, {\n      // Include lockfile processing since this expands the selection, and we need to select\n      // at least the same projects selected with the same query to \"rush build\"\n      includeExternalDependencies: true,\n      // Enable filtering to reduce evaluation cost\n      enableFiltering: true\n    });\n\n    this._verboseParameter = this.defineFlagParameter({\n      parameterLongName: '--verbose',\n      parameterShortName: '-v',\n      description: 'Display the logs during the build, rather than just displaying the build status summary'\n    });\n\n    if (this._isIncrementalBuildAllowed) {\n      this._changedProjectsOnly = this.defineFlagParameter({\n        parameterLongName: '--changed-projects-only',\n        parameterShortName: '-c',\n        description:\n          'Normally the incremental build logic will rebuild changed projects as well as' +\n          ' any projects that directly or indirectly depend on a changed project. Specify \"--changed-projects-only\"' +\n          ' to ignore dependent projects, only rebuilding those projects whose files were changed.' +\n          ' Note that this parameter is \"unsafe\"; it is up to the developer to ensure that the ignored projects' +\n          ' are okay to ignore.'\n      });\n    }\n\n    this._ignoreHooksParameter = this.defineFlagParameter({\n      parameterLongName: '--ignore-hooks',\n      description: `Skips execution of the \"eventHooks\" scripts defined in rush.json. Make sure you know what you are skipping.`\n    });\n\n    if (this._watchPhases.size > 0 && !this._alwaysWatch) {\n      // Only define the parameter if it has an effect.\n      this._watchParameter = this.defineFlagParameter({\n        parameterLongName: '--watch',\n        description: `Starts a file watcher after initial execution finishes. Will run the following phases on affected projects: ${Array.from(\n          this._watchPhases,\n          (phase: IPhase) => phase.name\n        ).join(', ')}`\n      });\n    }\n\n    // If `this._alwaysInstall === undefined`, Rush does not define the parameter\n    // but a repository may still define a custom parameter with the same name.\n    if (this._alwaysInstall === false) {\n      this._installParameter = this.defineFlagParameter({\n        parameterLongName: '--install',\n        description:\n          'Normally a phased command expects \"rush install\" to have been manually run first. If this flag is specified, ' +\n          'Rush will automatically perform an install before processing the current command.'\n      });\n    }\n\n    this.defineScriptParameters();\n\n    for (const [{ associatedPhases }, tsCommandLineParameter] of this.customParameters) {\n      if (associatedPhases) {\n        for (const phaseName of associatedPhases) {\n          const phase: IPhase | undefined = this._knownPhases.get(phaseName);\n          if (!phase) {\n            throw new InternalError(`Could not find a phase matching ${phaseName}.`);\n          }\n          phase.associatedParameters.add(tsCommandLineParameter);\n        }\n      }\n    }\n  }\n\n  /**\n   * Runs a set of operations and reports the results.\n   */\n  private async _executeOperations(options: IExecutionOperationsOptions): Promise<void> {\n    const { executionManagerOptions, ignoreHooks, operations, stopwatch, terminal } = options;\n\n    const executionManager: OperationExecutionManager = new OperationExecutionManager(\n      operations,\n      executionManagerOptions\n    );\n\n    const { isInitial, isWatch } = options.createOperationsContext;\n\n    let success: boolean = false;\n    let result: IExecutionResult | undefined;\n\n    try {\n      result = await executionManager.executeAsync();\n      success = result.status === OperationStatus.Success;\n\n      await this.hooks.afterExecuteOperations.promise(result, options.createOperationsContext);\n\n      stopwatch.stop();\n\n      const message: string = `rush ${this.actionName} (${stopwatch.toString()})`;\n      if (result.status === OperationStatus.Success) {\n        terminal.writeLine(colors.green(message));\n      } else {\n        terminal.writeLine(message);\n      }\n    } catch (error) {\n      success = false;\n      stopwatch.stop();\n\n      if (error instanceof AlreadyReportedError) {\n        terminal.writeLine(`rush ${this.actionName} (${stopwatch.toString()})`);\n      } else {\n        if (error && (error as Error).message) {\n          if (this.parser.isDebug) {\n            terminal.writeErrorLine('Error: ' + (error as Error).stack);\n          } else {\n            terminal.writeErrorLine('Error: ' + (error as Error).message);\n          }\n        }\n\n        terminal.writeErrorLine(colors.red(`rush ${this.actionName} - Errors! (${stopwatch.toString()})`));\n      }\n    }\n\n    if (!ignoreHooks) {\n      this._doAfterTask();\n    }\n\n    if (this.parser.telemetry) {\n      const extraData: IPhasedCommandTelemetry = {\n        // Fields preserved across the command invocation\n        ...this._selectionParameters.getTelemetry(),\n        ...this.getParameterStringMap(),\n        isWatch,\n        // Fields specific to the current operation set\n        isInitial,\n\n        countAll: 0,\n        countSuccess: 0,\n        countSuccessWithWarnings: 0,\n        countFailure: 0,\n        countBlocked: 0,\n        countFromCache: 0,\n        countSkipped: 0,\n        countNoOp: 0\n      };\n\n      if (result) {\n        for (const [operation, operationResult] of result.operationResults) {\n          if (operation.runner?.silent) {\n            // Architectural operation. Ignore.\n            continue;\n          }\n\n          extraData.countAll++;\n          switch (operationResult.status) {\n            case OperationStatus.Success:\n              extraData.countSuccess++;\n              break;\n            case OperationStatus.SuccessWithWarning:\n              extraData.countSuccessWithWarnings++;\n              break;\n            case OperationStatus.Failure:\n              extraData.countFailure++;\n              break;\n            case OperationStatus.Blocked:\n              extraData.countBlocked++;\n              break;\n            case OperationStatus.FromCache:\n              extraData.countFromCache++;\n              break;\n            case OperationStatus.Skipped:\n              extraData.countSkipped++;\n              break;\n            case OperationStatus.NoOp:\n              extraData.countNoOp++;\n              break;\n            default:\n              // Do nothing.\n              break;\n          }\n        }\n      }\n\n      this.parser.telemetry.log({\n        name: this.actionName,\n        durationInSeconds: stopwatch.duration,\n        result: success ? 'Succeeded' : 'Failed',\n        extraData\n      });\n\n      this.parser.flushTelemetry();\n    }\n\n    if (!success && !isWatch) {\n      throw new AlreadyReportedError();\n    }\n  }\n\n  private _doBeforeTask(): void {\n    if (\n      this.actionName !== RushConstants.buildCommandName &&\n      this.actionName !== RushConstants.rebuildCommandName\n    ) {\n      // Only collects information for built-in commands like build or rebuild.\n      return;\n    }\n\n    SetupChecks.validate(this.rushConfiguration);\n\n    this.eventHooksManager.handle(Event.preRushBuild, this.parser.isDebug, this._ignoreHooksParameter.value);\n  }\n\n  private _doAfterTask(): void {\n    if (\n      this.actionName !== RushConstants.buildCommandName &&\n      this.actionName !== RushConstants.rebuildCommandName\n    ) {\n      // Only collects information for built-in commands like build or rebuild.\n      return;\n    }\n    this.eventHooksManager.handle(Event.postRushBuild, this.parser.isDebug, this._ignoreHooksParameter.value);\n  }\n}\n"]}