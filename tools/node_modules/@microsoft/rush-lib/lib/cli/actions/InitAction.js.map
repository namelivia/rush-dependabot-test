{"version":3,"file":"InitAction.js","sourceRoot":"","sources":["../../../src/cli/actions/InitAction.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport colors from 'colors/safe';\nimport * as os from 'os';\nimport * as path from 'path';\n\nimport { RushCommandLineParser } from '../RushCommandLineParser';\nimport { BaseConfiglessRushAction } from './BaseRushAction';\nimport {\n  FileSystem,\n  NewlineKind,\n  InternalError,\n  AlreadyReportedError,\n  FileSystemStats\n} from '@rushstack/node-core-library';\nimport { CommandLineFlagParameter } from '@rushstack/ts-command-line';\n\nimport { Rush } from '../../api/Rush';\n\nexport class InitAction extends BaseConfiglessRushAction {\n  // Matches a well-formed BEGIN macro starting a block section.\n  // Example:  /*[BEGIN \"DEMO\"]*/\n  //\n  // Group #1 is the indentation spaces before the macro\n  // Group #2 is the section name\n  private static _beginMacroRegExp: RegExp = /^(\\s*)\\/\\*\\[BEGIN \"([A-Z]+)\"\\]\\s*\\*\\/\\s*$/;\n\n  // Matches a well-formed END macro ending a block section.\n  // Example:  /*[END \"DEMO\"]*/\n  //\n  // Group #1 is the indentation spaces before the macro\n  // Group #2 is the section name\n  private static _endMacroRegExp: RegExp = /^(\\s*)\\/\\*\\[END \"([A-Z]+)\"\\]\\s*\\*\\/\\s*$/;\n\n  // Matches a well-formed single-line section, including the space character after it\n  // if present.\n  // Example:  /*[LINE \"HYPOTHETICAL\"]*/\n  //\n  // Group #1 is the section name\n  private static _lineMacroRegExp: RegExp = /\\/\\*\\[LINE \"([A-Z]+)\"\\]\\s*\\*\\/\\s?/;\n\n  // Matches a variable expansion.\n  // Example:  [%RUSH_VERSION%]\n  //\n  // Group #1 is the variable name including the dollar sign\n  private static _variableMacroRegExp: RegExp = /\\[(%[A-Z0-9_]+%)\\]/;\n\n  // Matches anything that starts with \"/*[\" and ends with \"]*/\"\n  // Used to catch malformed macro expressions\n  private static _anyMacroRegExp: RegExp = /\\/\\*\\s*\\[.*\\]\\s*\\*\\//;\n\n  private _overwriteParameter!: CommandLineFlagParameter;\n  private _rushExampleParameter!: CommandLineFlagParameter;\n\n  // template section name --> whether it should be commented out\n  private _commentedBySectionName: Map<string, boolean> = new Map<string, boolean>();\n\n  public constructor(parser: RushCommandLineParser) {\n    super({\n      actionName: 'init',\n      summary: 'Initializes a new repository to be managed by Rush',\n      documentation:\n        'When invoked in an empty folder, this command provisions a standard' +\n        ' set of config file templates to start managing projects using Rush.',\n      parser\n    });\n  }\n\n  protected onDefineParameters(): void {\n    // abstract\n    this._overwriteParameter = this.defineFlagParameter({\n      parameterLongName: '--overwrite-existing',\n      description:\n        'By default \"rush init\" will not overwrite existing config files.' +\n        ' Specify this switch to override that. This can be useful when upgrading' +\n        ' your repo to a newer release of Rush. WARNING: USE WITH CARE!'\n    });\n    this._rushExampleParameter = this.defineFlagParameter({\n      parameterLongName: '--rush-example-repo',\n      description:\n        'When copying the template config files, this uncomments fragments that are used' +\n        ' by the \"rush-example\" GitHub repo, which is a sample monorepo that illustrates many Rush' +\n        ' features. This option is primarily intended for maintaining that example.'\n    });\n  }\n\n  protected async runAsync(): Promise<void> {\n    const initFolder: string = process.cwd();\n\n    if (!this._overwriteParameter.value) {\n      if (!this._validateFolderIsEmpty(initFolder)) {\n        throw new AlreadyReportedError();\n      }\n    }\n\n    this._defineMacroSections();\n    this._copyTemplateFiles(initFolder);\n  }\n\n  private _defineMacroSections(): void {\n    this._commentedBySectionName.clear();\n\n    // The \"HYPOTHETICAL\" sections are always commented out by \"rush init\".\n    // They are uncommented in the \"assets\" source folder so that we can easily validate\n    // that they conform to their JSON schema.\n    this._commentedBySectionName.set('HYPOTHETICAL', true);\n\n    // The \"DEMO\" sections are uncommented only when \"--rush-example-repo\" is specified.\n    this._commentedBySectionName.set('DEMO', !this._rushExampleParameter.value);\n  }\n\n  // Check whether it's safe to run \"rush init\" in the current working directory.\n  private _validateFolderIsEmpty(initFolder: string): boolean {\n    if (this.rushConfiguration !== undefined) {\n      console.error(\n        colors.red('ERROR: Found an existing configuration in: ' + this.rushConfiguration.rushJsonFile)\n      );\n      console.log(\n        os.EOL +\n          'The \"rush init\" command must be run in a new folder without ' +\n          'an existing Rush configuration.'\n      );\n      return false;\n    }\n\n    for (const itemName of FileSystem.readFolderItemNames(initFolder)) {\n      if (itemName.substr(0, 1) === '.') {\n        // Ignore any items that start with \".\", for example \".git\"\n        continue;\n      }\n\n      const itemPath: string = path.join(initFolder, itemName);\n\n      const stats: FileSystemStats = FileSystem.getStatistics(itemPath);\n      // Ignore any loose files in the current folder, e.g. \"README.md\"\n      // or \"CONTRIBUTING.md\"\n      if (stats.isDirectory()) {\n        console.error(colors.red(`ERROR: Found a subdirectory: \"${itemName}\"`));\n        console.log(\n          os.EOL + 'The \"rush init\" command must be run in a new folder with no projects added yet.'\n        );\n        return false;\n      } else {\n        if (itemName.toLowerCase() === 'package.json') {\n          console.error(colors.red(`ERROR: Found a package.json file in this folder`));\n          console.log(\n            os.EOL + 'The \"rush init\" command must be run in a new folder with no projects added yet.'\n          );\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  private _copyTemplateFiles(initFolder: string): void {\n    // The \"[dot]\" base name is used for hidden files to prevent various tools from interpreting them.\n    // For example, \"npm publish\" will always exclude the filename \".gitignore\"\n    const templateFilePaths: string[] = [\n      'rush.json',\n      '[dot]gitattributes',\n      '[dot]gitignore',\n      '[dot]travis.yml',\n      'common/config/rush/[dot]npmrc',\n      'common/config/rush/[dot]npmrc-publish',\n      'common/config/rush/artifactory.json',\n      'common/config/rush/build-cache.json',\n      'common/config/rush/command-line.json',\n      'common/config/rush/common-versions.json',\n      'common/config/rush/experiments.json',\n      'common/config/rush/.pnpmfile.cjs',\n      'common/config/rush/version-policies.json',\n      'common/config/rush/rush-plugins.json',\n      'common/git-hooks/commit-msg.sample'\n    ];\n\n    const assetsSubfolder: string = path.resolve(__dirname, '../../../assets/rush-init');\n\n    for (const templateFilePath of templateFilePaths) {\n      const sourcePath: string = path.join(assetsSubfolder, templateFilePath);\n\n      if (!FileSystem.exists(sourcePath)) {\n        // If this happens, please report a Rush bug\n        throw new InternalError('Unable to find template input file: ' + sourcePath);\n      }\n\n      const destinationPath: string = path.join(initFolder, templateFilePath).replace('[dot]', '.');\n\n      this._copyTemplateFile(sourcePath, destinationPath);\n    }\n  }\n\n  // Copy the template from sourcePath, transform any macros, and write the output to destinationPath.\n  //\n  // We implement a simple template engine.  \"Single-line section\" macros have this form:\n  //\n  //     /*[LINE \"NAME\"]*/ (content goes here)\n  //\n  // ...and when commented out will look like this:\n  //\n  //     // (content goes here)\n  //\n  // \"Block section\" macros have this form:\n  //\n  //     /*[BEGIN \"NAME\"]*/\n  //     (content goes\n  //     here)\n  //     /*[END \"NAME\"]*/\n  //\n  // ...and when commented out will look like this:\n  //\n  //     // (content goes\n  //     // here)\n  //\n  // Lastly, a variable expansion has this form:\n  //\n  //     // The value is [%NAME%].\n  //\n  // ...and when expanded with e.g. \"123\" will look like this:\n  //\n  //     // The value is 123.\n  //\n  // The section names must be one of the predefined names used by \"rush init\".\n  // A single-line section may appear inside a block section, in which case it will get\n  // commented twice.\n  private _copyTemplateFile(sourcePath: string, destinationPath: string): void {\n    const destinationFileExists: boolean = FileSystem.exists(destinationPath);\n\n    if (!this._overwriteParameter.value) {\n      if (destinationFileExists) {\n        console.log(colors.yellow('Not overwriting already existing file: ') + destinationPath);\n        return;\n      }\n    }\n\n    if (destinationFileExists) {\n      console.log(colors.yellow(`Overwriting: ${destinationPath}`));\n    } else {\n      console.log(`Generating: ${destinationPath}`);\n    }\n\n    const outputLines: string[] = [];\n    const lines: string[] = FileSystem.readFile(sourcePath, { convertLineEndings: NewlineKind.Lf }).split(\n      '\\n'\n    );\n\n    let activeBlockSectionName: string | undefined = undefined;\n    let activeBlockIndent: string = '';\n\n    for (const line of lines) {\n      let match: RegExpMatchArray | null;\n\n      // Check for a block section start\n      // Example:  /*[BEGIN \"DEMO\"]*/\n      match = line.match(InitAction._beginMacroRegExp);\n      if (match) {\n        if (activeBlockSectionName) {\n          // If this happens, please report a Rush bug\n          throw new InternalError(\n            `The template contains an unmatched BEGIN macro for \"${activeBlockSectionName}\"`\n          );\n        }\n\n        activeBlockSectionName = match[2];\n        activeBlockIndent = match[1];\n        // Remove the entire line containing the macro\n        continue;\n      }\n\n      // Check for a block section end\n      // Example:  /*[END \"DEMO\"]*/\n      match = line.match(InitAction._endMacroRegExp);\n      if (match) {\n        if (activeBlockSectionName === undefined) {\n          // If this happens, please report a Rush bug\n          throw new InternalError(\n            `The template contains an unmatched END macro for \"${activeBlockSectionName}\"`\n          );\n        }\n\n        if (activeBlockSectionName !== match[2]) {\n          // If this happens, please report a Rush bug\n          throw new InternalError(\n            `The template contains an mismatched END macro for \"${activeBlockSectionName}\"`\n          );\n        }\n\n        if (activeBlockIndent !== match[1]) {\n          // If this happens, please report a Rush bug\n          throw new InternalError(\n            `The template contains an inconsistently indented section \"${activeBlockSectionName}\"`\n          );\n        }\n\n        activeBlockSectionName = undefined;\n\n        // Remove the entire line containing the macro\n        continue;\n      }\n\n      let transformedLine: string = line;\n\n      // Check for a single-line section\n      // Example:  /*[LINE \"HYPOTHETICAL\"]*/\n      match = transformedLine.match(InitAction._lineMacroRegExp);\n      if (match) {\n        const sectionName: string = match[1];\n        const replacement: string = this._isSectionCommented(sectionName) ? '// ' : '';\n        transformedLine = transformedLine.replace(InitAction._lineMacroRegExp, replacement);\n      }\n\n      // Check for variable expansions\n      // Example:  [%RUSH_VERSION%]\n      while ((match = transformedLine.match(InitAction._variableMacroRegExp))) {\n        const variableName: string = match[1];\n        const replacement: string = this._expandMacroVariable(variableName);\n        transformedLine = transformedLine.replace(InitAction._variableMacroRegExp, replacement);\n      }\n\n      // Verify that all macros were handled\n      match = transformedLine.match(InitAction._anyMacroRegExp);\n      if (match) {\n        // If this happens, please report a Rush bug\n        throw new InternalError(\n          'The template contains a malformed macro expression: ' + JSON.stringify(match[0])\n        );\n      }\n\n      // If we are inside a block section that is commented out, then insert the \"//\" after indentation\n      if (activeBlockSectionName !== undefined) {\n        if (this._isSectionCommented(activeBlockSectionName)) {\n          // Is the line indented properly?\n          if (transformedLine.substr(0, activeBlockIndent.length).trim().length > 0) {\n            // If this happens, please report a Rush bug\n            throw new InternalError(\n              `The template contains inconsistently indented lines inside` +\n                ` the \"${activeBlockSectionName}\" section`\n            );\n          }\n\n          // Insert comment characters after the indentation\n          const contentAfterIndent: string = transformedLine.substr(activeBlockIndent.length);\n          transformedLine = activeBlockIndent + '// ' + contentAfterIndent;\n        }\n      }\n\n      outputLines.push(transformedLine);\n    }\n\n    // Write the output\n    FileSystem.writeFile(destinationPath, outputLines.join(os.EOL), {\n      ensureFolderExists: true\n    });\n  }\n\n  private _isSectionCommented(sectionName: string): boolean {\n    const value: boolean | undefined = this._commentedBySectionName.get(sectionName);\n    if (value === undefined) {\n      // If this happens, please report a Rush bug\n      throw new InternalError(`The template references an undefined section name ${sectionName}`);\n    }\n\n    return value!;\n  }\n\n  private _expandMacroVariable(variableName: string): string {\n    switch (variableName) {\n      case '%RUSH_VERSION%':\n        return Rush.version;\n      default:\n        throw new InternalError(`The template references an undefined variable \"${variableName}\"`);\n    }\n  }\n}\n"]}