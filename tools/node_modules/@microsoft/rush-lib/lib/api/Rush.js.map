{"version":3,"file":"Rush.js","sourceRoot":"","sources":["../../src/api/Rush.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,oEAAoF;AAEpF,wEAAqE;AACrE,gEAA6D;AAC7D,8DAA2D;AAC3D,oFAAiF;AACjF,yEAAsE;AAEtE,oEAAiE;AAkCjE;;;;GAIG;AACH,MAAa,IAAI;IAGf;;;;;;;;;;OAUG;IACI,MAAM,CAAC,MAAM,CAAC,eAAuB,EAAE,GAAmB;QAC/D,MAAM,OAAO,GAAmB,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,CAAC;QAElE,IAAI,CAAC,6CAAqB,CAAC,2BAA2B,EAAE,EAAE;YACxD,qCAAiB,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,EAAE,OAAO,CAAC,SAAS,CAAC,CAAC;SAC9D;QAED,IAAI,CAAC,yDAA2B,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YACxD,4DAA4D;YAC5D,OAAO,CAAC,QAAQ,GAAG,CAAC,CAAC;YACrB,OAAO;SACR;QAED,IAAI,CAAC,wBAAwB,EAAE,CAAC;QAChC,MAAM,MAAM,GAA0B,IAAI,6CAAqB,CAAC;YAC9D,8BAA8B,EAAE,OAAO,CAAC,8BAA8B;YACtE,2BAA2B,EAAE,OAAO,CAAC,2BAA2B;SACjE,CAAC,CAAC;QACH,MAAM,CAAC,OAAO,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,8DAA8D;IACvG,CAAC;IAED;;;;OAIG;IACI,MAAM,CAAC,WAAW,CAAC,eAAuB,EAAE,OAAuB;QACxE,OAAO,GAAG,IAAI,CAAC,uBAAuB,CAAC,OAAO,CAAC,CAAC;QAEhD,IAAI,CAAC,wBAAwB,EAAE,CAAC;QAChC,mCAAgB,CAAC,oBAAoB,CAAC,eAAe,oBAAO,OAAO,EAAG,CAAC;IACzE,CAAC;IAED;;;;OAIG;IACI,MAAM,CAAC,cAAc,CAAC,eAAuB,EAAE,OAAuB;QAC3E,IAAI,CAAC,wBAAwB,EAAE,CAAC;QAChC,yCAAmB,CAAC,MAAM,CAAC,eAAe,oBAAO,OAAO,EAAG,CAAC;IAC9D,CAAC;IAED;;;OAGG;IACI,MAAM,KAAK,OAAO;QACvB,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAClB,IAAI,CAAC,QAAQ,GAAG,qCAAiB,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC;SACzE;QAED,OAAO,IAAI,CAAC,QAAS,CAAC;IACxB,CAAC;IAED;;;;;;;;;;OAUG;IACK,MAAM,CAAC,wBAAwB;QACrC,OAAO,CAAC,GAAG,CAAC,mDAAwB,CAAC,mBAAmB,CAAC,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC;IAC5E,CAAC;IAED;;OAEG;IACK,MAAM,CAAC,uBAAuB,CAAC,GAAmB;QACxD,OAAO,OAAO,GAAG,KAAK,SAAS;YAC7B,CAAC,CAAC,EAAE,SAAS,EAAE,GAAG,EAAE,CAAC,4FAA4F;YACjH,CAAC,CAAC,GAAG,CAAC;IACV,CAAC;;AA3FH,oBA4FC;AA3FgB,aAAQ,GAAuB,SAAS,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { ITerminalProvider, PackageJsonLookup } from '@rushstack/node-core-library';\n\nimport { RushCommandLineParser } from '../cli/RushCommandLineParser';\nimport { RushStartupBanner } from '../cli/RushStartupBanner';\nimport { RushXCommandLine } from '../cli/RushXCommandLine';\nimport { CommandLineMigrationAdvisor } from '../cli/CommandLineMigrationAdvisor';\nimport { EnvironmentVariableNames } from './EnvironmentConfiguration';\nimport { IBuiltInPluginConfiguration } from '../pluginFramework/PluginLoader/BuiltInPluginLoader';\nimport { RushPnpmCommandLine } from '../cli/RushPnpmCommandLine';\n\n/**\n * Options to pass to the rush \"launch\" functions.\n *\n * @public\n */\nexport interface ILaunchOptions {\n  /**\n   * True if the tool was invoked from within a project with a rush.json file, otherwise false. We\n   * consider a project without a rush.json to be \"unmanaged\" and we'll print that to the command line when\n   * the tool is executed. This is mainly used for debugging purposes.\n   */\n  isManaged: boolean;\n\n  /**\n   * If true, the wrapper process already printed a warning that the version of Node.js hasn't been tested\n   * with this version of Rush, so we shouldn't print a similar error.\n   */\n  alreadyReportedNodeTooNewError?: boolean;\n\n  /**\n   * Used to specify Rush plugins that are dependencies of the \"\\@microsoft/rush\" package.\n   *\n   * @internal\n   */\n  builtInPluginConfigurations?: IBuiltInPluginConfiguration[];\n\n  /**\n   * Used to specify terminal how to write a message\n   */\n  terminalProvider?: ITerminalProvider;\n}\n\n/**\n * General operations for the Rush engine.\n *\n * @public\n */\nexport class Rush {\n  private static _version: string | undefined = undefined;\n\n  /**\n   * This API is used by the `@microsoft/rush` front end to launch the \"rush\" command-line.\n   * Third-party tools should not use this API.  Instead, they should execute the \"rush\" binary\n   * and start a new Node.js process.\n   *\n   * @remarks\n   * Earlier versions of the rush frontend used a different API contract. In the old contract,\n   * the second argument was the `isManaged` value of the {@link ILaunchOptions} object.\n   *\n   * Even though this API isn't documented, it is still supported for legacy compatibility.\n   */\n  public static launch(launcherVersion: string, arg: ILaunchOptions): void {\n    const options: ILaunchOptions = Rush._normalizeLaunchOptions(arg);\n\n    if (!RushCommandLineParser.shouldRestrictConsoleOutput()) {\n      RushStartupBanner.logBanner(Rush.version, options.isManaged);\n    }\n\n    if (!CommandLineMigrationAdvisor.checkArgv(process.argv)) {\n      // The migration advisor recognized an obsolete command-line\n      process.exitCode = 1;\n      return;\n    }\n\n    Rush._assignRushInvokedFolder();\n    const parser: RushCommandLineParser = new RushCommandLineParser({\n      alreadyReportedNodeTooNewError: options.alreadyReportedNodeTooNewError,\n      builtInPluginConfigurations: options.builtInPluginConfigurations\n    });\n    parser.execute().catch(console.error); // CommandLineParser.execute() should never reject the promise\n  }\n\n  /**\n   * This API is used by the `@microsoft/rush` front end to launch the \"rushx\" command-line.\n   * Third-party tools should not use this API.  Instead, they should execute the \"rushx\" binary\n   * and start a new Node.js process.\n   */\n  public static launchRushX(launcherVersion: string, options: ILaunchOptions): void {\n    options = Rush._normalizeLaunchOptions(options);\n\n    Rush._assignRushInvokedFolder();\n    RushXCommandLine._launchRushXInternal(launcherVersion, { ...options });\n  }\n\n  /**\n   * This API is used by the `@microsoft/rush` front end to launch the \"rush-pnpm\" command-line.\n   * Third-party tools should not use this API.  Instead, they should execute the \"rush-pnpm\" binary\n   * and start a new Node.js process.\n   */\n  public static launchRushPnpm(launcherVersion: string, options: ILaunchOptions): void {\n    Rush._assignRushInvokedFolder();\n    RushPnpmCommandLine.launch(launcherVersion, { ...options });\n  }\n\n  /**\n   * The currently executing version of the \"rush-lib\" library.\n   * This is the same as the Rush tool version for that release.\n   */\n  public static get version(): string {\n    if (!this._version) {\n      this._version = PackageJsonLookup.loadOwnPackageJson(__dirname).version;\n    }\n\n    return this._version!;\n  }\n\n  /**\n   * Assign the `RUSH_INVOKED_FOLDER` environment variable during startup.  This is only applied when\n   * Rush is invoked via the CLI, not via the `@microsoft/rush-lib` automation API.\n   *\n   * @remarks\n   * Modifying the parent process's environment is not a good design.  The better design is (1) to consolidate\n   * Rush's code paths that invoke scripts, and (2) to pass down the invoked folder with each code path,\n   * so that it can finally be applied in a centralized helper like `Utilities._createEnvironmentForRushCommand()`.\n   * The natural time to do that refactoring is when we rework `Utilities.executeCommand()` to use\n   * `Executable.spawn()` or rushell.\n   */\n  private static _assignRushInvokedFolder(): void {\n    process.env[EnvironmentVariableNames.RUSH_INVOKED_FOLDER] = process.cwd();\n  }\n\n  /**\n   * This function normalizes legacy options to the current {@link ILaunchOptions} object.\n   */\n  private static _normalizeLaunchOptions(arg: ILaunchOptions): ILaunchOptions {\n    return typeof arg === 'boolean'\n      ? { isManaged: arg } // In older versions of Rush, this the `launch` functions took a boolean arg for \"isManaged\"\n      : arg;\n  }\n}\n"]}