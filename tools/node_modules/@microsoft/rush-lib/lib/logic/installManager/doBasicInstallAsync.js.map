{"version":3,"file":"doBasicInstallAsync.js","sourceRoot":"","sources":["../../../src/logic/installManager/doBasicInstallAsync.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAK3D,oEAAiE;AACjE,gDAA6C;AAC7C,kDAA+C;AAC/C,oFAAiF;AAQ1E,KAAK,UAAU,mBAAmB,CAAC,OAA2B;IACnE,MAAM,EAAE,iBAAiB,EAAE,gBAAgB,EAAE,OAAO,EAAE,GAAG,OAAO,CAAC;IAEjE,6CAAqB,CAAC,wBAAwB,CAAC,iBAAiB,CAAC,CAAC;IAClE,yBAAW,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC;IAExC,MAAM,YAAY,GAAkC,IAAI,2BAAY,CAAC,iBAAiB,EAAE,gBAAgB,CAAC,CAAC;IAE1G,MAAM,cAAc,GAAuB,6CAAqB,CAAC,iBAAiB,CAChF,iBAAiB,EACjB,gBAAgB,EAChB,YAAY,EACZ;QACE,KAAK,EAAE,OAAO;QACd,sBAAsB,EAAE,KAAK;QAC7B,SAAS,EAAE,KAAK;QAChB,YAAY,EAAE,KAAK;QACnB,MAAM,EAAE,KAAK;QACb,WAAW,EAAE,KAAK;QAClB,iBAAiB,EAAE,KAAK;QACxB,cAAc,EAAE,KAAK;QACrB,mBAAmB,EAAE,EAAE;QACvB,kBAAkB,EAAE,CAAC;QACrB,kBAAkB,EAAE,SAAS;KAC9B,CACF,CAAC;IAEF,IAAI;QACF,MAAM,cAAc,CAAC,cAAc,EAAE,CAAC;KACvC;YAAS;QACR,YAAY,CAAC,SAAS,EAAE,CAAC;KAC1B;AACH,CAAC;AAhCD,kDAgCC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport type { RushConfiguration } from '../../api/RushConfiguration';\nimport type { RushGlobalFolder } from '../../api/RushGlobalFolder';\nimport type { BaseInstallManager } from '../base/BaseInstallManager';\nimport { InstallManagerFactory } from '../InstallManagerFactory';\nimport { SetupChecks } from '../SetupChecks';\nimport { PurgeManager } from '../PurgeManager';\nimport { VersionMismatchFinder } from '../versionMismatch/VersionMismatchFinder';\n\nexport interface IRunInstallOptions {\n  rushConfiguration: RushConfiguration;\n  rushGlobalFolder: RushGlobalFolder;\n  isDebug: boolean;\n}\n\nexport async function doBasicInstallAsync(options: IRunInstallOptions): Promise<void> {\n  const { rushConfiguration, rushGlobalFolder, isDebug } = options;\n\n  VersionMismatchFinder.ensureConsistentVersions(rushConfiguration);\n  SetupChecks.validate(rushConfiguration);\n\n  const purgeManager: typeof PurgeManager.prototype = new PurgeManager(rushConfiguration, rushGlobalFolder);\n\n  const installManager: BaseInstallManager = InstallManagerFactory.getInstallManager(\n    rushConfiguration,\n    rushGlobalFolder,\n    purgeManager,\n    {\n      debug: isDebug,\n      allowShrinkwrapUpdates: false,\n      checkOnly: false,\n      bypassPolicy: false,\n      noLink: false,\n      fullUpgrade: false,\n      recheckShrinkwrap: false,\n      collectLogFile: false,\n      pnpmFilterArguments: [],\n      maxInstallAttempts: 1,\n      networkConcurrency: undefined\n    }\n  );\n\n  try {\n    await installManager.doInstallAsync();\n  } finally {\n    purgeManager.deleteAll();\n  }\n}\n"]}