{"version":3,"file":"BaseRushAction.js","sourceRoot":"","sources":["../../../src/cli/actions/BaseRushAction.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport colors from 'colors/safe';\nimport * as os from 'os';\nimport * as path from 'path';\n\nimport { CommandLineAction, ICommandLineActionOptions } from '@rushstack/ts-command-line';\nimport { LockFile } from '@rushstack/node-core-library';\n\nimport { RushConfiguration } from '../../api/RushConfiguration';\nimport { EventHooksManager } from '../../logic/EventHooksManager';\nimport { RushCommandLineParser } from './../RushCommandLineParser';\nimport { Utilities } from '../../utilities/Utilities';\nimport { RushGlobalFolder } from '../../api/RushGlobalFolder';\nimport { RushSession } from '../../pluginFramework/RushSession';\nimport type { IRushCommand } from '../../pluginFramework/RushLifeCycle';\n\nexport interface IBaseRushActionOptions extends ICommandLineActionOptions {\n  /**\n   * By default, Rush operations acquire a lock file which prevents multiple commands from executing simultaneously\n   * in the same repo folder.  (For example, it would be a mistake to run \"rush install\" and \"rush build\" at the\n   * same time.)  If your command makes sense to run concurrently with other operations,\n   * set safeForSimultaneousRushProcesses=true to disable this protection.  In particular, this is needed for\n   * custom scripts that invoke other Rush commands.\n   */\n  safeForSimultaneousRushProcesses?: boolean;\n\n  /**\n   * The rush parser.\n   */\n  parser: RushCommandLineParser;\n}\n\n/**\n * The base class for a few specialized Rush command-line actions that\n * can be used without a rush.json configuration.\n */\nexport abstract class BaseConfiglessRushAction extends CommandLineAction implements IRushCommand {\n  private _parser: RushCommandLineParser;\n  private _safeForSimultaneousRushProcesses: boolean;\n\n  protected get rushConfiguration(): RushConfiguration | undefined {\n    return this._parser.rushConfiguration;\n  }\n\n  protected get rushSession(): RushSession {\n    return this._parser.rushSession;\n  }\n\n  protected get rushGlobalFolder(): RushGlobalFolder {\n    return this._parser.rushGlobalFolder;\n  }\n\n  protected get parser(): RushCommandLineParser {\n    return this._parser;\n  }\n\n  public constructor(options: IBaseRushActionOptions) {\n    super(options);\n\n    this._parser = options.parser;\n    this._safeForSimultaneousRushProcesses = !!options.safeForSimultaneousRushProcesses;\n  }\n\n  protected onExecute(): Promise<void> {\n    this._ensureEnvironment();\n\n    if (this.rushConfiguration) {\n      if (!this._safeForSimultaneousRushProcesses) {\n        if (!LockFile.tryAcquire(this.rushConfiguration.commonTempFolder, 'rush')) {\n          console.log(colors.red(`Another Rush command is already running in this repository.`));\n          process.exit(1);\n        }\n      }\n    }\n\n    if (!RushCommandLineParser.shouldRestrictConsoleOutput()) {\n      console.log(`Starting \"rush ${this.actionName}\"${os.EOL}`);\n    }\n    return this.runAsync();\n  }\n\n  /**\n   * All Rush actions need to implement this method. This method runs after\n   * environment has been set up by the base class.\n   */\n  protected abstract runAsync(): Promise<void>;\n\n  private _ensureEnvironment(): void {\n    if (this.rushConfiguration) {\n      // eslint-disable-next-line dot-notation\n      let environmentPath: string | undefined = process.env['PATH'];\n      environmentPath =\n        path.join(this.rushConfiguration.commonTempFolder, 'node_modules', '.bin') +\n        path.delimiter +\n        environmentPath;\n      // eslint-disable-next-line dot-notation\n      process.env['PATH'] = environmentPath;\n    }\n  }\n}\n\n/**\n * The base class that most Rush command-line actions should extend.\n */\nexport abstract class BaseRushAction extends BaseConfiglessRushAction {\n  private _eventHooksManager: EventHooksManager | undefined;\n\n  protected get eventHooksManager(): EventHooksManager {\n    if (!this._eventHooksManager) {\n      this._eventHooksManager = new EventHooksManager(this.rushConfiguration);\n    }\n\n    return this._eventHooksManager;\n  }\n\n  protected get rushConfiguration(): RushConfiguration {\n    return super.rushConfiguration!;\n  }\n\n  protected async onExecute(): Promise<void> {\n    if (!this.rushConfiguration) {\n      throw Utilities.getRushConfigNotFoundError();\n    }\n\n    this._throwPluginErrorIfNeed();\n\n    await this.parser.pluginManager.tryInitializeAssociatedCommandPluginsAsync(this.actionName);\n\n    this._throwPluginErrorIfNeed();\n\n    const { hooks: sessionHooks } = this.rushSession;\n    if (sessionHooks.initialize.isUsed()) {\n      // Avoid the cost of compiling the hook if it wasn't tapped.\n      await sessionHooks.initialize.promise(this);\n    }\n\n    return super.onExecute();\n  }\n\n  /**\n   * If an error is encountered while trying to load plugins, it is saved in the `PluginManager.error`\n   * property, so we can defer throwing it until when `_throwPluginErrorIfNeed()` is called.\n   */\n  private _throwPluginErrorIfNeed(): void {\n    // If the plugin configuration is broken, these three commands are used to fix the problem:\n    //\n    //   \"rush update\"\n    //   \"rush init-autoinstaller\"\n    //   \"rush update-autoinstaller\"\n    //\n    // Thus we do not report plugin errors when invoking these commands.\n    if (!['update', 'init-autoinstaller', 'update-autoinstaller'].includes(this.actionName)) {\n      const pluginError: Error | undefined = this.parser.pluginManager.error;\n      if (pluginError) {\n        throw pluginError;\n      }\n    }\n  }\n}\n"]}