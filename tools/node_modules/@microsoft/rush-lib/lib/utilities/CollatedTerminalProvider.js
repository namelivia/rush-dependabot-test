"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
exports.CollatedTerminalProvider = void 0;
const node_core_library_1 = require("@rushstack/node-core-library");
class CollatedTerminalProvider {
    constructor(collatedTerminal, options) {
        this._hasErrors = false;
        this._hasWarnings = false;
        this._debugEnabled = false;
        this.supportsColor = true;
        this.eolCharacter = '\n';
        this._collatedTerminal = collatedTerminal;
        this._debugEnabled = !!(options === null || options === void 0 ? void 0 : options.debugEnabled);
    }
    get hasErrors() {
        return this._hasErrors;
    }
    get hasWarnings() {
        return this._hasWarnings;
    }
    write(data, severity) {
        switch (severity) {
            case node_core_library_1.TerminalProviderSeverity.log:
            case node_core_library_1.TerminalProviderSeverity.verbose: {
                // Unlike the basic ConsoleTerminalProvider, verbose messages are always passed
                // to stdout -- by convention the user-controlled build script output is sent
                // to verbose, and will be routed to a variety of other providers in the ProjectBuilder.
                this._collatedTerminal.writeChunk({ text: data, kind: "O" /* Stdout */ });
                break;
            }
            case node_core_library_1.TerminalProviderSeverity.debug: {
                // Similar to the basic ConsoleTerminalProvider, debug messages are discarded
                // unless they are explicitly enabled.
                if (this._debugEnabled) {
                    this._collatedTerminal.writeChunk({ text: data, kind: "O" /* Stdout */ });
                }
                break;
            }
            case node_core_library_1.TerminalProviderSeverity.error: {
                this._collatedTerminal.writeChunk({ text: data, kind: "E" /* Stderr */ });
                this._hasErrors = true;
                break;
            }
            case node_core_library_1.TerminalProviderSeverity.warning: {
                this._collatedTerminal.writeChunk({ text: data, kind: "E" /* Stderr */ });
                this._hasWarnings = true;
                break;
            }
            default: {
                throw new Error(`Unexpected severity: ${severity}`);
            }
        }
    }
}
exports.CollatedTerminalProvider = CollatedTerminalProvider;
//# sourceMappingURL=CollatedTerminalProvider.js.map