{"version":3,"file":"OperationStatus.js","sourceRoot":"","sources":["../../../src/logic/operations/OperationStatus.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D;;;GAGG;AACH,IAAY,eAqCX;AArCD,WAAY,eAAe;IACzB;;OAEG;IACH,kCAAe,CAAA;IACf;;OAEG;IACH,0CAAuB,CAAA;IACvB;;OAEG;IACH,sCAAmB,CAAA;IACnB;;OAEG;IACH,+DAA4C,CAAA;IAC5C;;OAEG;IACH,sCAAmB,CAAA;IACnB;;OAEG;IACH,2CAAwB,CAAA;IACxB;;OAEG;IACH,sCAAmB,CAAA;IACnB;;OAEG;IACH,sCAAmB,CAAA;IACnB;;OAEG;IACH,iCAAc,CAAA;AAChB,CAAC,EArCW,eAAe,GAAf,uBAAe,KAAf,uBAAe,QAqC1B","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\n/**\n * Enumeration defining potential states of an operation\n * @beta\n */\nexport enum OperationStatus {\n  /**\n   * The Operation is on the queue, ready to execute (but may be waiting for dependencies)\n   */\n  Ready = 'READY',\n  /**\n   * The Operation is currently executing\n   */\n  Executing = 'EXECUTING',\n  /**\n   * The Operation completed successfully and did not write to standard output\n   */\n  Success = 'SUCCESS',\n  /**\n   * The Operation completed successfully, but wrote to standard output\n   */\n  SuccessWithWarning = 'SUCCESS WITH WARNINGS',\n  /**\n   * The Operation was skipped via the legacy incremental build logic\n   */\n  Skipped = 'SKIPPED',\n  /**\n   * The Operation had its outputs restored from the build cache\n   */\n  FromCache = 'FROM CACHE',\n  /**\n   * The Operation failed\n   */\n  Failure = 'FAILURE',\n  /**\n   * The Operation could not be executed because one or more of its dependencies failed\n   */\n  Blocked = 'BLOCKED',\n  /**\n   * The Operation was a no-op (for example, it had an empty script)\n   */\n  NoOp = 'NO OP'\n}\n"]}